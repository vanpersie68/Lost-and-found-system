{"ast":null,"code":"import \"viewerjs/dist/viewer.css\";\nimport Viewer from \"viewerjs\";\nimport { uploadFile } from \"@/api/index\";\nimport vuedraggable from \"vuedraggable\";\nexport default {\n  name: \"uploadPicThumb\",\n  components: {\n    vuedraggable\n  },\n  props: {\n    value: {\n      type: null\n    },\n    draggable: {\n      type: Boolean,\n      default: true\n    },\n    multiple: {\n      type: Boolean,\n      default: true\n    },\n    maxSize: {\n      type: Number,\n      default: 5\n    },\n    limit: {\n      type: Number,\n      default: 10\n    },\n    width: {\n      type: String,\n      default: \"60px\"\n    },\n    height: {\n      type: String,\n      default: \"60px\"\n    },\n    accept: {\n      type: String,\n      default: \".jpg, .jpeg, .png, .gif\"\n    }\n  },\n  computed: {\n    format() {\n      if (this.accept) {\n        let format = [];\n        this.accept.split(\",\").forEach(e => {\n          format.push(e.replace(\".\", \"\").replace(\" \", \"\"));\n        });\n        return format;\n      } else {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      accessToken: {},\n      uploadFileUrl: uploadFile,\n      uploadList: []\n    };\n  },\n  methods: {\n    onEnd() {\n      this.returnValue();\n    },\n    init() {\n      this.setData(this.value, true);\n      this.accessToken = {\n        accessToken: this.getStore(\"accessToken\")\n      };\n    },\n    handleView(v, i) {\n      let image = new Image();\n      image.src = v;\n      let viewer = new Viewer(image, {\n        hidden: function () {\n          viewer.destroy();\n        }\n      });\n      viewer.show();\n    },\n    handleRemove(file) {\n      const uploadList = this.uploadList;\n      this.uploadList.splice(uploadList.indexOf(file), 1);\n      this.returnValue();\n    },\n    handleSuccess(res, file) {\n      if (res.success) {\n        file.url = res.result;\n        // Single image handling\n        if (!this.multiple && this.uploadList.length > 0) {\n          // Remove the first image\n          this.uploadList.splice(0, 1);\n        }\n        this.uploadList.push(file);\n        // Return component value\n        this.returnValue();\n      } else {\n        this.$Message.error(res.message);\n      }\n    },\n    handleError(error, file, fileList) {\n      this.$Message.error(error.toString());\n    },\n    handleFormatError(file) {\n      this.$Notice.warning({\n        title: \"Unsupported file format\",\n        desc: \"The selected file '\" + file.name + \"' has an incorrect format. Please select an image in \" + this.accept + \" format.\"\n      });\n    },\n    handleMaxSize(file) {\n      this.$Notice.warning({\n        title: \"File size too large\",\n        desc: \"The selected file '\" + file.name + \"' is too large. It must not exceed \" + this.maxSize + \"MB.\"\n      });\n    },\n    handleBeforeUpload() {\n      if (this.multiple && this.uploadList.length >= this.limit) {\n        this.$Message.warning(\"You can only upload up to \" + this.limit + \" images\");\n        return false;\n      }\n      return true;\n    },\n    returnValue() {\n      if (!this.uploadList || this.uploadList.length < 1) {\n        if (!this.multiple) {\n          this.$emit(\"input\", \"\");\n          this.$emit(\"on-change\", \"\");\n        } else {\n          this.$emit(\"input\", []);\n          this.$emit(\"on-change\", []);\n        }\n        return;\n      }\n      if (!this.multiple) {\n        // Single image\n        let v = this.uploadList[0].url;\n        this.$emit(\"input\", v);\n        this.$emit(\"on-change\", v);\n      } else {\n        let v = [];\n        this.uploadList.forEach(e => {\n          v.push(e.url);\n        });\n        this.$emit(\"input\", v);\n        this.$emit(\"on-change\", v);\n      }\n    },\n    setData(v, init) {\n      if (typeof v == \"string\") {\n        // Single image\n        if (this.multiple) {\n          this.$Message.warning(\"Multiple uploads support only array data type\");\n          return;\n        }\n        if (!v) {\n          return;\n        }\n        this.uploadList = [];\n        let item = {\n          url: v,\n          status: \"finished\"\n        };\n        this.uploadList.push(item);\n        this.$emit(\"on-change\", v);\n      } else if (typeof v == \"object\") {\n        // Multiple images\n        if (!this.multiple) {\n          this.$Message.warning(\"Single upload supports only string data type\");\n          return;\n        }\n        this.uploadList = [];\n        if (v.length > this.limit) {\n          for (let i = 0; i < this.limit; i++) {\n            let item = {\n              url: v[i],\n              status: \"finished\"\n            };\n            this.uploadList.push(item);\n          }\n          this.$emit(\"on-change\", v.slice(0, this.limit));\n          if (init) {\n            this.$emit(\"input\", v.slice(0, this.limit));\n          }\n          this.$Message.warning(\"You can only upload up to \" + this.limit + \" images\");\n        } else {\n          v.forEach(e => {\n            let item = {\n              url: e,\n              status: \"finished\"\n            };\n            this.uploadList.push(item);\n          });\n          this.$emit(\"on-change\", v);\n        }\n      }\n    }\n  },\n  watch: {\n    value(val) {\n      this.setData(val);\n    }\n  },\n  mounted() {\n    this.init();\n  }\n};","map":{"version":3,"names":["Viewer","uploadFile","vuedraggable","name","components","props","value","type","draggable","Boolean","default","multiple","maxSize","Number","limit","width","String","height","accept","computed","format","split","forEach","e","push","replace","data","accessToken","uploadFileUrl","uploadList","methods","onEnd","returnValue","init","setData","getStore","handleView","v","i","image","Image","src","viewer","hidden","destroy","show","handleRemove","file","splice","indexOf","handleSuccess","res","success","url","result","length","$Message","error","message","handleError","fileList","toString","handleFormatError","$Notice","warning","title","desc","handleMaxSize","handleBeforeUpload","$emit","item","status","slice","watch","val","mounted"],"sources":["src/views/template/upload-pic-thumb.vue"],"sourcesContent":["<template>\n    <div class=\"upload-thumb\">\n      <vuedraggable :list=\"uploadList\" :disabled=\"!draggable || !multiple\" :animation=\"200\" class=\"list-group\" ghost-class=\"thumb-ghost\" @end=\"onEnd\">\n        <div class=\"upload-list\" :style=\"{ width: `calc(${width} + 2px)`, height: `calc(${height} + 2px)`, lineHeight: height }\" v-for=\"(item, index) in uploadList\" :key=\"index\">\n          <div v-if=\"item.status == 'finished'\">\n            <img :src=\"item.url\" :style=\"{ height: height }\" />\n            <div class=\"upload-list-cover\">\n              <Icon type=\"ios-eye-outline\" @click=\"handleView(item.url, index)\"></Icon>\n              <Icon type=\"ios-trash-outline\" @click=\"handleRemove(item)\"></Icon>\n            </div>\n          </div>\n          <div v-else>\n            <Progress v-if=\"item.showProgress\" :percent=\"item.percentage\" hide-info></Progress>\n          </div>\n        </div>\n      </vuedraggable>\n      <Upload ref=\"upload\" :multiple=\"multiple\" :show-upload-list=\"false\" :on-success=\"handleSuccess\" :on-error=\"handleError\" :format=\"format\" :accept=\"accept\" :max-size=\"maxSize * 1024\" :on-format-error=\"handleFormatError\" :on-exceeded-size=\"handleMaxSize\" :before-upload=\"handleBeforeUpload\" type=\"drag\" :action=\"uploadFileUrl\" :headers=\"accessToken\" class=\"upload-btn\" :style=\"{ width: width }\">\n        <div class=\"upload-camera\" :style=\"{ width: width, height: height, lineHeight: height }\">\n          <Icon type=\"md-camera\" size=\"20\"></Icon>\n        </div>\n      </Upload>\n    </div>\n  </template>\n  \n  <script>\n  import \"viewerjs/dist/viewer.css\";\n  import Viewer from \"viewerjs\";\n  import { uploadFile } from \"@/api/index\";\n  import vuedraggable from \"vuedraggable\";\n  \n  export default {\n    name: \"uploadPicThumb\",\n    components: {\n      vuedraggable\n    },\n    props: {\n      value: {\n        type: null\n      },\n      draggable: {\n        type: Boolean,\n        default: true\n      },\n      multiple: {\n        type: Boolean,\n        default: true\n      },\n      maxSize: {\n        type: Number,\n        default: 5\n      },\n      limit: {\n        type: Number,\n        default: 10\n      },\n      width: {\n        type: String,\n        default: \"60px\"\n      },\n      height: {\n        type: String,\n        default: \"60px\"\n      },\n      accept: {\n        type: String,\n        default: \".jpg, .jpeg, .png, .gif\"\n      }\n    },\n    computed: {\n      format() {\n        if (this.accept) {\n          let format = [];\n          this.accept.split(\",\").forEach(e => {\n            format.push(e.replace(\".\", \"\").replace(\" \", \"\"));\n          });\n          return format;\n        } else {\n          return [];\n        }\n      }\n    },\n    data() {\n      return {\n        accessToken: {},\n        uploadFileUrl: uploadFile,\n        uploadList: []\n      };\n    },\n    methods: {\n      onEnd() {\n        this.returnValue();\n      },\n      init() {\n        this.setData(this.value, true);\n        this.accessToken = {\n          accessToken: this.getStore(\"accessToken\")\n        };\n      },\n      handleView(v, i) {\n        let image = new Image();\n        image.src = v;\n        let viewer = new Viewer(image, {\n          hidden: function () {\n            viewer.destroy();\n          }\n        });\n        viewer.show();\n      },\n      handleRemove(file) {\n        const uploadList = this.uploadList;\n        this.uploadList.splice(uploadList.indexOf(file), 1);\n        this.returnValue();\n      },\n      handleSuccess(res, file) {\n        if (res.success) {\n          file.url = res.result;\n          // Single image handling\n          if (!this.multiple && this.uploadList.length > 0) {\n            // Remove the first image\n            this.uploadList.splice(0, 1);\n          }\n          this.uploadList.push(file);\n          // Return component value\n          this.returnValue();\n        } else {\n          this.$Message.error(res.message);\n        }\n      },\n      handleError(error, file, fileList) {\n        this.$Message.error(error.toString());\n      },\n      handleFormatError(file) {\n        this.$Notice.warning({\n          title: \"Unsupported file format\",\n          desc: \"The selected file '\" +\n            file.name +\n            \"' has an incorrect format. Please select an image in \" +\n            this.accept +\n            \" format.\"\n        });\n      },\n      handleMaxSize(file) {\n        this.$Notice.warning({\n          title: \"File size too large\",\n          desc: \"The selected file '\" +\n            file.name +\n            \"' is too large. It must not exceed \" +\n            this.maxSize +\n            \"MB.\"\n        });\n      },\n      handleBeforeUpload() {\n        if (this.multiple && this.uploadList.length >= this.limit) {\n          this.$Message.warning(\"You can only upload up to \" + this.limit + \" images\");\n          return false;\n        }\n        return true;\n      },\n      returnValue() {\n        if (!this.uploadList || this.uploadList.length < 1) {\n          if (!this.multiple) {\n            this.$emit(\"input\", \"\");\n            this.$emit(\"on-change\", \"\");\n          } else {\n            this.$emit(\"input\", []);\n            this.$emit(\"on-change\", []);\n          }\n          return;\n        }\n        if (!this.multiple) {\n          // Single image\n          let v = this.uploadList[0].url;\n          this.$emit(\"input\", v);\n          this.$emit(\"on-change\", v);\n        } else {\n          let v = [];\n          this.uploadList.forEach(e => {\n            v.push(e.url);\n          });\n          this.$emit(\"input\", v);\n          this.$emit(\"on-change\", v);\n        }\n      },\n      setData(v, init) {\n        if (typeof v == \"string\") {\n          // Single image\n          if (this.multiple) {\n            this.$Message.warning(\"Multiple uploads support only array data type\");\n            return;\n          }\n          if (!v) {\n            return;\n          }\n          this.uploadList = [];\n          let item = {\n            url: v,\n            status: \"finished\"\n          };\n          this.uploadList.push(item);\n          this.$emit(\"on-change\", v);\n        } else if (typeof v == \"object\") {\n          // Multiple images\n          if (!this.multiple) {\n            this.$Message.warning(\"Single upload supports only string data type\");\n            return;\n          }\n          this.uploadList = [];\n          if (v.length > this.limit) {\n            for (let i = 0; i < this.limit; i++) {\n              let item = {\n                url: v[i],\n                status: \"finished\"\n              };\n              this.uploadList.push(item);\n            }\n            this.$emit(\"on-change\", v.slice(0, this.limit));\n            if (init) {\n              this.$emit(\"input\", v.slice(0, this.limit));\n            }\n            this.$Message.warning(\"You can only upload up to \" + this.limit + \" images\");\n          } else {\n            v.forEach(e => {\n              let item = {\n                url: e,\n                status: \"finished\"\n              };\n              this.uploadList.push(item);\n            });\n            this.$emit(\"on-change\", v);\n          }\n        }\n      }\n    },\n    watch: {\n      value(val) {\n        this.setData(val);\n      }\n    },\n    mounted() {\n      this.init();\n    }\n  };\n  </script>\n  \n  <style lang=\"less\">\n  .upload-thumb {\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n  \n    .upload-list {\n      display: inline-block;\n      text-align: center;\n      border: 1px solid transparent;\n      border-radius: 4px;\n      overflow: hidden;\n      background: #fff;\n      position: relative;\n      box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);\n      margin-right: 8px;\n    }\n  \n    .upload-list img {\n      object-fit: cover;\n    }\n  \n    .upload-btn {\n      display: inline-block;\n    }\n  \n    .upload-list-cover {\n      display: none;\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      background: rgba(0, 0, 0, 0.6);\n    }\n  \n    .upload-list:hover .upload-list-cover {\n      display: block;\n    }\n  \n    .upload-list-cover i {\n      color: #fff;\n      font-size: 20px;\n      cursor: pointer;\n      margin: 0 2px;\n    }\n  \n    .list-group {\n      display: inline-block;\n    }\n  \n    .thumb-ghost {\n      opacity: 0.5;\n      background: #c8ebfb;\n    }\n  }\n  </style>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}