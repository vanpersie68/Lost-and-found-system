{"ast":null,"code":"export default {\n  name: \"edit\",\n  data() {\n    return {\n      loading: true,\n      // Form loading state\n      submitLoading: false,\n      // Form submission state\n      form: {\n        id: \"\",\n        name: \"\"\n      },\n      // Form validation rules\n      formValidate: {\n        name: [{\n          required: true,\n          message: \"Cannot be empty\",\n          trigger: \"blur\"\n        }]\n      },\n      backRoute: \"\"\n    };\n  },\n  methods: {\n    init() {\n      this.handleReset();\n      this.form.id = this.$route.query.id;\n      this.backRoute = this.$route.query.backRoute;\n      this.getData();\n    },\n    handleReset() {\n      this.$refs.form.resetFields();\n    },\n    getData() {\n      this.loading = true;\n      // this.getRequest(\"Request URL, e.g., /getById/\" + this.form.id).then(res => {\n      //   this.loading = false;\n      //   if (res.success) {\n      //     // Convert null to \"\"\n      //     let v = res.result\n      //     for (let attr in v) {\n      //       if (v[attr] == null) {\n      //         v[attr] = \"\";\n      //       }\n      //     }\n      //     let str = JSON.stringify(v);\n      //     let data = JSON.parse(str);\n      //     this.form = data;\n      //   }\n      // });\n      // Simulate successful data retrieval\n      this.loading = false;\n      if (this.form.id == \"1\") {\n        this.form.name = \"zwz\";\n      } else {\n        this.form.name = \"zwz\";\n      }\n    },\n    handleSubmit() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          // Simulate success\n          this.submitLoading = false;\n          this.$Message.success(\"Edit successful\");\n          this.closeCurrentPage();\n        }\n      });\n    },\n    // Close the current page\n    closeCurrentPage() {\n      this.$store.commit(\"removeTag\", \"edit\");\n      localStorage.pageOpenedList = JSON.stringify(this.$store.state.app.pageOpenedList);\n      this.$router.push({\n        name: this.backRoute\n      });\n    }\n  },\n  watch: {\n    // Listen for route changes and retrieve data based on id\n    $route(to, from) {\n      if (to.name == \"edit\") {\n        this.handleReset();\n        this.form.id = this.$route.query.id;\n        this.getData();\n      }\n    }\n  },\n  mounted() {\n    this.init();\n  }\n};","map":{"version":3,"names":["name","data","loading","submitLoading","form","id","formValidate","required","message","trigger","backRoute","methods","init","handleReset","$route","query","getData","$refs","resetFields","handleSubmit","validate","valid","$Message","success","closeCurrentPage","$store","commit","localStorage","pageOpenedList","JSON","stringify","state","app","$router","push","watch","to","from","mounted"],"sources":["src/views/template/edit.vue"],"sourcesContent":["<template>\n    <div>\n        <Card>\n            <p slot=\"title\">Edit</p>\n            <Form ref=\"form\" :model=\"form\" :label-width=\"90\" :rules=\"formValidate\" style=\"position:relative\">\n                <FormItem label=\"Name\" prop=\"name\">\n                    <Input v-model=\"form.name\" style=\"width: 400px\" />\n                </FormItem>\n                <Form-item class=\"br\">\n                    <Button @click=\"handleSubmit\" :loading=\"submitLoading\" type=\"primary\">Submit and Save</Button>\n                    <Button @click=\"handleReset\">Reset</Button>\n                </Form-item>\n                <Spin size=\"large\" fix v-if=\"loading\"></Spin>\n            </Form>\n        </Card>\n    </div>\n    </template>\n    \n    <script>\n    export default {\n        name: \"edit\",\n        data() {\n            return {\n                loading: true, // Form loading state\n                submitLoading: false, // Form submission state\n                form: {\n                    id: \"\",\n                    name: \"\"\n                },\n                // Form validation rules\n                formValidate: {\n                    name: [{\n                        required: true,\n                        message: \"Cannot be empty\",\n                        trigger: \"blur\"\n                    }]\n                },\n                backRoute: \"\"\n            };\n        },\n        methods: {\n            init() {\n                this.handleReset();\n                this.form.id = this.$route.query.id;\n                this.backRoute = this.$route.query.backRoute;\n                this.getData();\n            },\n            handleReset() {\n                this.$refs.form.resetFields();\n            },\n            getData() {\n                this.loading = true;\n                // this.getRequest(\"Request URL, e.g., /getById/\" + this.form.id).then(res => {\n                //   this.loading = false;\n                //   if (res.success) {\n                //     // Convert null to \"\"\n                //     let v = res.result\n                //     for (let attr in v) {\n                //       if (v[attr] == null) {\n                //         v[attr] = \"\";\n                //       }\n                //     }\n                //     let str = JSON.stringify(v);\n                //     let data = JSON.parse(str);\n                //     this.form = data;\n                //   }\n                // });\n                // Simulate successful data retrieval\n                this.loading = false;\n                if (this.form.id == \"1\") {\n                    this.form.name = \"zwz\";\n                } else {\n                    this.form.name = \"zwz\";\n                }\n            },\n            handleSubmit() {\n                this.$refs.form.validate(valid => {\n                    if (valid) {\n                        // Simulate success\n                        this.submitLoading = false;\n                        this.$Message.success(\"Edit successful\");\n                        this.closeCurrentPage();\n                    }\n                });\n            },\n            // Close the current page\n            closeCurrentPage() {\n                this.$store.commit(\"removeTag\", \"edit\");\n                localStorage.pageOpenedList = JSON.stringify(\n                    this.$store.state.app.pageOpenedList\n                );\n                this.$router.push({\n                    name: this.backRoute\n                });\n            }\n        },\n        watch: {\n            // Listen for route changes and retrieve data based on id\n            $route(to, from) {\n                if (to.name == \"edit\") {\n                    this.handleReset();\n                    this.form.id = this.$route.query.id;\n                    this.getData();\n                }\n            }\n        },\n        mounted() {\n            this.init();\n        }\n    };\n    </script>\n    "],"mappings":"AAmBA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MAAA;MACAC,aAAA;MAAA;MACAC,IAAA;QACAC,EAAA;QACAL,IAAA;MACA;MACA;MACAM,YAAA;QACAN,IAAA;UACAO,QAAA;UACAC,OAAA;UACAC,OAAA;QACA;MACA;MACAC,SAAA;IACA;EACA;EACAC,OAAA;IACAC,KAAA;MACA,KAAAC,WAAA;MACA,KAAAT,IAAA,CAAAC,EAAA,QAAAS,MAAA,CAAAC,KAAA,CAAAV,EAAA;MACA,KAAAK,SAAA,QAAAI,MAAA,CAAAC,KAAA,CAAAL,SAAA;MACA,KAAAM,OAAA;IACA;IACAH,YAAA;MACA,KAAAI,KAAA,CAAAb,IAAA,CAAAc,WAAA;IACA;IACAF,QAAA;MACA,KAAAd,OAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,KAAAA,OAAA;MACA,SAAAE,IAAA,CAAAC,EAAA;QACA,KAAAD,IAAA,CAAAJ,IAAA;MACA;QACA,KAAAI,IAAA,CAAAJ,IAAA;MACA;IACA;IACAmB,aAAA;MACA,KAAAF,KAAA,CAAAb,IAAA,CAAAgB,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA;UACA,KAAAlB,aAAA;UACA,KAAAmB,QAAA,CAAAC,OAAA;UACA,KAAAC,gBAAA;QACA;MACA;IACA;IACA;IACAA,iBAAA;MACA,KAAAC,MAAA,CAAAC,MAAA;MACAC,YAAA,CAAAC,cAAA,GAAAC,IAAA,CAAAC,SAAA,CACA,KAAAL,MAAA,CAAAM,KAAA,CAAAC,GAAA,CAAAJ,cACA;MACA,KAAAK,OAAA,CAAAC,IAAA;QACAlC,IAAA,OAAAU;MACA;IACA;EACA;EACAyB,KAAA;IACA;IACArB,OAAAsB,EAAA,EAAAC,IAAA;MACA,IAAAD,EAAA,CAAApC,IAAA;QACA,KAAAa,WAAA;QACA,KAAAT,IAAA,CAAAC,EAAA,QAAAS,MAAA,CAAAC,KAAA,CAAAV,EAAA;QACA,KAAAW,OAAA;MACA;IACA;EACA;EACAsB,QAAA;IACA,KAAA1B,IAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}