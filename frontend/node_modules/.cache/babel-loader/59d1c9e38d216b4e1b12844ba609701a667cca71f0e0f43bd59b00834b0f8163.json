{"ast":null,"code":"import { getRoleList, getAllPermissionList, addRole, editRole, deleteRole, setDefaultRole, editRolePerm } from \"./api.js\";\nimport util from \"@/libs/util.js\";\nexport default {\n  name: \"role\",\n  data() {\n    return {\n      loading: true,\n      treeLoading: true,\n      submitPermLoading: false,\n      modalType: 0,\n      roleModalVisible: false,\n      permModalVisible: false,\n      modalTitle: \"\",\n      roleForm: {\n        name: \"\",\n        description: \"\"\n      },\n      roleFormValidate: {\n        name: [{\n          required: true,\n          message: \"Role name cannot be empty\",\n          trigger: \"blur\"\n        }]\n      },\n      submitLoading: false,\n      columns: [{\n        type: \"index\",\n        width: 60,\n        align: \"center\"\n      }, {\n        title: \"Role Name\",\n        key: \"name\",\n        minWidth: 150,\n        sortable: true\n      }, {\n        title: \"Remark\",\n        key: \"description\",\n        minWidth: 260,\n        sortable: true\n      }, {\n        title: \"Creation Time\",\n        key: \"createTime\",\n        minWidth: 170,\n        sortable: true,\n        sortType: \"desc\"\n      }, {\n        title: \"Creator\",\n        key: \"createBy\",\n        minWidth: 170,\n        sortable: true,\n        sortType: \"desc\"\n      }, {\n        title: \"Update Time\",\n        key: \"updateTime\",\n        minWidth: 170,\n        sortable: true\n      }, {\n        title: \"Last Updated By\",\n        key: \"updateBy\",\n        minWidth: 170,\n        sortable: true\n      }, {\n        title: \"Action\",\n        key: \"action\",\n        align: \"center\",\n        fixed: \"right\",\n        width: 380,\n        render: (h, params) => {\n          var that = this;\n          return h(\"div\", [h(\"Button\", {\n            props: {\n              type: \"success\",\n              size: \"small\",\n              ghost: true,\n              shape: \"circle\",\n              icon: \"ios-brush\",\n              disabled: !(that.$route.meta.permTypes && that.$route.meta.permTypes.includes(\"enable\"))\n            },\n            style: {\n              marginRight: \"5px\"\n            },\n            on: {\n              click: () => {\n                this.editPerm(params.row);\n              }\n            }\n          }, \"Menu Permissions\"), h(\"Button\", {\n            props: {\n              type: params.row.defaultRole ? \"primary\" : \"info\",\n              size: \"small\",\n              ghost: true,\n              shape: \"circle\",\n              icon: \"ios-browsers\"\n            },\n            style: {\n              marginRight: \"5px\"\n            },\n            on: {\n              click: () => {\n                if (params.row.defaultRole) {\n                  this.cancelDefault(params.row);\n                } else {\n                  this.setDefault(params.row);\n                }\n              }\n            }\n          }, params.row.defaultRole ? \"Cancel Default\" : \"Set Default\"), h(\"Button\", {\n            props: {\n              type: \"warning\",\n              size: \"small\",\n              ghost: true,\n              shape: \"circle\",\n              icon: \"md-color-wand\",\n              disabled: !(that.$route.meta.permTypes && that.$route.meta.permTypes.includes(\"edit\"))\n            },\n            style: {\n              marginRight: \"5px\"\n            },\n            on: {\n              click: () => {\n                this.edit(params.row);\n              }\n            }\n          }, \"Edit\"), h(\"Button\", {\n            props: {\n              type: \"error\",\n              size: \"small\",\n              ghost: true,\n              shape: \"circle\",\n              icon: \"ios-undo\",\n              disabled: !(that.$route.meta.permTypes && that.$route.meta.permTypes.includes(\"delete\"))\n            },\n            on: {\n              click: () => {\n                this.remove(params.row);\n              }\n            }\n          }, \"Delete\")]);\n        }\n      }],\n      data: [],\n      total: 0,\n      permData: [],\n      editRolePermId: \"\",\n      searchForm: {\n        pageNumber: 1,\n        pageSize: 15,\n        sort: \"createTime\",\n        order: \"desc\"\n      }\n    };\n  },\n  methods: {\n    init() {\n      this.getRoleList();\n      this.getPermList();\n    },\n    renderContent(h, {\n      root,\n      node,\n      data\n    }) {\n      let icon = \"\";\n      if (data.level == 0) {\n        icon = \"ios-navigate\";\n      } else if (data.level == 1) {\n        icon = \"md-list-box\";\n      } else if (data.level == 2) {\n        icon = \"md-list\";\n      } else if (data.level == 3) {\n        icon = \"md-radio-button-on\";\n      } else {\n        icon = \"md-radio-button-off\";\n      }\n      return h(\"span\", {\n        style: {\n          display: \"inline-block\",\n          cursor: \"pointer\"\n        },\n        on: {\n          click: () => {\n            data.checked = !data.checked;\n          }\n        }\n      }, [h(\"span\", [h(\"Icon\", {\n        props: {\n          type: icon,\n          size: \"16\"\n        },\n        style: {\n          \"margin-right\": \"8px\",\n          \"margin-bottom\": \"3px\"\n        }\n      }), h(\"span\", data.title)])]);\n    },\n    changePage(v) {\n      this.searchForm.pageNumber = v;\n      this.getRoleList();\n    },\n    changePageSize(v) {\n      this.searchForm.pageSize = v;\n      this.getRoleList();\n    },\n    changeSort(e) {\n      this.searchForm.sort = e.key;\n      this.searchForm.order = e.order;\n      if (e.order === \"normal\") {\n        this.searchForm.order = \"\";\n      }\n      this.getRoleList();\n    },\n    getRoleList() {\n      this.loading = true;\n      getRoleList(this.searchForm).then(res => {\n        this.loading = false;\n        if (res.success) {\n          this.data = res.result.records;\n          this.total = res.result.total;\n        }\n      });\n    },\n    getPermList() {\n      this.treeLoading = true;\n      getAllPermissionList().then(res => {\n        if (res.success) {\n          this.deleteDisableNode(res.result);\n          this.permData = res.result;\n          this.treeLoading = false;\n        }\n        this.treeLoading = false;\n      });\n    },\n    deleteDisableNode(permData) {\n      let that = this;\n      permData.forEach(function (e) {\n        if (e.status == -1) {\n          e.title = \"[Disabled] \" + e.title;\n          e.disabled = true;\n        }\n        if (e.children && e.children.length > 0) {\n          that.deleteDisableNode(e.children);\n        }\n      });\n    },\n    cancelRole() {\n      this.roleModalVisible = false;\n    },\n    submitRole() {\n      this.$refs.roleForm.validate(valid => {\n        if (valid) {\n          if (this.modalType == 0) {\n            this.submitLoading = true;\n            addRole(this.roleForm).then(res => {\n              this.submitLoading = false;\n              if (res.success) {\n                this.$Message.success(\"Operation succeeded\");\n                this.getRoleList();\n                this.roleModalVisible = false;\n              }\n            });\n          } else {\n            this.submitLoading = true;\n            delete this.roleForm.permissions;\n            editRole(this.roleForm).then(res => {\n              this.submitLoading = false;\n              if (res.success) {\n                this.$Message.success(\"Operation succeeded\");\n                this.getRoleList();\n                this.roleModalVisible = false;\n              }\n            });\n          }\n        }\n      });\n    },\n    addRoleFx() {\n      this.modalType = 0;\n      this.modalTitle = \"Add Role\";\n      this.$refs.roleForm.resetFields();\n      delete this.roleForm.id;\n      this.roleModalVisible = true;\n    },\n    edit(v) {\n      this.modalType = 1;\n      this.modalTitle = \"Edit Role\";\n      this.$refs.roleForm.resetFields();\n      for (let attr in v) {\n        if (v[attr] == null) {\n          v[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(v);\n      let roleInfo = JSON.parse(str);\n      this.roleForm = roleInfo;\n      this.roleModalVisible = true;\n    },\n    remove(v) {\n      this.$Modal.confirm({\n        title: \"Confirm Deletion\",\n        content: \"Are you sure you want to delete the role \" + v.name + \"?\",\n        loading: true,\n        onOk: () => {\n          deleteRole({\n            ids: v.id\n          }).then(res => {\n            this.$Modal.remove();\n            if (res.success) {\n              this.$Message.success(\"Deleted successfully\");\n              this.getRoleList();\n            }\n          });\n        }\n      });\n    },\n    setDefault(v) {\n      this.$Modal.confirm({\n        title: \"Confirm Set Default\",\n        content: \"Are you sure you want to set \" + v.name + \" as the default role for registered users?\",\n        loading: true,\n        onOk: () => {\n          let params = {\n            id: v.id,\n            isDefault: true\n          };\n          setDefaultRole(params).then(res => {\n            this.$Modal.remove();\n            if (res.success) {\n              this.$Message.success(\"Operation succeeded\");\n              this.getRoleList();\n            }\n          });\n        }\n      });\n    },\n    cancelDefault(v) {\n      this.$Modal.confirm({\n        title: \"Confirm Cancel Default\",\n        content: \"Are you sure you want to cancel \" + v.name + \" as the default role?\",\n        loading: true,\n        onOk: () => {\n          let params = {\n            id: v.id,\n            isDefault: false\n          };\n          setDefaultRole(params).then(res => {\n            this.$Modal.remove();\n            if (res.success) {\n              this.$Message.success(\"Operation succeeded\");\n              this.getRoleList();\n            }\n          });\n        }\n      });\n    },\n    editPerm(v) {\n      this.editRolePermId = v.id;\n      this.modalTitle = v.name + \" Menu Permissions Modification\";\n      let rolePerms = v.permissions;\n      if (this.treeLoading) {\n        this.$Message.warning(\"Menu permissions data is loading. Please click to view later.\");\n        return;\n      }\n      this.checkPermTree(this.permData, rolePerms);\n      this.permModalVisible = true;\n    },\n    checkPermTree(permData, rolePerms) {\n      let that = this;\n      permData.forEach(function (p) {\n        if (that.hasPerm(p, rolePerms) && p.status != -1) {\n          p.checked = true;\n        } else {\n          p.checked = false;\n        }\n        if (p.children && p.children.length > 0) {\n          that.checkPermTree(p.children, rolePerms);\n        }\n      });\n    },\n    hasPerm(p, rolePerms) {\n      let flag = false;\n      for (let i = 0; i < rolePerms.length; i++) {\n        if (p.id == rolePerms[i].permissionId) {\n          flag = true;\n          break;\n        }\n      }\n      if (flag) {\n        return true;\n      }\n      return false;\n    },\n    selectedTreeAll(permData, select) {\n      let that = this;\n      permData.forEach(function (e) {\n        e.checked = select;\n        if (e.children && e.children.length > 0) {\n          that.selectedTreeAll(e.children, select);\n        }\n      });\n    },\n    submitPermEdit() {\n      this.submitPermLoading = true;\n      let permIds = \"\";\n      let selectedNodes = this.$refs.tree.getCheckedNodes();\n      selectedNodes.forEach(function (e) {\n        permIds += e.id + \",\";\n      });\n      permIds = permIds.substring(0, permIds.length - 1);\n      editRolePerm({\n        roleId: this.editRolePermId,\n        permIds: permIds\n      }).then(res => {\n        this.submitPermLoading = false;\n        if (res.success) {\n          this.$Message.success(\"Operation succeeded\");\n          this.$store.commit(\"setAdded\", false);\n          util.initRouter(this);\n          this.getRoleList();\n          this.permModalVisible = false;\n        }\n      });\n    },\n    cancelPermEdit() {\n      this.permModalVisible = false;\n    }\n  },\n  mounted() {\n    this.init();\n  }\n};","map":{"version":3,"names":["getRoleList","getAllPermissionList","addRole","editRole","deleteRole","setDefaultRole","editRolePerm","util","name","data","loading","treeLoading","submitPermLoading","modalType","roleModalVisible","permModalVisible","modalTitle","roleForm","description","roleFormValidate","required","message","trigger","submitLoading","columns","type","width","align","title","key","minWidth","sortable","sortType","fixed","render","h","params","that","props","size","ghost","shape","icon","disabled","$route","meta","permTypes","includes","style","marginRight","on","click","editPerm","row","defaultRole","cancelDefault","setDefault","edit","remove","total","permData","editRolePermId","searchForm","pageNumber","pageSize","sort","order","methods","init","getPermList","renderContent","root","node","level","display","cursor","checked","changePage","v","changePageSize","changeSort","e","then","res","success","result","records","deleteDisableNode","forEach","status","children","length","cancelRole","submitRole","$refs","validate","valid","$Message","permissions","addRoleFx","resetFields","id","attr","str","JSON","stringify","roleInfo","parse","$Modal","confirm","content","onOk","ids","isDefault","rolePerms","warning","checkPermTree","p","hasPerm","flag","i","permissionId","selectedTreeAll","select","submitPermEdit","permIds","selectedNodes","tree","getCheckedNodes","substring","roleId","$store","commit","initRouter","cancelPermEdit","mounted"],"sources":["src/views/role/role/index.vue"],"sourcesContent":["<template>\n    <div class=\"search\">\n      <Card>\n        <Row :gutter=\"16\">\n          <Form ref=\"searchForm\" :model=\"searchForm\" inline :label-width=\"0\">\n            <Form-item label=\"\">\n              <Input type=\"text\" v-model=\"searchForm.name\" placeholder=\"Role Name\" clearable style=\"width: 200px\" />\n            </Form-item>\n            <Form-item label=\"\">\n              <Input type=\"text\" v-model=\"searchForm.description\" placeholder=\"Role Description\" clearable style=\"width: 200px\" />\n            </Form-item>\n            <Form-item label=\"\">\n              <Button type=\"success\" @click=\"init\" ghost shape=\"circle\" size=\"small\" icon=\"md-refresh\">Search</Button>\n              <Divider type=\"vertical\" />\n              <Button @click=\"addRoleFx\" type=\"primary\" ghost shape=\"circle\" size=\"small\" icon=\"md-add\" :disabled=\"!$route.meta.permTypes.includes('delete')\">Add Role</Button>\n            </Form-item>\n          </Form>\n        </Row>\n        <Divider dashed />\n        <Row :gutter=\"16\">\n          <Table :loading=\"loading\" border stripe size=\"small\" :columns=\"columns\" :data=\"data\" ref=\"table\" sortable=\"custom\" @on-sort-change=\"changeSort\"></Table>\n        </Row>\n        <Row type=\"flex\" justify=\"end\" class=\"page\">\n          <Page :current=\"searchForm.pageNumber\" :total=\"total\" :page-size=\"searchForm.pageSize\" @on-change=\"changePage\" @on-page-size-change=\"changePageSize\" :page-size-opts=\"[15,20,50]\" size=\"small\" show-total show-elevator show-sizer></Page>\n        </Row>\n      </Card>\n  \n      <!-- Edit -->\n      <Modal :title=\"modalTitle\" v-model=\"roleModalVisible\" :mask=\"false\" draggable ok-text=\"Save Role Data\" @on-ok=\"submitRole\" @on-cancel=\"cancelRole\">\n        <Form ref=\"roleForm\" :model=\"roleForm\" :label-width=\"80\" :rules=\"roleFormValidate\">\n          <Row :gutter=\"16\">\n            <Col span=\"24\">\n              <FormItem label=\"Role Name\" prop=\"name\">\n                <Input v-model=\"roleForm.name\" placeholder=\"Role name, recommended to start with ROLE_\" />\n              </FormItem>\n              <FormItem label=\"Remark\" prop=\"description\">\n                <Input v-model=\"roleForm.description\" />\n              </FormItem>\n            </Col>\n          </Row>\n        </Form>\n      </Modal>\n      <!-- Menu Permissions -->\n      <Modal :title=\"modalTitle\" v-model=\"permModalVisible\" :mask=\"false\" draggable ok-text=\"Save Menu Permissions\" @on-ok=\"submitPermEdit\" @on-cancel=\"cancelPermEdit\">\n        <Row :gutter=\"16\">\n          <Col span=\"24\" style=\"max-height:500px;overflow-y: scroll;\">\n            <Tree ref=\"tree\" :data=\"permData\" show-checkbox :render=\"renderContent\" :check-strictly=\"true\"></Tree>\n            <Spin size=\"large\" fix v-if=\"treeLoading\"></Spin>\n          </Col>\n        </Row>\n      </Modal>\n    </div>\n  </template>\n  \n  <script>\n  import {\n    getRoleList,\n    getAllPermissionList,\n    addRole,\n    editRole,\n    deleteRole,\n    setDefaultRole,\n    editRolePerm\n  } from \"./api.js\";\n  import util from \"@/libs/util.js\";\n  export default {\n    name: \"role\",\n    data() {\n      return {\n        loading: true,\n        treeLoading: true,\n        submitPermLoading: false,\n        modalType: 0,\n        roleModalVisible: false,\n        permModalVisible: false,\n        modalTitle: \"\",\n        roleForm: {\n          name: \"\",\n          description: \"\"\n        },\n        roleFormValidate: {\n          name: [{\n            required: true,\n            message: \"Role name cannot be empty\",\n            trigger: \"blur\"\n          }]\n        },\n        submitLoading: false,\n        columns: [{\n            type: \"index\",\n            width: 60,\n            align: \"center\"\n          },\n          {\n            title: \"Role Name\",\n            key: \"name\",\n            minWidth: 150,\n            sortable: true\n          },\n          {\n            title: \"Remark\",\n            key: \"description\",\n            minWidth: 260,\n            sortable: true\n          },\n          {\n            title: \"Creation Time\",\n            key: \"createTime\",\n            minWidth: 170,\n            sortable: true,\n            sortType: \"desc\"\n          },\n          {\n            title: \"Creator\",\n            key: \"createBy\",\n            minWidth: 170,\n            sortable: true,\n            sortType: \"desc\"\n          },\n          {\n            title: \"Update Time\",\n            key: \"updateTime\",\n            minWidth: 170,\n            sortable: true\n          },\n          {\n            title: \"Last Updated By\",\n            key: \"updateBy\",\n            minWidth: 170,\n            sortable: true\n          },\n          {\n            title: \"Action\",\n            key: \"action\",\n            align: \"center\",\n            fixed: \"right\",\n            width: 380,\n            render: (h, params) => {\n              var that = this;\n              return h(\"div\", [\n                h(\n                  \"Button\", {\n                    props: {\n                      type: \"success\",\n                      size: \"small\",\n                      ghost: true,\n                      shape: \"circle\",\n                      icon: \"ios-brush\",\n                      disabled: !(that.$route.meta.permTypes && that.$route.meta.permTypes.includes(\"enable\"))\n                    },\n                    style: {\n                      marginRight: \"5px\"\n                    },\n                    on: {\n                      click: () => {\n                        this.editPerm(params.row);\n                      }\n                    }\n                  },\n                  \"Menu Permissions\"\n                ),\n                h(\n                  \"Button\", {\n                    props: {\n                      type: params.row.defaultRole ? \"primary\" : \"info\",\n                      size: \"small\",\n                      ghost: true,\n                      shape: \"circle\",\n                      icon: \"ios-browsers\"\n                    },\n                    style: {\n                      marginRight: \"5px\"\n                    },\n                    on: {\n                      click: () => {\n                        if (params.row.defaultRole) {\n                          this.cancelDefault(params.row);\n                        } else {\n                          this.setDefault(params.row);\n                        }\n                      }\n                    }\n                  },\n                  params.row.defaultRole ? \"Cancel Default\" : \"Set Default\"\n                ),\n                h(\n                  \"Button\", {\n                    props: {\n                      type: \"warning\",\n                      size: \"small\",\n                      ghost: true,\n                      shape: \"circle\",\n                      icon: \"md-color-wand\",\n                      disabled: !(that.$route.meta.permTypes && that.$route.meta.permTypes.includes(\"edit\"))\n                    },\n                    style: {\n                      marginRight: \"5px\"\n                    },\n                    on: {\n                      click: () => {\n                        this.edit(params.row);\n                      }\n                    }\n                  },\n                  \"Edit\"\n                ),\n                h(\n                  \"Button\", {\n                    props: {\n                      type: \"error\",\n                      size: \"small\",\n                      ghost: true,\n                      shape: \"circle\",\n                      icon: \"ios-undo\",\n                      disabled: !(that.$route.meta.permTypes && that.$route.meta.permTypes.includes(\"delete\"))\n                    },\n                    on: {\n                      click: () => {\n                        this.remove(params.row);\n                      }\n                    }\n                  },\n                  \"Delete\"\n                )\n              ]);\n            }\n          }\n        ],\n        data: [],\n        total: 0,\n        permData: [],\n        editRolePermId: \"\",\n        searchForm: {\n          pageNumber: 1,\n          pageSize: 15,\n          sort: \"createTime\",\n          order: \"desc\",\n        },\n      };\n    },\n    methods: {\n      init() {\n        this.getRoleList();\n        this.getPermList();\n      },\n      renderContent(h, {\n        root,\n        node,\n        data\n      }) {\n        let icon = \"\";\n        if (data.level == 0) {\n          icon = \"ios-navigate\";\n        } else if (data.level == 1) {\n          icon = \"md-list-box\";\n        } else if (data.level == 2) {\n          icon = \"md-list\";\n        } else if (data.level == 3) {\n          icon = \"md-radio-button-on\";\n        } else {\n          icon = \"md-radio-button-off\";\n        }\n        return h(\n          \"span\", {\n            style: {\n              display: \"inline-block\",\n              cursor: \"pointer\"\n            },\n            on: {\n              click: () => {\n                data.checked = !data.checked;\n              }\n            }\n          },\n          [\n            h(\"span\", [\n              h(\"Icon\", {\n                props: {\n                  type: icon,\n                  size: \"16\"\n                },\n                style: {\n                  \"margin-right\": \"8px\",\n                  \"margin-bottom\": \"3px\"\n                }\n              }),\n              h(\"span\", data.title)\n            ])\n          ]\n        );\n      },\n      changePage(v) {\n        this.searchForm.pageNumber = v;\n        this.getRoleList();\n      },\n      changePageSize(v) {\n        this.searchForm.pageSize = v;\n        this.getRoleList();\n      },\n      changeSort(e) {\n        this.searchForm.sort = e.key;\n        this.searchForm.order = e.order;\n        if (e.order === \"normal\") {\n          this.searchForm.order = \"\";\n        }\n        this.getRoleList();\n      },\n      getRoleList() {\n        this.loading = true;\n        getRoleList(this.searchForm).then(res => {\n          this.loading = false;\n          if (res.success) {\n            this.data = res.result.records;\n            this.total = res.result.total;\n          }\n        });\n      },\n      getPermList() {\n        this.treeLoading = true;\n        getAllPermissionList().then(res => {\n          if (res.success) {\n            this.deleteDisableNode(res.result);\n            this.permData = res.result;\n            this.treeLoading = false;\n          }\n          this.treeLoading = false;\n        });\n      },\n      deleteDisableNode(permData) {\n        let that = this;\n        permData.forEach(function (e) {\n          if (e.status == -1) {\n            e.title = \"[Disabled] \" + e.title;\n            e.disabled = true;\n          }\n          if (e.children && e.children.length > 0) {\n            that.deleteDisableNode(e.children);\n          }\n        });\n      },\n      cancelRole() {\n        this.roleModalVisible = false;\n      },\n      submitRole() {\n        this.$refs.roleForm.validate(valid => {\n          if (valid) {\n            if (this.modalType == 0) {\n              this.submitLoading = true;\n              addRole(this.roleForm).then(res => {\n                this.submitLoading = false;\n                if (res.success) {\n                  this.$Message.success(\"Operation succeeded\");\n                  this.getRoleList();\n                  this.roleModalVisible = false;\n                }\n              });\n            } else {\n              this.submitLoading = true;\n              delete this.roleForm.permissions;\n              editRole(this.roleForm).then(res => {\n                this.submitLoading = false;\n                if (res.success) {\n                  this.$Message.success(\"Operation succeeded\");\n                  this.getRoleList();\n                  this.roleModalVisible = false;\n                }\n              });\n            }\n          }\n        });\n      },\n      addRoleFx() {\n        this.modalType = 0;\n        this.modalTitle = \"Add Role\";\n        this.$refs.roleForm.resetFields();\n        delete this.roleForm.id;\n        this.roleModalVisible = true;\n      },\n      edit(v) {\n        this.modalType = 1;\n        this.modalTitle = \"Edit Role\";\n        this.$refs.roleForm.resetFields();\n        for (let attr in v) {\n          if (v[attr] == null) {\n            v[attr] = \"\";\n          }\n        }\n        let str = JSON.stringify(v);\n        let roleInfo = JSON.parse(str);\n        this.roleForm = roleInfo;\n        this.roleModalVisible = true;\n      },\n      remove(v) {\n        this.$Modal.confirm({\n          title: \"Confirm Deletion\",\n          content: \"Are you sure you want to delete the role \" + v.name + \"?\",\n          loading: true,\n          onOk: () => {\n            deleteRole({\n              ids: v.id\n            }).then(res => {\n              this.$Modal.remove();\n              if (res.success) {\n                this.$Message.success(\"Deleted successfully\");\n                this.getRoleList();\n              }\n            });\n          }\n        });\n      },\n      setDefault(v) {\n        this.$Modal.confirm({\n          title: \"Confirm Set Default\",\n          content: \"Are you sure you want to set \" + v.name + \" as the default role for registered users?\",\n          loading: true,\n          onOk: () => {\n            let params = {\n              id: v.id,\n              isDefault: true\n            };\n            setDefaultRole(params).then(res => {\n              this.$Modal.remove();\n              if (res.success) {\n                this.$Message.success(\"Operation succeeded\");\n                this.getRoleList();\n              }\n            });\n          }\n        });\n      },\n      cancelDefault(v) {\n        this.$Modal.confirm({\n          title: \"Confirm Cancel Default\",\n          content: \"Are you sure you want to cancel \" + v.name + \" as the default role?\",\n          loading: true,\n          onOk: () => {\n            let params = {\n              id: v.id,\n              isDefault: false\n            };\n            setDefaultRole(params).then(res => {\n              this.$Modal.remove();\n              if (res.success) {\n                this.$Message.success(\"Operation succeeded\");\n                this.getRoleList();\n              }\n            });\n          }\n        });\n      },\n      editPerm(v) {\n        this.editRolePermId = v.id;\n        this.modalTitle = v.name + \" Menu Permissions Modification\";\n        let rolePerms = v.permissions;\n        if (this.treeLoading) {\n          this.$Message.warning(\"Menu permissions data is loading. Please click to view later.\");\n          return;\n        }\n        this.checkPermTree(this.permData, rolePerms);\n        this.permModalVisible = true;\n      },\n      checkPermTree(permData, rolePerms) {\n        let that = this;\n        permData.forEach(function (p) {\n          if (that.hasPerm(p, rolePerms) && p.status != -1) {\n            p.checked = true;\n          } else {\n            p.checked = false;\n          }\n          if (p.children && p.children.length > 0) {\n            that.checkPermTree(p.children, rolePerms);\n          }\n        });\n      },\n      hasPerm(p, rolePerms) {\n        let flag = false;\n        for (let i = 0; i < rolePerms.length; i++) {\n          if (p.id == rolePerms[i].permissionId) {\n            flag = true;\n            break;\n          }\n        }\n        if (flag) {\n          return true;\n        }\n        return false;\n      },\n      selectedTreeAll(permData, select) {\n        let that = this;\n        permData.forEach(function (e) {\n          e.checked = select;\n          if (e.children && e.children.length > 0) {\n            that.selectedTreeAll(e.children, select);\n          }\n        });\n      },\n      submitPermEdit() {\n        this.submitPermLoading = true;\n        let permIds = \"\";\n        let selectedNodes = this.$refs.tree.getCheckedNodes();\n        selectedNodes.forEach(function (e) {\n          permIds += e.id + \",\";\n        });\n        permIds = permIds.substring(0, permIds.length - 1);\n        editRolePerm({\n          roleId: this.editRolePermId,\n          permIds: permIds\n        }).then(res => {\n          this.submitPermLoading = false;\n          if (res.success) {\n            this.$Message.success(\"Operation succeeded\");\n            this.$store.commit(\"setAdded\", false);\n            util.initRouter(this);\n            this.getRoleList();\n            this.permModalVisible = false;\n          }\n        });\n      },\n      cancelPermEdit() {\n        this.permModalVisible = false;\n      }\n    },\n    mounted() {\n      this.init();\n    }\n  };\n  </script>\n  \n  <style lang=\"less\">\n  @import \"../../../styles/table-common.less\";\n  \n  .permModal {\n    .ivu-modal-body {\n      max-height: 560px;\n      overflow: auto;\n    }\n  }\n  \n  .depModal {\n    .ivu-modal-body {\n      max-height: 500px;\n      overflow: auto;\n    }\n  }\n  </style>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}