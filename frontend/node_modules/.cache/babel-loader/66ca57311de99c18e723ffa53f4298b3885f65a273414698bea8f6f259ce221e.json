{"ast":null,"code":"import { generateTable, getEntityData } from \"./api.js\";\nexport default {\n  name: \"vue-code\",\n  data() {\n    return {\n      tabName: \"index.vue\",\n      // 控制是否显示读取后端字段窗口\n      findBackFieldModal: false,\n      // 后端字段读取结果\n      findBackFieldContent: \"\",\n      // 后端实体类完整路径\n      entityForm: {\n        path: \"\"\n      },\n      // 生成代码加载标识\n      createCodeLoading: false,\n      // 生成的代码\n      createCodeContent: \"\",\n      // 接口前缀\n      apiPreStr: \"\",\n      // 生成对应位置窗口是否显示\n      codeModal: false,\n      form: {\n        sortOrder: 0,\n        field: \"\",\n        name: \"\",\n        level: \"2\",\n        tableShow: true,\n        editable: true,\n        type: \"text\",\n        searchType: \"text\",\n        searchLevel: \"2\",\n        validate: true,\n        searchable: false,\n        sortable: false,\n        defaultSort: false,\n        defaultSortType: \"desc\"\n      },\n      // 代码生成器表单规则\n      formValidate: {\n        field: [{\n          required: true,\n          message: \"不能为空\",\n          trigger: \"blur\"\n        }],\n        name: [{\n          required: true,\n          message: \"不能为空\",\n          trigger: \"blur\"\n        }]\n      },\n      // 读取后端字段表单规则\n      entityFormValidate: {\n        path: [{\n          required: true,\n          message: \"不能为空\",\n          trigger: \"blur\"\n        }]\n      },\n      // 代码生成器表格列\n      columns: [{\n        title: \"编号\",\n        key: \"sortOrder\",\n        sortType: \"asc\",\n        sortable: true,\n        align: \"center\",\n        minWidth: 90\n      }, {\n        title: \"后端字段名\",\n        slot: \"field\",\n        minWidth: 150\n      }, {\n        title: \"备注\",\n        slot: \"name\",\n        minWidth: 150\n      }, {\n        title: \"表格显示\",\n        slot: \"tableShow\",\n        minWidth: 110\n      }, {\n        title: \"可添加编辑\",\n        slot: \"editable\",\n        minWidth: 110\n      }, {\n        title: \"输入组件\",\n        slot: \"type\",\n        minWidth: 200\n      }, {\n        title: \"非空\",\n        slot: \"validate\",\n        minWidth: 125\n      }, {\n        title: \"搜索\",\n        slot: \"searchable\",\n        minWidth: 100\n      }, {\n        title: \"搜索组件\",\n        slot: \"searchType\",\n        minWidth: 160\n      }, {\n        title: \"排序\",\n        slot: \"sortable\",\n        minWidth: 80\n      }, {\n        title: \"默认排序\",\n        slot: \"defaultSort\",\n        minWidth: 100\n      }, {\n        title: \"默认排序方式\",\n        slot: \"defaultSortType\",\n        minWidth: 150\n      }, {\n        title: \"操作\",\n        slot: \"action\",\n        align: \"center\",\n        fixed: \"right\",\n        width: 90\n      }],\n      // 代码生成器表格值\n      data: [],\n      defaultSort: false,\n      daterangeSearch: false,\n      result: {}\n    };\n  },\n  methods: {\n    init() {\n      let data = this.getStore(\"tableData\");\n      let apiPreStr = this.getStore(\"createCodeApiPre\");\n      let defaultSort = this.getStore(\"tableDefaultSort\");\n      let daterangeSearch = this.getStore(\"tableDaterangeSearch\");\n      if (data && data != \"undefined\") {\n        this.data = JSON.parse(data);\n      }\n      if (apiPreStr && apiPreStr != \"undefined\") {\n        this.apiPreStr = apiPreStr;\n      }\n      if (defaultSort && defaultSort != \"undefined\") {\n        if (defaultSort == \"true\") {\n          this.defaultSort = true;\n        } else {\n          this.defaultSort = false;\n        }\n      }\n      if (daterangeSearch && daterangeSearch != \"undefined\") {\n        if (daterangeSearch == \"true\") {\n          this.daterangeSearch = true;\n        } else {\n          this.daterangeSearch = false;\n        }\n      }\n    },\n    // 读取字段\n    generateEntityData() {\n      this.$refs.entityForm.validate(valid => {\n        if (valid) {\n          getEntityData(this.entityForm.path).then(res => {\n            if (res.success) {\n              this.findBackFieldContent = res.result;\n            }\n          });\n        }\n      });\n    },\n    // 将读取到的后端字段导入到表格\n    submitEntityData() {\n      if (!this.findBackFieldContent) {\n        this.$Message.warning(\"后端实体类没有读到，请重试\");\n        return;\n      }\n      try {\n        let data = JSON.parse(this.findBackFieldContent);\n        this.data = data.data;\n        this.findBackFieldModal = false;\n      } catch (e) {\n        this.$Message.error(\"后端实体类解析异常: \" + e);\n      }\n    },\n    changeField(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.field = v.target.value;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeName(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.name = v.target.value;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeTableShow(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.tableShow = v;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeType(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.type = v;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeEditable(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.editable = v;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeValidate(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.validate = v;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeSearchable(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.searchable = v;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeSearchType(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.searchType = v;\n      this.data.splice(row._index, 1, data);\n      if (this.daterangeSearch && v != \"daterange\") {\n        this.daterangeSearch = false;\n      } else if (v == \"daterange\") {\n        this.daterangeSearch = true;\n      }\n      this.save();\n    },\n    changeSortable(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.sortable = v;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeDefaultSort(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      // 判断默认排序\n      if (this.defaultSort && v) {\n        this.$Message.warning(\"已设定了默认排序的字段，请勿设置多个\");\n        // 恢复禁用\n        data.defaultSort = false;\n      } else if (!this.defaultSort && v) {\n        // 没有记录过\n        data.defaultSort = true;\n        this.defaultSort = true;\n      } else if (this.defaultSort && !v) {\n        // 取消唯一的\n        data.defaultSort = false;\n        this.defaultSort = false;\n      }\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    changeDefaultSortType(row, v) {\n      for (let attr in row) {\n        if (row[attr] == null) {\n          row[attr] = \"\";\n        }\n      }\n      let str = JSON.stringify(row);\n      let data = JSON.parse(str);\n      data.defaultSortType = v;\n      this.data.splice(row._index, 1, data);\n      this.save();\n    },\n    remove(v) {\n      this.data.splice(v._index, 1);\n      this.save();\n      this.$Message.success(\"删除成功\");\n    },\n    clear() {\n      this.$Modal.confirm({\n        title: \"确认清空\",\n        content: \"您确认要清空 ?\",\n        onOk: () => {\n          this.data = [];\n          this.apiPreStr = \"\";\n          this.defaultSort = false;\n          this.daterangeSearch = false;\n          this.save();\n          this.$Message.success(\"清空成功\");\n        }\n      });\n    },\n    generate() {\n      if (!this.apiPreStr) {\n        this.$Message.warning(\"接口前缀不能为空\");\n        return;\n      }\n      this.createCodeLoading = true;\n      generateTable(this.apiPreStr, \"1\", this.data).then(res => {\n        this.createCodeLoading = false;\n        if (res.success) {\n          this.result = res.result;\n          this.changeCode();\n          this.codeModal = true;\n          this.save();\n        }\n      });\n    },\n    changeCode() {\n      if (this.tabName == \"index.vue\") {\n        this.createCodeContent = this.result.componentApi;\n      }\n      if (this.tabName == \"add.vue\") {\n        this.createCodeContent = this.result.addApi;\n      }\n      if (this.tabName == \"edit.vue\") {\n        this.createCodeContent = this.result.editApi;\n      }\n      if (this.tabName == \"api.js\") {\n        this.createCodeContent = this.result.api;\n      }\n    },\n    onCopy() {\n      this.$Message.success(\"复制成功\");\n    },\n    save() {\n      this.setStore(\"tableData\", JSON.stringify(this.data));\n      this.setStore(\"createCodeApiPre\", this.apiPreStr);\n      this.setStore(\"tableDefaultSort\", this.defaultSort);\n      this.setStore(\"tableDaterangeSearch\", this.daterangeSearch);\n    }\n  },\n  mounted() {\n    this.init();\n  }\n};","map":{"version":3,"names":["generateTable","getEntityData","name","data","tabName","findBackFieldModal","findBackFieldContent","entityForm","path","createCodeLoading","createCodeContent","apiPreStr","codeModal","form","sortOrder","field","level","tableShow","editable","type","searchType","searchLevel","validate","searchable","sortable","defaultSort","defaultSortType","formValidate","required","message","trigger","entityFormValidate","columns","title","key","sortType","align","minWidth","slot","fixed","width","daterangeSearch","result","methods","init","getStore","JSON","parse","generateEntityData","$refs","valid","then","res","success","submitEntityData","$Message","warning","e","error","changeField","row","v","attr","str","stringify","target","value","splice","_index","save","changeName","changeTableShow","changeType","changeEditable","changeValidate","changeSearchable","changeSearchType","changeSortable","changeDefaultSort","changeDefaultSortType","remove","clear","$Modal","confirm","content","onOk","generate","changeCode","componentApi","addApi","editApi","api","onCopy","setStore","mounted"],"sources":["src/views/code/vue/index.vue"],"sourcesContent":["<template>\n<div class=\"search\">\n    <Card>\n        <Form ref=\"searchForm\" :model=\"searchForm\" inline :label-width=\"100\">\n            <Row class=\"operation\">\n                <Form-item label=\"API接口前缀\">\n                    <Input type=\"text\" v-model=\"apiPreStr\" clearable placeholder=\"如 test\" style=\"width: 300px\" />\n                </Form-item>\n                <Button @click=\"findBackFieldModal = true\" type=\"warning\" size=\"small\" ghost shape=\"circle\" icon=\"ios-construct\">load</Button>\n                <Button @click=\"generate\" :loading=\"createCodeLoading\" size=\"small\" ghost shape=\"circle\" type=\"success\" icon=\"md-send\">generate</Button>\n                <Button @click=\"clear\" size=\"small\" type=\"error\" ghost shape=\"circle\" icon=\"md-trash\">清空</Button>\n            </Row>\n        </Form>\n        <Row>\n            <Col span=\"24\">\n            <Table border stripe size=\"large\" :columns=\"columns\" :data=\"data\" ref=\"table\">\n                <template slot-scope=\"{ row }\" slot=\"field\">\n                    <Input v-model=\"row.field\" @on-blur=\"changeField(row, $event)\" />\n                </template>\n                <template slot-scope=\"{ row }\" slot=\"name\">\n                    <Input v-model=\"row.name\" @on-blur=\"changeName(row, $event)\" />\n                </template>\n                <template slot-scope=\"{ row }\" slot=\"tableShow\">\n                    <i-switch v-model=\"row.tableShow\" @on-change=\"changeTableShow(row, $event)\">\n                        <span slot=\"open\">open</span>\n                        <span slot=\"close\">close</span>\n                    </i-switch>\n                </template>\n                <template slot-scope=\"{ row }\" slot=\"editable\">\n                    <i-switch v-model=\"row.editable\" @on-change=\"changeEditable(row, $event)\">\n                        <span slot=\"open\">open</span>\n                        <span slot=\"close\">close</span>\n                    </i-switch>\n                </template>\n                <template slot-scope=\"{ row }\" slot=\"type\">\n                    <Select v-model=\"row.type\" :disabled=\"!row.editable\" @on-change=\"changeType(row, $event)\" transfer>\n                        <Option value=\"text\">text</Option>\n                        <Option value=\"select\">select</Option>\n                        <Option value=\"number\">number</Option>\n                        <Option value=\"date\">date</Option>\n                        <Option value=\"daterange\">daterange</Option>\n                        <Option value=\"upload\">upload</Option>\n                        <Option value=\"uploadThumb\">uploadThumb</Option>\n                        <Option value=\"switch\">switch</Option>\n                        <Option value=\"radio\">radio</Option>\n                        <Option value=\"time\">time</Option>\n                        <Option value=\"area\">area</Option>\n                    </Select>\n                </template>\n                <template slot-scope=\"{ row }\" slot=\"validate\">\n                    <i-switch v-model=\"row.validate\" @on-change=\"changeValidate(row, $event)\" :disabled=\"!row.editable\">\n                        <span slot=\"open\">open</span>\n                        <span slot=\"close\">close</span>\n                    </i-switch>\n                </template>\n                <template slot-scope=\"{ row }\" slot=\"searchable\">\n                    <i-switch v-model=\"row.searchable\" @on-change=\"changeSearchable(row, $event)\">\n                        <span slot=\"open\">open</span>\n                        <span slot=\"close\">close</span>\n                    </i-switch>\n                </template>\n                <template slot-scope=\"{ row }\" slot=\"searchType\">\n                    <Select v-model=\"row.searchType\" @on-change=\"changeSearchType(row, $event)\" :disabled=\"!row.searchable\" transfer>\n                        <Option value=\"text\">text</Option>\n                        <Option value=\"select\">select</Option>\n                        <Option value=\"daterange\" :disabled=\"daterangeSearch\">daterange</Option>\n                        <Option value=\"date\">date</Option>\n                        <Option value=\"area\">area</Option>\n                    </Select>\n                </template>\n                <template slot-scope=\"{ row }\" slot=\"sortable\">\n                    <i-switch v-model=\"row.sortable\" @on-change=\"changeSortable(row, $event)\">\n                        <span slot=\"open\">open</span>\n                        <span slot=\"close\">close</span>\n                    </i-switch>\n                </template>\n                <template slot-scope=\"{ row }\" slot=\"defaultSort\">\n                    <i-switch v-model=\"row.defaultSort\" @on-change=\"changeDefaultSort(row, $event)\" :disabled=\"(!row.sortable||defaultSort)&&!row.defaultSort||!row.sortable\">\n                        <span slot=\"open\">open</span>\n                        <span slot=\"close\">close</span>\n                    </i-switch>\n                </template>\n                <template slot-scope=\"{ row }\" slot=\"defaultSortType\">\n                    <Select v-model=\"row.defaultSortType\" @on-change=\"changeDefaultSortType(row, $event)\" :disabled=\"!row.defaultSort||!row.sortable\" transfer>\n                        <Option value=\"desc\">reverse order</Option>\n                        <Option value=\"asc\">order</Option>\n                    </Select>\n                </template>\n                <template slot-scope=\"{ row }\" slot=\"action\">\n                    <Button type=\"error\" ghost size=\"small\" @click=\"remove(row)\">删除</Button>\n                </template>\n            </Table>\n            </Col>\n        </Row>\n    </Card>\n\n    <!-- 读取后端字段窗口 -->\n    <Modal title=\"读取后端字段\" v-model=\"findBackFieldModal\" :width=\"800\" @on-ok=\"submitEntityData\">\n        <Form ref=\"entityForm\" :model=\"entityForm\" :label-width=\"130\" :rules=\"entityFormValidate\">\n            <FormItem label=\"实体类引用路径\" prop=\"path\">\n                <Row type=\"flex\" justify=\"space-between\">\n                    <Input v-model=\"entityForm.path\" placeholder=\"例如：cn.zwz.modules.base.entity.User\" clearable style=\"width:410px\" />\n                    <Button type=\"warning\" icon=\"md-play\" @click=\"generateEntityData\">读取字段</Button>\n                </Row>\n            </FormItem>\n        </Form>\n        <Input v-model=\"findBackFieldContent\" type=\"textarea\" autosize style=\"max-height:50vh;overflow:auto;\" placeholder=\"生成结果\" />\n    </Modal>\n\n    <!-- 生成对应位置 -->\n    <Modal title=\"生成代码\" v-model=\"codeModal\" :width=\"1000\" styles=\"top:30px\">\n        <Tabs v-model=\"tabName\" type=\"card\" @on-click=\"changeCode\">\n            <TabPane name=\"index.vue\" label=\"index.vue\"></TabPane>\n            <TabPane name=\"add.vue\" label=\"add.vue\"></TabPane>\n            <TabPane name=\"edit.vue\" label=\"edit.vue\"></TabPane>\n            <TabPane name=\"api.js\" label=\"api.js\"></TabPane>\n        </Tabs>\n        <Input v-model=\"createCodeContent\" type=\"textarea\" autosize style=\"max-height:60vh;overflow:auto;\" />\n        <div slot=\"footer\">\n            <Button v-clipboard:copy=\"createCodeContent\" v-clipboard:success=\"onCopy\" type=\"primary\" icon=\"md-copy\">复制代码</Button>\n        </div>\n    </Modal>\n</div>\n</template>\n\n<script>\nimport {\n    generateTable,\n    getEntityData\n} from \"./api.js\";\nexport default {\n    name: \"vue-code\",\n    data() {\n        return {\n            tabName: \"index.vue\",\n            // 控制是否显示读取后端字段窗口\n            findBackFieldModal: false,\n            // 后端字段读取结果\n            findBackFieldContent: \"\",\n            // 后端实体类完整路径\n            entityForm: {\n                path: \"\"\n            },\n            // 生成代码加载标识\n            createCodeLoading: false,\n            // 生成的代码\n            createCodeContent: \"\",\n            // 接口前缀\n            apiPreStr: \"\",\n            // 生成对应位置窗口是否显示\n            codeModal: false,\n            form: {\n                sortOrder: 0,\n                field: \"\",\n                name: \"\",\n                level: \"2\",\n                tableShow: true,\n                editable: true,\n                type: \"text\",\n                searchType: \"text\",\n                searchLevel: \"2\",\n                validate: true,\n                searchable: false,\n                sortable: false,\n                defaultSort: false,\n                defaultSortType: \"desc\"\n            },\n            // 代码生成器表单规则\n            formValidate: {\n                field: [{\n                    required: true,\n                    message: \"不能为空\",\n                    trigger: \"blur\"\n                }],\n                name: [{\n                    required: true,\n                    message: \"不能为空\",\n                    trigger: \"blur\"\n                }]\n            },\n            // 读取后端字段表单规则\n            entityFormValidate: {\n                path: [{\n                    required: true,\n                    message: \"不能为空\",\n                    trigger: \"blur\"\n                }]\n            },\n            // 代码生成器表格列\n            columns: [{\n                    title: \"编号\",\n                    key: \"sortOrder\",\n                    sortType: \"asc\",\n                    sortable: true,\n                    align: \"center\",\n                    minWidth: 90\n                },\n                {\n                    title: \"后端字段名\",\n                    slot: \"field\",\n                    minWidth: 150\n                },\n                {\n                    title: \"备注\",\n                    slot: \"name\",\n                    minWidth: 150\n                },\n                {\n                    title: \"表格显示\",\n                    slot: \"tableShow\",\n                    minWidth: 110\n                },\n                {\n                    title: \"可添加编辑\",\n                    slot: \"editable\",\n                    minWidth: 110\n                },\n                {\n                    title: \"输入组件\",\n                    slot: \"type\",\n                    minWidth: 200\n                },\n                {\n                    title: \"非空\",\n                    slot: \"validate\",\n                    minWidth: 125\n                },\n                {\n                    title: \"搜索\",\n                    slot: \"searchable\",\n                    minWidth: 100\n                },\n                {\n                    title: \"搜索组件\",\n                    slot: \"searchType\",\n                    minWidth: 160\n                },\n                {\n                    title: \"排序\",\n                    slot: \"sortable\",\n                    minWidth: 80\n                },\n                {\n                    title: \"默认排序\",\n                    slot: \"defaultSort\",\n                    minWidth: 100\n                },\n                {\n                    title: \"默认排序方式\",\n                    slot: \"defaultSortType\",\n                    minWidth: 150\n                },\n                {\n                    title: \"操作\",\n                    slot: \"action\",\n                    align: \"center\",\n                    fixed: \"right\",\n                    width: 90\n                }\n            ],\n            // 代码生成器表格值\n            data: [],\n            defaultSort: false,\n            daterangeSearch: false,\n            result: {}\n        };\n    },\n    methods: {\n        init() {\n            let data = this.getStore(\"tableData\");\n            let apiPreStr = this.getStore(\"createCodeApiPre\");\n            let defaultSort = this.getStore(\"tableDefaultSort\");\n            let daterangeSearch = this.getStore(\"tableDaterangeSearch\");\n            if (data && data != \"undefined\") {\n                this.data = JSON.parse(data);\n            }\n            if (apiPreStr && apiPreStr != \"undefined\") {\n                this.apiPreStr = apiPreStr;\n            }\n            if (defaultSort && defaultSort != \"undefined\") {\n                if (defaultSort == \"true\") {\n                    this.defaultSort = true;\n                } else {\n                    this.defaultSort = false;\n                }\n            }\n            if (daterangeSearch && daterangeSearch != \"undefined\") {\n                if (daterangeSearch == \"true\") {\n                    this.daterangeSearch = true;\n                } else {\n                    this.daterangeSearch = false;\n                }\n            }\n        },\n        // 读取字段\n        generateEntityData() {\n            this.$refs.entityForm.validate(valid => {\n                if (valid) {\n                    getEntityData(this.entityForm.path).then(res => {\n                        if (res.success) {\n                            this.findBackFieldContent = res.result;\n                        }\n                    });\n                }\n            });\n        },\n        // 将读取到的后端字段导入到表格\n        submitEntityData() {\n            if (!this.findBackFieldContent) {\n                this.$Message.warning(\"后端实体类没有读到，请重试\");\n                return;\n            }\n            try {\n                let data = JSON.parse(this.findBackFieldContent);\n                this.data = data.data;\n                this.findBackFieldModal = false;\n            } catch (e) {\n                this.$Message.error(\"后端实体类解析异常: \" + e);\n            }\n        },\n        changeField(row, v) {\n            for (let attr in row) {\n                if (row[attr] == null) {\n                    row[attr] = \"\";\n                }\n            }\n            let str = JSON.stringify(row);\n            let data = JSON.parse(str);\n            data.field = v.target.value;\n            this.data.splice(row._index, 1, data);\n            this.save();\n        },\n        changeName(row, v) {\n            for (let attr in row) {\n                if (row[attr] == null) {\n                    row[attr] = \"\";\n                }\n            }\n            let str = JSON.stringify(row);\n            let data = JSON.parse(str);\n            data.name = v.target.value;\n            this.data.splice(row._index, 1, data);\n            this.save();\n        },\n        changeTableShow(row, v) {\n            for (let attr in row) {\n                if (row[attr] == null) {\n                    row[attr] = \"\";\n                }\n            }\n            let str = JSON.stringify(row);\n            let data = JSON.parse(str);\n            data.tableShow = v;\n            this.data.splice(row._index, 1, data);\n            this.save();\n        },\n        changeType(row, v) {\n            for (let attr in row) {\n                if (row[attr] == null) {\n                    row[attr] = \"\";\n                }\n            }\n            let str = JSON.stringify(row);\n            let data = JSON.parse(str);\n            data.type = v;\n            this.data.splice(row._index, 1, data);\n            this.save();\n        },\n        changeEditable(row, v) {\n            for (let attr in row) {\n                if (row[attr] == null) {\n                    row[attr] = \"\";\n                }\n            }\n            let str = JSON.stringify(row);\n            let data = JSON.parse(str);\n            data.editable = v;\n            this.data.splice(row._index, 1, data);\n            this.save();\n        },\n        changeValidate(row, v) {\n            for (let attr in row) {\n                if (row[attr] == null) {\n                    row[attr] = \"\";\n                }\n            }\n            let str = JSON.stringify(row);\n            let data = JSON.parse(str);\n            data.validate = v;\n            this.data.splice(row._index, 1, data);\n            this.save();\n        },\n        changeSearchable(row, v) {\n            for (let attr in row) {\n                if (row[attr] == null) {\n                    row[attr] = \"\";\n                }\n            }\n            let str = JSON.stringify(row);\n            let data = JSON.parse(str);\n            data.searchable = v;\n            this.data.splice(row._index, 1, data);\n            this.save();\n        },\n        changeSearchType(row, v) {\n            for (let attr in row) {\n                if (row[attr] == null) {\n                    row[attr] = \"\";\n                }\n            }\n            let str = JSON.stringify(row);\n            let data = JSON.parse(str);\n            data.searchType = v;\n            this.data.splice(row._index, 1, data);\n            if (this.daterangeSearch && v != \"daterange\") {\n                this.daterangeSearch = false;\n            } else if (v == \"daterange\") {\n                this.daterangeSearch = true;\n            }\n            this.save();\n        },\n        changeSortable(row, v) {\n            for (let attr in row) {\n                if (row[attr] == null) {\n                    row[attr] = \"\";\n                }\n            }\n            let str = JSON.stringify(row);\n            let data = JSON.parse(str);\n            data.sortable = v;\n            this.data.splice(row._index, 1, data);\n            this.save();\n        },\n        changeDefaultSort(row, v) {\n            for (let attr in row) {\n                if (row[attr] == null) {\n                    row[attr] = \"\";\n                }\n            }\n            let str = JSON.stringify(row);\n            let data = JSON.parse(str);\n            // 判断默认排序\n            if (this.defaultSort && v) {\n                this.$Message.warning(\"已设定了默认排序的字段，请勿设置多个\");\n                // 恢复禁用\n                data.defaultSort = false;\n            } else if (!this.defaultSort && v) {\n                // 没有记录过\n                data.defaultSort = true;\n                this.defaultSort = true;\n            } else if (this.defaultSort && !v) {\n                // 取消唯一的\n                data.defaultSort = false;\n                this.defaultSort = false;\n            }\n            this.data.splice(row._index, 1, data);\n            this.save();\n        },\n        changeDefaultSortType(row, v) {\n            for (let attr in row) {\n                if (row[attr] == null) {\n                    row[attr] = \"\";\n                }\n            }\n            let str = JSON.stringify(row);\n            let data = JSON.parse(str);\n            data.defaultSortType = v;\n            this.data.splice(row._index, 1, data);\n            this.save();\n        },\n        remove(v) {\n            this.data.splice(v._index, 1);\n            this.save();\n            this.$Message.success(\"删除成功\");\n        },\n        clear() {\n            this.$Modal.confirm({\n                title: \"确认清空\",\n                content: \"您确认要清空 ?\",\n                onOk: () => {\n                    this.data = [];\n                    this.apiPreStr = \"\";\n                    this.defaultSort = false;\n                    this.daterangeSearch = false;\n                    this.save();\n                    this.$Message.success(\"清空成功\");\n                }\n            });\n        },\n        generate() {\n            if (!this.apiPreStr) {\n                this.$Message.warning(\"接口前缀不能为空\");\n                return;\n            }\n            this.createCodeLoading = true;\n            generateTable(this.apiPreStr, \"1\", this.data).then(res => {\n                this.createCodeLoading = false;\n                if (res.success) {\n                    this.result = res.result;\n                    this.changeCode();\n                    this.codeModal = true;\n                    this.save();\n                }\n            });\n        },\n        changeCode() {\n            if (this.tabName == \"index.vue\") {\n                this.createCodeContent = this.result.componentApi;\n            }\n            if (this.tabName == \"add.vue\") {\n                this.createCodeContent = this.result.addApi;\n            }\n            if (this.tabName == \"edit.vue\") {\n                this.createCodeContent = this.result.editApi;\n            }\n            if (this.tabName == \"api.js\") {\n                this.createCodeContent = this.result.api;\n            }\n        },\n        onCopy() {\n            this.$Message.success(\"复制成功\");\n        },\n        save() {\n            this.setStore(\"tableData\", JSON.stringify(this.data));\n            this.setStore(\"createCodeApiPre\", this.apiPreStr);\n            this.setStore(\"tableDefaultSort\", this.defaultSort);\n            this.setStore(\"tableDaterangeSearch\", this.daterangeSearch);\n        }\n    },\n    mounted() {\n        this.init();\n    }\n};\n</script>\n\n<style lang=\"less\">\n.search {\n    .operation {\n        margin-bottom: 2vh;\n    }\n}\n</style>\n"],"mappings":"AA8HA,SACAA,aAAA,EACAC,aAAA,QACA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACA;MACAC,kBAAA;MACA;MACAC,oBAAA;MACA;MACAC,UAAA;QACAC,IAAA;MACA;MACA;MACAC,iBAAA;MACA;MACAC,iBAAA;MACA;MACAC,SAAA;MACA;MACAC,SAAA;MACAC,IAAA;QACAC,SAAA;QACAC,KAAA;QACAb,IAAA;QACAc,KAAA;QACAC,SAAA;QACAC,QAAA;QACAC,IAAA;QACAC,UAAA;QACAC,WAAA;QACAC,QAAA;QACAC,UAAA;QACAC,QAAA;QACAC,WAAA;QACAC,eAAA;MACA;MACA;MACAC,YAAA;QACAZ,KAAA;UACAa,QAAA;UACAC,OAAA;UACAC,OAAA;QACA;QACA5B,IAAA;UACA0B,QAAA;UACAC,OAAA;UACAC,OAAA;QACA;MACA;MACA;MACAC,kBAAA;QACAvB,IAAA;UACAoB,QAAA;UACAC,OAAA;UACAC,OAAA;QACA;MACA;MACA;MACAE,OAAA;QACAC,KAAA;QACAC,GAAA;QACAC,QAAA;QACAX,QAAA;QACAY,KAAA;QACAC,QAAA;MACA,GACA;QACAJ,KAAA;QACAK,IAAA;QACAD,QAAA;MACA,GACA;QACAJ,KAAA;QACAK,IAAA;QACAD,QAAA;MACA,GACA;QACAJ,KAAA;QACAK,IAAA;QACAD,QAAA;MACA,GACA;QACAJ,KAAA;QACAK,IAAA;QACAD,QAAA;MACA,GACA;QACAJ,KAAA;QACAK,IAAA;QACAD,QAAA;MACA,GACA;QACAJ,KAAA;QACAK,IAAA;QACAD,QAAA;MACA,GACA;QACAJ,KAAA;QACAK,IAAA;QACAD,QAAA;MACA,GACA;QACAJ,KAAA;QACAK,IAAA;QACAD,QAAA;MACA,GACA;QACAJ,KAAA;QACAK,IAAA;QACAD,QAAA;MACA,GACA;QACAJ,KAAA;QACAK,IAAA;QACAD,QAAA;MACA,GACA;QACAJ,KAAA;QACAK,IAAA;QACAD,QAAA;MACA,GACA;QACAJ,KAAA;QACAK,IAAA;QACAF,KAAA;QACAG,KAAA;QACAC,KAAA;MACA,EACA;MACA;MACArC,IAAA;MACAsB,WAAA;MACAgB,eAAA;MACAC,MAAA;IACA;EACA;EACAC,OAAA;IACAC,KAAA;MACA,IAAAzC,IAAA,QAAA0C,QAAA;MACA,IAAAlC,SAAA,QAAAkC,QAAA;MACA,IAAApB,WAAA,QAAAoB,QAAA;MACA,IAAAJ,eAAA,QAAAI,QAAA;MACA,IAAA1C,IAAA,IAAAA,IAAA;QACA,KAAAA,IAAA,GAAA2C,IAAA,CAAAC,KAAA,CAAA5C,IAAA;MACA;MACA,IAAAQ,SAAA,IAAAA,SAAA;QACA,KAAAA,SAAA,GAAAA,SAAA;MACA;MACA,IAAAc,WAAA,IAAAA,WAAA;QACA,IAAAA,WAAA;UACA,KAAAA,WAAA;QACA;UACA,KAAAA,WAAA;QACA;MACA;MACA,IAAAgB,eAAA,IAAAA,eAAA;QACA,IAAAA,eAAA;UACA,KAAAA,eAAA;QACA;UACA,KAAAA,eAAA;QACA;MACA;IACA;IACA;IACAO,mBAAA;MACA,KAAAC,KAAA,CAAA1C,UAAA,CAAAe,QAAA,CAAA4B,KAAA;QACA,IAAAA,KAAA;UACAjD,aAAA,MAAAM,UAAA,CAAAC,IAAA,EAAA2C,IAAA,CAAAC,GAAA;YACA,IAAAA,GAAA,CAAAC,OAAA;cACA,KAAA/C,oBAAA,GAAA8C,GAAA,CAAAV,MAAA;YACA;UACA;QACA;MACA;IACA;IACA;IACAY,iBAAA;MACA,UAAAhD,oBAAA;QACA,KAAAiD,QAAA,CAAAC,OAAA;QACA;MACA;MACA;QACA,IAAArD,IAAA,GAAA2C,IAAA,CAAAC,KAAA,MAAAzC,oBAAA;QACA,KAAAH,IAAA,GAAAA,IAAA,CAAAA,IAAA;QACA,KAAAE,kBAAA;MACA,SAAAoD,CAAA;QACA,KAAAF,QAAA,CAAAG,KAAA,iBAAAD,CAAA;MACA;IACA;IACAE,YAAAC,GAAA,EAAAC,CAAA;MACA,SAAAC,IAAA,IAAAF,GAAA;QACA,IAAAA,GAAA,CAAAE,IAAA;UACAF,GAAA,CAAAE,IAAA;QACA;MACA;MACA,IAAAC,GAAA,GAAAjB,IAAA,CAAAkB,SAAA,CAAAJ,GAAA;MACA,IAAAzD,IAAA,GAAA2C,IAAA,CAAAC,KAAA,CAAAgB,GAAA;MACA5D,IAAA,CAAAY,KAAA,GAAA8C,CAAA,CAAAI,MAAA,CAAAC,KAAA;MACA,KAAA/D,IAAA,CAAAgE,MAAA,CAAAP,GAAA,CAAAQ,MAAA,KAAAjE,IAAA;MACA,KAAAkE,IAAA;IACA;IACAC,WAAAV,GAAA,EAAAC,CAAA;MACA,SAAAC,IAAA,IAAAF,GAAA;QACA,IAAAA,GAAA,CAAAE,IAAA;UACAF,GAAA,CAAAE,IAAA;QACA;MACA;MACA,IAAAC,GAAA,GAAAjB,IAAA,CAAAkB,SAAA,CAAAJ,GAAA;MACA,IAAAzD,IAAA,GAAA2C,IAAA,CAAAC,KAAA,CAAAgB,GAAA;MACA5D,IAAA,CAAAD,IAAA,GAAA2D,CAAA,CAAAI,MAAA,CAAAC,KAAA;MACA,KAAA/D,IAAA,CAAAgE,MAAA,CAAAP,GAAA,CAAAQ,MAAA,KAAAjE,IAAA;MACA,KAAAkE,IAAA;IACA;IACAE,gBAAAX,GAAA,EAAAC,CAAA;MACA,SAAAC,IAAA,IAAAF,GAAA;QACA,IAAAA,GAAA,CAAAE,IAAA;UACAF,GAAA,CAAAE,IAAA;QACA;MACA;MACA,IAAAC,GAAA,GAAAjB,IAAA,CAAAkB,SAAA,CAAAJ,GAAA;MACA,IAAAzD,IAAA,GAAA2C,IAAA,CAAAC,KAAA,CAAAgB,GAAA;MACA5D,IAAA,CAAAc,SAAA,GAAA4C,CAAA;MACA,KAAA1D,IAAA,CAAAgE,MAAA,CAAAP,GAAA,CAAAQ,MAAA,KAAAjE,IAAA;MACA,KAAAkE,IAAA;IACA;IACAG,WAAAZ,GAAA,EAAAC,CAAA;MACA,SAAAC,IAAA,IAAAF,GAAA;QACA,IAAAA,GAAA,CAAAE,IAAA;UACAF,GAAA,CAAAE,IAAA;QACA;MACA;MACA,IAAAC,GAAA,GAAAjB,IAAA,CAAAkB,SAAA,CAAAJ,GAAA;MACA,IAAAzD,IAAA,GAAA2C,IAAA,CAAAC,KAAA,CAAAgB,GAAA;MACA5D,IAAA,CAAAgB,IAAA,GAAA0C,CAAA;MACA,KAAA1D,IAAA,CAAAgE,MAAA,CAAAP,GAAA,CAAAQ,MAAA,KAAAjE,IAAA;MACA,KAAAkE,IAAA;IACA;IACAI,eAAAb,GAAA,EAAAC,CAAA;MACA,SAAAC,IAAA,IAAAF,GAAA;QACA,IAAAA,GAAA,CAAAE,IAAA;UACAF,GAAA,CAAAE,IAAA;QACA;MACA;MACA,IAAAC,GAAA,GAAAjB,IAAA,CAAAkB,SAAA,CAAAJ,GAAA;MACA,IAAAzD,IAAA,GAAA2C,IAAA,CAAAC,KAAA,CAAAgB,GAAA;MACA5D,IAAA,CAAAe,QAAA,GAAA2C,CAAA;MACA,KAAA1D,IAAA,CAAAgE,MAAA,CAAAP,GAAA,CAAAQ,MAAA,KAAAjE,IAAA;MACA,KAAAkE,IAAA;IACA;IACAK,eAAAd,GAAA,EAAAC,CAAA;MACA,SAAAC,IAAA,IAAAF,GAAA;QACA,IAAAA,GAAA,CAAAE,IAAA;UACAF,GAAA,CAAAE,IAAA;QACA;MACA;MACA,IAAAC,GAAA,GAAAjB,IAAA,CAAAkB,SAAA,CAAAJ,GAAA;MACA,IAAAzD,IAAA,GAAA2C,IAAA,CAAAC,KAAA,CAAAgB,GAAA;MACA5D,IAAA,CAAAmB,QAAA,GAAAuC,CAAA;MACA,KAAA1D,IAAA,CAAAgE,MAAA,CAAAP,GAAA,CAAAQ,MAAA,KAAAjE,IAAA;MACA,KAAAkE,IAAA;IACA;IACAM,iBAAAf,GAAA,EAAAC,CAAA;MACA,SAAAC,IAAA,IAAAF,GAAA;QACA,IAAAA,GAAA,CAAAE,IAAA;UACAF,GAAA,CAAAE,IAAA;QACA;MACA;MACA,IAAAC,GAAA,GAAAjB,IAAA,CAAAkB,SAAA,CAAAJ,GAAA;MACA,IAAAzD,IAAA,GAAA2C,IAAA,CAAAC,KAAA,CAAAgB,GAAA;MACA5D,IAAA,CAAAoB,UAAA,GAAAsC,CAAA;MACA,KAAA1D,IAAA,CAAAgE,MAAA,CAAAP,GAAA,CAAAQ,MAAA,KAAAjE,IAAA;MACA,KAAAkE,IAAA;IACA;IACAO,iBAAAhB,GAAA,EAAAC,CAAA;MACA,SAAAC,IAAA,IAAAF,GAAA;QACA,IAAAA,GAAA,CAAAE,IAAA;UACAF,GAAA,CAAAE,IAAA;QACA;MACA;MACA,IAAAC,GAAA,GAAAjB,IAAA,CAAAkB,SAAA,CAAAJ,GAAA;MACA,IAAAzD,IAAA,GAAA2C,IAAA,CAAAC,KAAA,CAAAgB,GAAA;MACA5D,IAAA,CAAAiB,UAAA,GAAAyC,CAAA;MACA,KAAA1D,IAAA,CAAAgE,MAAA,CAAAP,GAAA,CAAAQ,MAAA,KAAAjE,IAAA;MACA,SAAAsC,eAAA,IAAAoB,CAAA;QACA,KAAApB,eAAA;MACA,WAAAoB,CAAA;QACA,KAAApB,eAAA;MACA;MACA,KAAA4B,IAAA;IACA;IACAQ,eAAAjB,GAAA,EAAAC,CAAA;MACA,SAAAC,IAAA,IAAAF,GAAA;QACA,IAAAA,GAAA,CAAAE,IAAA;UACAF,GAAA,CAAAE,IAAA;QACA;MACA;MACA,IAAAC,GAAA,GAAAjB,IAAA,CAAAkB,SAAA,CAAAJ,GAAA;MACA,IAAAzD,IAAA,GAAA2C,IAAA,CAAAC,KAAA,CAAAgB,GAAA;MACA5D,IAAA,CAAAqB,QAAA,GAAAqC,CAAA;MACA,KAAA1D,IAAA,CAAAgE,MAAA,CAAAP,GAAA,CAAAQ,MAAA,KAAAjE,IAAA;MACA,KAAAkE,IAAA;IACA;IACAS,kBAAAlB,GAAA,EAAAC,CAAA;MACA,SAAAC,IAAA,IAAAF,GAAA;QACA,IAAAA,GAAA,CAAAE,IAAA;UACAF,GAAA,CAAAE,IAAA;QACA;MACA;MACA,IAAAC,GAAA,GAAAjB,IAAA,CAAAkB,SAAA,CAAAJ,GAAA;MACA,IAAAzD,IAAA,GAAA2C,IAAA,CAAAC,KAAA,CAAAgB,GAAA;MACA;MACA,SAAAtC,WAAA,IAAAoC,CAAA;QACA,KAAAN,QAAA,CAAAC,OAAA;QACA;QACArD,IAAA,CAAAsB,WAAA;MACA,iBAAAA,WAAA,IAAAoC,CAAA;QACA;QACA1D,IAAA,CAAAsB,WAAA;QACA,KAAAA,WAAA;MACA,gBAAAA,WAAA,KAAAoC,CAAA;QACA;QACA1D,IAAA,CAAAsB,WAAA;QACA,KAAAA,WAAA;MACA;MACA,KAAAtB,IAAA,CAAAgE,MAAA,CAAAP,GAAA,CAAAQ,MAAA,KAAAjE,IAAA;MACA,KAAAkE,IAAA;IACA;IACAU,sBAAAnB,GAAA,EAAAC,CAAA;MACA,SAAAC,IAAA,IAAAF,GAAA;QACA,IAAAA,GAAA,CAAAE,IAAA;UACAF,GAAA,CAAAE,IAAA;QACA;MACA;MACA,IAAAC,GAAA,GAAAjB,IAAA,CAAAkB,SAAA,CAAAJ,GAAA;MACA,IAAAzD,IAAA,GAAA2C,IAAA,CAAAC,KAAA,CAAAgB,GAAA;MACA5D,IAAA,CAAAuB,eAAA,GAAAmC,CAAA;MACA,KAAA1D,IAAA,CAAAgE,MAAA,CAAAP,GAAA,CAAAQ,MAAA,KAAAjE,IAAA;MACA,KAAAkE,IAAA;IACA;IACAW,OAAAnB,CAAA;MACA,KAAA1D,IAAA,CAAAgE,MAAA,CAAAN,CAAA,CAAAO,MAAA;MACA,KAAAC,IAAA;MACA,KAAAd,QAAA,CAAAF,OAAA;IACA;IACA4B,MAAA;MACA,KAAAC,MAAA,CAAAC,OAAA;QACAlD,KAAA;QACAmD,OAAA;QACAC,IAAA,EAAAA,CAAA;UACA,KAAAlF,IAAA;UACA,KAAAQ,SAAA;UACA,KAAAc,WAAA;UACA,KAAAgB,eAAA;UACA,KAAA4B,IAAA;UACA,KAAAd,QAAA,CAAAF,OAAA;QACA;MACA;IACA;IACAiC,SAAA;MACA,UAAA3E,SAAA;QACA,KAAA4C,QAAA,CAAAC,OAAA;QACA;MACA;MACA,KAAA/C,iBAAA;MACAT,aAAA,MAAAW,SAAA,YAAAR,IAAA,EAAAgD,IAAA,CAAAC,GAAA;QACA,KAAA3C,iBAAA;QACA,IAAA2C,GAAA,CAAAC,OAAA;UACA,KAAAX,MAAA,GAAAU,GAAA,CAAAV,MAAA;UACA,KAAA6C,UAAA;UACA,KAAA3E,SAAA;UACA,KAAAyD,IAAA;QACA;MACA;IACA;IACAkB,WAAA;MACA,SAAAnF,OAAA;QACA,KAAAM,iBAAA,QAAAgC,MAAA,CAAA8C,YAAA;MACA;MACA,SAAApF,OAAA;QACA,KAAAM,iBAAA,QAAAgC,MAAA,CAAA+C,MAAA;MACA;MACA,SAAArF,OAAA;QACA,KAAAM,iBAAA,QAAAgC,MAAA,CAAAgD,OAAA;MACA;MACA,SAAAtF,OAAA;QACA,KAAAM,iBAAA,QAAAgC,MAAA,CAAAiD,GAAA;MACA;IACA;IACAC,OAAA;MACA,KAAArC,QAAA,CAAAF,OAAA;IACA;IACAgB,KAAA;MACA,KAAAwB,QAAA,cAAA/C,IAAA,CAAAkB,SAAA,MAAA7D,IAAA;MACA,KAAA0F,QAAA,0BAAAlF,SAAA;MACA,KAAAkF,QAAA,0BAAApE,WAAA;MACA,KAAAoE,QAAA,8BAAApD,eAAA;IACA;EACA;EACAqD,QAAA;IACA,KAAAlD,IAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}