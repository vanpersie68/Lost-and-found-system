{"ast":null,"code":"import { icons } from \"@/libs/icon\";\nexport default {\n  name: \"iconChoose\",\n  props: {\n    value: {\n      type: String,\n      default: \"\"\n    },\n    size: String,\n    placeholder: {\n      type: String,\n      default: \"Enter icon name or select an icon\"\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    maxlength: Number,\n    icon: {\n      type: String,\n      default: \"md-ionic\"\n    }\n  },\n  data() {\n    return {\n      iconModalVisible: false,\n      currentValue: this.value,\n      iconData: [],\n      key: \"\",\n      tip: \"Enter English keyword for search, e.g., success\"\n    };\n  },\n  methods: {\n    init() {\n      let re = [];\n      icons.forEach(e => {\n        e.icons.forEach(item => {\n          re.push(item);\n        });\n      });\n      this.iconData = re;\n    },\n    handleInput() {\n      if (this.key) {\n        // Search\n        let re = [];\n        icons.forEach(e => {\n          e.tags.forEach(item => {\n            if (item.indexOf(this.key) >= 0) {\n              e.icons.forEach(r => {\n                re.push(r);\n              });\n            }\n          });\n        });\n        this.iconData = re;\n      } else {\n        this.init();\n      }\n    },\n    handleFocus() {\n      if (!this.key) {\n        this.tip = \"\";\n      }\n    },\n    handleBlur() {\n      if (!this.key) {\n        this.tip = \"Enter English keyword for search, e.g., success\";\n      }\n    },\n    handleChange(v) {\n      this.$emit(\"input\", this.currentValue);\n      this.$emit(\"on-change\", this.currentValue);\n    },\n    setCurrentValue(value) {\n      if (value === this.currentValue) {\n        return;\n      }\n      this.currentValue = value;\n    },\n    hanleChoose(v) {\n      this.currentValue = v;\n      this.$emit(\"input\", this.currentValue);\n      this.$emit(\"on-change\", this.currentValue);\n      this.iconModalVisible = false;\n    }\n  },\n  watch: {\n    value(val) {\n      this.setCurrentValue(val);\n    }\n  },\n  mounted() {\n    this.init();\n  }\n};","map":{"version":3,"names":["icons","name","props","value","type","String","default","size","placeholder","disabled","Boolean","readonly","maxlength","Number","icon","data","iconModalVisible","currentValue","iconData","key","tip","methods","init","re","forEach","e","item","push","handleInput","tags","indexOf","r","handleFocus","handleBlur","handleChange","v","$emit","setCurrentValue","hanleChoose","watch","val","mounted"],"sources":["src/views/template/icon-choose.vue"],"sourcesContent":["<template>\n    <div>\n        <div style=\"display:flex\">\n            <Input v-model=\"currentValue\" @on-change=\"handleChange\" :placeholder=\"placeholder\" :size=\"size\" :disabled=\"disabled\" :readonly=\"readonly\" :maxlength=\"maxlength\" :icon=\"currentValue\" />\n            <Button @click=\"iconModalVisible=true\" :size=\"size\" :disabled=\"disabled\" :icon=\"icon\" style=\"margin-left:10px\">Select Icon</Button>\n        </div>\n    \n        <Modal title=\"Select Icon\" v-model=\"iconModalVisible\" :width=\"950\" :styles=\"{top: '30px'}\" footer-hide :z-index=\"1060\">\n            <div class=\"icon-search\">\n                <input type=\"text\" v-model=\"key\" :placeholder=\"tip\" @input=\"handleInput\" @focus=\"handleFocus\" @blur=\"handleBlur\">\n            </div>\n            <div class=\"icon-block icon-bar\">\n                <div class=\"icon-wrap\" v-for=\"(item, i) in iconData\" :key=\"i\" @click=\"hanleChoose(item)\">\n                    <div class=\"icons-item\">\n                        <Icon :type=\"item\" style=\"font-size: 32px;\" />\n                        <p>{{item}}</p>\n                    </div>\n                </div>\n            </div>\n        </Modal>\n    </div>\n    </template>\n    \n    <script>\n    import {\n        icons\n    } from \"@/libs/icon\";\n    export default {\n        name: \"iconChoose\",\n        props: {\n            value: {\n                type: String,\n                default: \"\"\n            },\n            size: String,\n            placeholder: {\n                type: String,\n                default: \"Enter icon name or select an icon\"\n            },\n            disabled: {\n                type: Boolean,\n                default: false\n            },\n            readonly: {\n                type: Boolean,\n                default: false\n            },\n            maxlength: Number,\n            icon: {\n                type: String,\n                default: \"md-ionic\"\n            }\n        },\n        data() {\n            return {\n                iconModalVisible: false,\n                currentValue: this.value,\n                iconData: [],\n                key: \"\",\n                tip: \"Enter English keyword for search, e.g., success\"\n            };\n        },\n        methods: {\n            init() {\n                let re = [];\n                icons.forEach(e => {\n                    e.icons.forEach(item => {\n                        re.push(item);\n                    });\n                });\n                this.iconData = re;\n            },\n            handleInput() {\n                if (this.key) {\n                    // Search\n                    let re = [];\n                    icons.forEach(e => {\n                        e.tags.forEach(item => {\n                            if (item.indexOf(this.key) >= 0) {\n                                e.icons.forEach(r => {\n                                    re.push(r);\n                                });\n                            }\n                        });\n                    });\n                    this.iconData = re;\n                } else {\n                    this.init();\n                }\n            },\n            handleFocus() {\n                if (!this.key) {\n                    this.tip = \"\";\n                }\n            },\n            handleBlur() {\n                if (!this.key) {\n                    this.tip = \"Enter English keyword for search, e.g., success\";\n                }\n            },\n            handleChange(v) {\n                this.$emit(\"input\", this.currentValue);\n                this.$emit(\"on-change\", this.currentValue);\n            },\n            setCurrentValue(value) {\n                if (value === this.currentValue) {\n                    return;\n                }\n                this.currentValue = value;\n            },\n            hanleChoose(v) {\n                this.currentValue = v;\n                this.$emit(\"input\", this.currentValue);\n                this.$emit(\"on-change\", this.currentValue);\n                this.iconModalVisible = false;\n            }\n        },\n        watch: {\n            value(val) {\n                this.setCurrentValue(val);\n            }\n        },\n        mounted() {\n            this.init();\n        }\n    };\n    </script>\n    \n    <style lang=\"less\">\n    .icon-search {\n        position: relative;\n        margin: 20px auto 30px;\n        text-align: center;\n    \n        input {\n            width: 500px;\n            box-sizing: border-box;\n            border: 0;\n            border-radius: 4px;\n            background: #f5f5f5;\n            text-align: center;\n            font-size: 14px;\n            outline: none;\n            margin: 0 auto;\n            padding: 8px 0;\n        }\n    }\n    \n    .icon-block {\n        display: flex;\n        flex-wrap: wrap;\n        max-height: 500px;\n        overflow: auto;\n    }\n    \n    .icon-bar {\n        overflow: auto;\n        overflow-x: hidden;\n    }\n    \n    .icon-bar::-webkit-scrollbar {\n        width: 6px;\n        height: 6px;\n    }\n    \n    .icon-bar::-webkit-scrollbar-thumb {\n        border-radius: 3px;\n        background: #c3c3c3;\n    }\n    \n    .icon-bar::-webkit-scrollbar-track {\n        background: #fff;\n    }\n    \n    .icon-wrap {\n        :hover {\n            color: #1890ff;\n            transition: color 0.3s;\n        }\n    }\n    \n    .icons-item {\n        margin: 6px 6px 6px 0;\n        width: 145px;\n        text-align: center;\n        list-style: none;\n        cursor: pointer;\n        height: 100px;\n        color: #5c6b77;\n        transition: all 0.2s ease;\n        position: relative;\n        padding-top: 10px;\n    \n        p {\n            padding-top: 15px;\n            margin: 5px;\n            font-size: 14px;\n        }\n    }\n    </style>\n    "],"mappings":"AAwBA,SACAA,KAAA,QACA;AACA;EACAC,IAAA;EACAC,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACAC,IAAA,EAAAF,MAAA;IACAG,WAAA;MACAJ,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACAG,QAAA;MACAL,IAAA,EAAAM,OAAA;MACAJ,OAAA;IACA;IACAK,QAAA;MACAP,IAAA,EAAAM,OAAA;MACAJ,OAAA;IACA;IACAM,SAAA,EAAAC,MAAA;IACAC,IAAA;MACAV,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;EACA;EACAS,KAAA;IACA;MACAC,gBAAA;MACAC,YAAA,OAAAd,KAAA;MACAe,QAAA;MACAC,GAAA;MACAC,GAAA;IACA;EACA;EACAC,OAAA;IACAC,KAAA;MACA,IAAAC,EAAA;MACAvB,KAAA,CAAAwB,OAAA,CAAAC,CAAA;QACAA,CAAA,CAAAzB,KAAA,CAAAwB,OAAA,CAAAE,IAAA;UACAH,EAAA,CAAAI,IAAA,CAAAD,IAAA;QACA;MACA;MACA,KAAAR,QAAA,GAAAK,EAAA;IACA;IACAK,YAAA;MACA,SAAAT,GAAA;QACA;QACA,IAAAI,EAAA;QACAvB,KAAA,CAAAwB,OAAA,CAAAC,CAAA;UACAA,CAAA,CAAAI,IAAA,CAAAL,OAAA,CAAAE,IAAA;YACA,IAAAA,IAAA,CAAAI,OAAA,MAAAX,GAAA;cACAM,CAAA,CAAAzB,KAAA,CAAAwB,OAAA,CAAAO,CAAA;gBACAR,EAAA,CAAAI,IAAA,CAAAI,CAAA;cACA;YACA;UACA;QACA;QACA,KAAAb,QAAA,GAAAK,EAAA;MACA;QACA,KAAAD,IAAA;MACA;IACA;IACAU,YAAA;MACA,UAAAb,GAAA;QACA,KAAAC,GAAA;MACA;IACA;IACAa,WAAA;MACA,UAAAd,GAAA;QACA,KAAAC,GAAA;MACA;IACA;IACAc,aAAAC,CAAA;MACA,KAAAC,KAAA,eAAAnB,YAAA;MACA,KAAAmB,KAAA,mBAAAnB,YAAA;IACA;IACAoB,gBAAAlC,KAAA;MACA,IAAAA,KAAA,UAAAc,YAAA;QACA;MACA;MACA,KAAAA,YAAA,GAAAd,KAAA;IACA;IACAmC,YAAAH,CAAA;MACA,KAAAlB,YAAA,GAAAkB,CAAA;MACA,KAAAC,KAAA,eAAAnB,YAAA;MACA,KAAAmB,KAAA,mBAAAnB,YAAA;MACA,KAAAD,gBAAA;IACA;EACA;EACAuB,KAAA;IACApC,MAAAqC,GAAA;MACA,KAAAH,eAAA,CAAAG,GAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAnB,IAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}