{"ast":null,"code":"import \"viewerjs/dist/viewer.css\";\nimport Viewer from \"viewerjs\";\nimport { uploadFile } from \"@/api/index\";\nexport default {\n  name: \"uploadPicInput\",\n  props: {\n    value: String,\n    size: String,\n    placeholder: {\n      type: String,\n      default: \"Enter image link\"\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    maxlength: Number,\n    icon: {\n      type: String,\n      default: \"ios-cloud-upload-outline\"\n    },\n    maxSize: {\n      type: Number,\n      default: 5\n    },\n    accept: {\n      type: String,\n      default: \".jpg, .jpeg, .png, .gif\"\n    }\n  },\n  computed: {\n    format() {\n      if (this.accept) {\n        let format = [];\n        this.accept.split(\",\").forEach(e => {\n          format.push(e.replace(\".\", \"\").replace(\" \", \"\"));\n        });\n        return format;\n      } else {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      accessToken: {},\n      currentValue: this.value,\n      loading: false,\n      uploadFileUrl: uploadFile\n    };\n  },\n  methods: {\n    init() {\n      this.accessToken = {\n        accessToken: this.getStore(\"accessToken\")\n      };\n    },\n    viewImage() {\n      let image = new Image();\n      image.src = this.currentValue;\n      let viewer = new Viewer(image, {\n        hidden: function () {\n          viewer.destroy();\n        }\n      });\n      viewer.show();\n    },\n    handleFormatError(file) {\n      this.loading = false;\n      this.$Notice.warning({\n        title: \"Unsupported file format\",\n        desc: \"The selected file '\" + file.name + \"' has an incorrect format. Please select a file in \" + this.accept + \" format.\"\n      });\n    },\n    handleMaxSize(file) {\n      this.loading = false;\n      this.$Notice.warning({\n        title: \"File size too large\",\n        desc: \"The selected file '\" + file.name + \"' is too large. It must not exceed \" + this.maxSize + \" MB.\"\n      });\n    },\n    beforeUpload() {\n      this.loading = true;\n      return true;\n    },\n    handleSuccess(res, file) {\n      this.loading = false;\n      if (res.success) {\n        this.currentValue = res.result;\n        this.$emit(\"input\", this.currentValue);\n        this.$emit(\"on-change\", this.currentValue);\n      } else {\n        this.$Message.error(res.message);\n      }\n    },\n    handleError(error, file, fileList) {\n      this.loading = false;\n      this.$Message.error(error.toString());\n    },\n    handleChange(v) {\n      this.$emit(\"input\", this.currentValue);\n      this.$emit(\"on-change\", this.currentValue);\n    },\n    setCurrentValue(value) {\n      if (value === this.currentValue) {\n        return;\n      }\n      this.currentValue = value;\n      this.$emit(\"on-change\", this.currentValue);\n    }\n  },\n  watch: {\n    value(val) {\n      this.setCurrentValue(val);\n    }\n  },\n  mounted() {\n    this.init();\n  }\n};","map":{"version":3,"names":["Viewer","uploadFile","name","props","value","String","size","placeholder","type","default","disabled","Boolean","readonly","maxlength","Number","icon","maxSize","accept","computed","format","split","forEach","e","push","replace","data","accessToken","currentValue","loading","uploadFileUrl","methods","init","getStore","viewImage","image","Image","src","viewer","hidden","destroy","show","handleFormatError","file","$Notice","warning","title","desc","handleMaxSize","beforeUpload","handleSuccess","res","success","result","$emit","$Message","error","message","handleError","fileList","toString","handleChange","v","setCurrentValue","watch","val","mounted"],"sources":["src/views/template/upload-pic-input.vue"],"sourcesContent":["<template>\n    <div>\n      <div style=\"display:flex;\">\n        <Input\n          v-model=\"currentValue\"\n          @on-change=\"handleChange\"\n          :placeholder=\"placeholder\"\n          :size=\"size\"\n          :disabled=\"disabled\"\n          :readonly=\"readonly\"\n          :maxlength=\"maxlength\"\n          icon=\"md-eye\"\n          style=\"margin-right:10px;\"\n        >\n        </Input>\n        <Upload\n          :action=\"uploadFileUrl\"\n          :headers=\"accessToken\"\n          :on-success=\"handleSuccess\"\n          :on-error=\"handleError\"\n          :format=\"format\"\n          :accept=\"accept\"\n          :max-size=\"maxSize*1024\"\n          :on-format-error=\"handleFormatError\"\n          :on-exceeded-size=\"handleMaxSize\"\n          :before-upload=\"beforeUpload\"\n          :show-upload-list=\"false\"\n        >\n          <Button :loading=\"loading\" :size=\"size\" :disabled=\"disabled\" :icon=\"icon\">Upload Image</Button>\n        </Upload>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import \"viewerjs/dist/viewer.css\";\n  import Viewer from \"viewerjs\";\n  import { uploadFile } from \"@/api/index\";\n  \n  export default {\n    name: \"uploadPicInput\",\n    props: {\n      value: String,\n      size: String,\n      placeholder: {\n        type: String,\n        default: \"Enter image link\"\n      },\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      readonly: {\n        type: Boolean,\n        default: false\n      },\n      maxlength: Number,\n      icon: {\n        type: String,\n        default: \"ios-cloud-upload-outline\"\n      },\n      maxSize: {\n        type: Number,\n        default: 5\n      },\n      accept: {\n        type: String,\n        default: \".jpg, .jpeg, .png, .gif\"\n      }\n    },\n    computed: {\n      format() {\n        if (this.accept) {\n          let format = [];\n          this.accept.split(\",\").forEach(e => {\n            format.push(e.replace(\".\", \"\").replace(\" \", \"\"));\n          });\n          return format;\n        } else {\n          return [];\n        }\n      }\n    },\n    data() {\n      return {\n        accessToken: {},\n        currentValue: this.value,\n        loading: false,\n        uploadFileUrl: uploadFile\n      };\n    },\n    methods: {\n      init() {\n        this.accessToken = {\n          accessToken: this.getStore(\"accessToken\")\n        };\n      },\n      viewImage() {\n        let image = new Image();\n        image.src = this.currentValue;\n        let viewer = new Viewer(image, {\n          hidden: function () {\n            viewer.destroy();\n          }\n        });\n        viewer.show();\n      },\n      handleFormatError(file) {\n        this.loading = false;\n        this.$Notice.warning({\n          title: \"Unsupported file format\",\n          desc:\n            \"The selected file '\" +\n            file.name +\n            \"' has an incorrect format. Please select a file in \" + this.accept + \" format.\"\n        });\n      },\n      handleMaxSize(file) {\n        this.loading = false;\n        this.$Notice.warning({\n          title: \"File size too large\",\n          desc:\n            \"The selected file '\" +\n            file.name +\n            \"' is too large. It must not exceed \" +\n            this.maxSize +\n            \" MB.\"\n        });\n      },\n      beforeUpload() {\n        this.loading = true;\n        return true;\n      },\n      handleSuccess(res, file) {\n        this.loading = false;\n        if (res.success) {\n          this.currentValue = res.result;\n          this.$emit(\"input\", this.currentValue);\n          this.$emit(\"on-change\", this.currentValue);\n        } else {\n          this.$Message.error(res.message);\n        }\n      },\n      handleError(error, file, fileList) {\n        this.loading = false;\n        this.$Message.error(error.toString());\n      },\n      handleChange(v) {\n        this.$emit(\"input\", this.currentValue);\n        this.$emit(\"on-change\", this.currentValue);\n      },\n      setCurrentValue(value) {\n        if (value === this.currentValue) {\n          return;\n        }\n        this.currentValue = value;\n        this.$emit(\"on-change\", this.currentValue);\n      }\n    },\n    watch: {\n      value(val) {\n        this.setCurrentValue(val);\n      }\n    },\n    mounted() {\n      this.init();\n    }\n  };\n  </script>\n  "],"mappings":"AAmCA;AACA,OAAAA,MAAA;AACA,SAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACAC,KAAA,EAAAC,MAAA;IACAC,IAAA,EAAAD,MAAA;IACAE,WAAA;MACAC,IAAA,EAAAH,MAAA;MACAI,OAAA;IACA;IACAC,QAAA;MACAF,IAAA,EAAAG,OAAA;MACAF,OAAA;IACA;IACAG,QAAA;MACAJ,IAAA,EAAAG,OAAA;MACAF,OAAA;IACA;IACAI,SAAA,EAAAC,MAAA;IACAC,IAAA;MACAP,IAAA,EAAAH,MAAA;MACAI,OAAA;IACA;IACAO,OAAA;MACAR,IAAA,EAAAM,MAAA;MACAL,OAAA;IACA;IACAQ,MAAA;MACAT,IAAA,EAAAH,MAAA;MACAI,OAAA;IACA;EACA;EACAS,QAAA;IACAC,OAAA;MACA,SAAAF,MAAA;QACA,IAAAE,MAAA;QACA,KAAAF,MAAA,CAAAG,KAAA,MAAAC,OAAA,CAAAC,CAAA;UACAH,MAAA,CAAAI,IAAA,CAAAD,CAAA,CAAAE,OAAA,UAAAA,OAAA;QACA;QACA,OAAAL,MAAA;MACA;QACA;MACA;IACA;EACA;EACAM,KAAA;IACA;MACAC,WAAA;MACAC,YAAA,OAAAvB,KAAA;MACAwB,OAAA;MACAC,aAAA,EAAA5B;IACA;EACA;EACA6B,OAAA;IACAC,KAAA;MACA,KAAAL,WAAA;QACAA,WAAA,OAAAM,QAAA;MACA;IACA;IACAC,UAAA;MACA,IAAAC,KAAA,OAAAC,KAAA;MACAD,KAAA,CAAAE,GAAA,QAAAT,YAAA;MACA,IAAAU,MAAA,OAAArC,MAAA,CAAAkC,KAAA;QACAI,MAAA,WAAAA,CAAA;UACAD,MAAA,CAAAE,OAAA;QACA;MACA;MACAF,MAAA,CAAAG,IAAA;IACA;IACAC,kBAAAC,IAAA;MACA,KAAAd,OAAA;MACA,KAAAe,OAAA,CAAAC,OAAA;QACAC,KAAA;QACAC,IAAA,EACA,wBACAJ,IAAA,CAAAxC,IAAA,GACA,6DAAAe,MAAA;MACA;IACA;IACA8B,cAAAL,IAAA;MACA,KAAAd,OAAA;MACA,KAAAe,OAAA,CAAAC,OAAA;QACAC,KAAA;QACAC,IAAA,EACA,wBACAJ,IAAA,CAAAxC,IAAA,GACA,wCACA,KAAAc,OAAA,GACA;MACA;IACA;IACAgC,aAAA;MACA,KAAApB,OAAA;MACA;IACA;IACAqB,cAAAC,GAAA,EAAAR,IAAA;MACA,KAAAd,OAAA;MACA,IAAAsB,GAAA,CAAAC,OAAA;QACA,KAAAxB,YAAA,GAAAuB,GAAA,CAAAE,MAAA;QACA,KAAAC,KAAA,eAAA1B,YAAA;QACA,KAAA0B,KAAA,mBAAA1B,YAAA;MACA;QACA,KAAA2B,QAAA,CAAAC,KAAA,CAAAL,GAAA,CAAAM,OAAA;MACA;IACA;IACAC,YAAAF,KAAA,EAAAb,IAAA,EAAAgB,QAAA;MACA,KAAA9B,OAAA;MACA,KAAA0B,QAAA,CAAAC,KAAA,CAAAA,KAAA,CAAAI,QAAA;IACA;IACAC,aAAAC,CAAA;MACA,KAAAR,KAAA,eAAA1B,YAAA;MACA,KAAA0B,KAAA,mBAAA1B,YAAA;IACA;IACAmC,gBAAA1D,KAAA;MACA,IAAAA,KAAA,UAAAuB,YAAA;QACA;MACA;MACA,KAAAA,YAAA,GAAAvB,KAAA;MACA,KAAAiD,KAAA,mBAAA1B,YAAA;IACA;EACA;EACAoC,KAAA;IACA3D,MAAA4D,GAAA;MACA,KAAAF,eAAA,CAAAE,GAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAlC,IAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}