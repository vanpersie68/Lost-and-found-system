{"ast":null,"code":"import shrinkableMenu from \"./main-components/shrinkable-menu/shrinkable-menu.vue\";\nimport tagsPageOpened from \"./main-components/tags-page-opened.vue\";\nimport breadcrumbNav from \"./main-components/breadcrumb-nav.vue\";\nimport fullScreen from \"./main-components/fullscreen.vue\";\nimport lockScreen from \"./main-components/lockscreen/lockscreen.vue\";\nimport circleLoading from \"@/views/template/circle-loading.vue\";\nimport Cookies from \"js-cookie\";\nimport util from \"@/libs/util.js\";\nexport default {\n  components: {\n    shrinkableMenu,\n    tagsPageOpened,\n    breadcrumbNav,\n    fullScreen,\n    lockScreen,\n    circleLoading\n  },\n  data() {\n    return {\n      sliceNum: 3,\n      shrink: false,\n      username: \"\",\n      userId: \"\",\n      isFullScreen: false,\n      openedSubmenuArr: this.$store.state.app.openedSubmenuArr,\n      lastNav: [],\n      navType: 1\n    };\n  },\n  computed: {\n    loading() {\n      return this.$store.state.app.loading;\n    },\n    navList() {\n      return this.$store.state.app.navList;\n    },\n    currNav() {\n      return this.$store.state.app.currNav;\n    },\n    currNavTitle() {\n      return this.$store.state.app.currNavTitle;\n    },\n    menuList() {\n      return this.$store.state.app.menuList;\n    },\n    pageTagsList() {\n      return this.$store.state.app.pageOpenedList; // Opened page objects\n    },\n\n    currentPath() {\n      return this.$store.state.app.currentPath; // Current breadcrumb array\n    },\n\n    avatarPath() {\n      return localStorage.avatorImgPath;\n    },\n    cachePage() {\n      return this.$store.state.app.cachePage;\n    },\n    lang() {\n      return this.$store.state.app.lang;\n    },\n    menuTheme() {\n      return this.$store.state.app.menuTheme;\n    },\n    mesCount() {\n      return this.$store.state.app.messageCount;\n    }\n  },\n  methods: {\n    init() {\n      // Menu\n      let pathArr = util.setCurrentPath(this, this.$route.name);\n      // this.$store.commit(\"updateMenulist\");\n      if (pathArr.length >= 2) {\n        this.$store.commit(\"addOpenSubmenu\", pathArr[1].name);\n      }\n      let userInfo = JSON.parse(Cookies.get(\"userInfo\"));\n      console.log(\"Current user information:\", userInfo);\n      this.username = userInfo.nickname;\n      this.userId = userInfo.id;\n      this.checkTag(this.$route.name);\n      let currWidth = document.body.clientWidth;\n      if (currWidth <= 1200) {\n        this.sliceNum = 2;\n      }\n    },\n    selectNav(name) {\n      this.$store.commit(\"setCurrNav\", name);\n      this.setStore(\"currNav\", name);\n      // Clear all opened tags\n      this.$store.commit(\"clearAllTags\");\n      if (this.$route.name != \"home_index\") {\n        this.$router.push({\n          name: \"home_index\"\n        });\n      }\n      util.initRouter(this);\n    },\n    toggleClick() {\n      this.shrink = !this.shrink;\n    },\n    handleClickUserDropdown(name) {\n      if (name == \"ownSpace\") {\n        util.openNewPage(this, \"my_home_index\");\n        this.$router.push({\n          name: \"my_home_index\"\n        });\n      } else if (name == \"changePass\") {\n        util.openNewPage(this, \"password\");\n        this.$router.push({\n          name: \"password\"\n        });\n      } else if (name == \"loginout\") {\n        // Logout\n        this.$store.commit(\"setLoading\", false);\n        this.$store.commit(\"setLoading\", true);\n        this.$store.commit(\"logout\", this);\n        this.$store.commit(\"clearOpenedSubmenu\");\n        this.setStore(\"accessToken\", \"\");\n        // Force refresh the page to reload the router\n        location.reload();\n      }\n    },\n    checkTag(name) {\n      let openpageHasTag = this.pageTagsList.some(item => {\n        if (item.name == name) {\n          return true;\n        }\n      });\n      if (!openpageHasTag) {\n        // Fix the issue of having no tags after closing the current tag and then clicking the back button to return to the current page\n        util.openNewPage(this, name, this.$route.params || {}, this.$route.query || {});\n      }\n    },\n    handleSubmenuChange(val) {},\n    beforePush(name) {\n      return true;\n    },\n    fullscreenChange(isFullScreen) {},\n    resize() {\n      let currWidth = document.body.clientWidth;\n      if (currWidth <= 1200 && currWidth > 900) {\n        this.sliceNum = 2;\n        this.shrink = true;\n      } else if (currWidth <= 900) {\n        this.sliceNum = 1;\n        this.shrink = true;\n      } else {\n        this.sliceNum = 3;\n        this.shrink = false;\n      }\n    }\n  },\n  watch: {\n    $route(to) {\n      this.$store.commit(\"setCurrentPageName\", to.name);\n      let pathArr = util.setCurrentPath(this, to.name);\n      if (pathArr.length > 2) {\n        this.$store.commit(\"addOpenSubmenu\", pathArr[1].name);\n      }\n      this.checkTag(to.name);\n      localStorage.currentPageName = to.name;\n    },\n    lang() {\n      util.setCurrentPath(this, this.$route.name); // Refresh breadcrumb when switching languages\n    }\n  },\n\n  mounted() {\n    this.init();\n    let that = this;\n    this.resize();\n    window.addEventListener(\"resize\", function () {\n      that.resize();\n    });\n  },\n  created() {\n    // Display the list of opened pages\n    this.$store.commit(\"setOpenedList\");\n  }\n};","map":{"version":3,"names":["shrinkableMenu","tagsPageOpened","breadcrumbNav","fullScreen","lockScreen","circleLoading","Cookies","util","components","data","sliceNum","shrink","username","userId","isFullScreen","openedSubmenuArr","$store","state","app","lastNav","navType","computed","loading","navList","currNav","currNavTitle","menuList","pageTagsList","pageOpenedList","currentPath","avatarPath","localStorage","avatorImgPath","cachePage","lang","menuTheme","mesCount","messageCount","methods","init","pathArr","setCurrentPath","$route","name","length","commit","userInfo","JSON","parse","get","console","log","nickname","id","checkTag","currWidth","document","body","clientWidth","selectNav","setStore","$router","push","initRouter","toggleClick","handleClickUserDropdown","openNewPage","location","reload","openpageHasTag","some","item","params","query","handleSubmenuChange","val","beforePush","fullscreenChange","resize","watch","to","currentPageName","mounted","that","window","addEventListener","created"],"sources":["src/views/Main.vue"],"sourcesContent":["<template>\n    <div class=\"main\" :class=\"{'main-hide-text': shrink}\">\n        <div class=\"sidebar-menu-con menu-bar\" :style=\"{width: shrink ? '60px' : '220px', overflow: shrink ? 'visible' : 'auto'}\">\n            <shrinkable-menu :shrink=\"shrink\" @on-change=\"handleSubmenuChange\" :theme=\"menuTheme\" :before-push=\"beforePush\" :open-names=\"openedSubmenuArr\" :menu-list=\"menuList\">\n                <div slot=\"top\" class=\"logo-con\">\n                    <img v-show=\"!shrink\" src=\"../assets/logo.png\" key=\"max-logo\" />\n                    <img v-show=\"shrink\" src=\"../assets/logo-min.png\" key=\"min-logo\" />\n                </div>\n            </shrinkable-menu>\n        </div>\n        <div class=\"main-header-con\" :style=\"{paddingLeft: shrink?'60px':'220px'}\">\n            <div class=\"main-header\">\n                <div class=\"navicon-con\">\n                    <Button :style=\"{transform: 'rotateZ(' + (this.shrink ? '-90' : '0') + 'deg)', height: '48px'}\" type=\"text\" @click=\"toggleClick\">\n                        <Icon type=\"md-menu\" size=\"32\"></Icon>\n                    </Button>\n                </div>\n                <div class=\"header-middle-con\">\n                    <div class=\"main-breadcrumb\" v-if=\"navType==4\">\n                        <breadcrumb-nav :currentPath=\"currentPath\"></breadcrumb-nav>\n                    </div>\n                    <div class=\"main-nav-menu\" v-if=\"navType==1||navType==2\">\n                        <Menu mode=\"horizontal\" :active-name=\"currNav\" @on-select=\"selectNav\">\n                            <MenuItem v-for=\"(item, i) in navList.slice(0, sliceNum)\" :key=\"i\" :name=\"item.name\">\n                            <Icon :type=\"item.icon\" v-if=\"navType==1\" />\n                            {{item.title}}\n                            </MenuItem>\n                            <Submenu name=\"sub\" v-if=\"navList.length>sliceNum\">\n                                <template slot=\"title\">more</template>\n                                <MenuItem v-for=\"(item, i) in navList.slice(sliceNum, navList.length)\" :key=\"i\" :name=\"item.name\">\n                                <Icon :type=\"item.icon\" v-if=\"navType==1\" />\n                                {{item.title}}\n                                </MenuItem>\n                            </Submenu>\n                        </Menu>\n                    </div>\n                    <div class=\"main-nav\" v-if=\"navType==3\">\n                        <Dropdown transfer @on-click=\"selectNav\">\n                            <div style=\"cursor: pointer\">\n                                {{currNavTitle}}\n                                <Icon type=\"ios-arrow-down\"></Icon>\n                            </div>\n                            <DropdownMenu slot=\"list\">\n                                <DropdownItem v-for=\"(item, i) in navList\" :key=\"i\" :name=\"item.name\" :selected=\"currNav==item.name\">\n                                    <div class=\"nav-item\">\n                                        <Icon :type=\"item.icon\" :size=\"16\" style=\"margin: 0 10px 3px 0\"></Icon>\n                                        {{item.title}}\n                                    </div>\n                                </DropdownItem>\n                            </DropdownMenu>\n                        </Dropdown>\n                    </div>\n                </div>\n                <div :class=\"{'header-avator-con':navType!=4, 'header-avator-con nav4':navType==4}\">\n                    <Dropdown @on-click=\"selectNav\" class=\"options\" v-if=\"navType==4\">\n                        <Icon type=\"ios-apps\" :size=\"24\" class=\"language\"></Icon>\n                        <DropdownMenu slot=\"list\">\n                            <DropdownItem v-for=\"(item, i) in navList\" :key=\"i\" :name=\"item.name\" :selected=\"currNav==item.name\">\n                                <div>\n                                    <Icon :type=\"item.icon\" :size=\"14\" style=\"margin: 0 10px 2px 0\"></Icon>\n                                    {{item.title}}\n                                </div>\n                            </DropdownItem>\n                        </DropdownMenu>\n                    </Dropdown>\n                    <full-screen v-model=\"isFullScreen\" @on-change=\"fullscreenChange\"></full-screen>\n                    <lock-screen></lock-screen>\n                    <div class=\"user-dropdown-menu-con\">\n                        <Row type=\"flex\" justify=\"end\" align=\"middle\" class=\"user-dropdown-innercon\">\n                            <Dropdown transfer trigger=\"hover\" @on-click=\"handleClickUserDropdown\">\n                                <a>\n                                    <span class=\"main-user-name\">{{ username }}</span>\n                                    <Icon type=\"md-arrow-dropdown\" />\n                                    <Avatar :src=\"avatarPath\" style=\"background: #619fe7;margin-left: 10px;\"></Avatar>\n                                </a>\n                                <DropdownMenu slot=\"list\">\n                                    <DropdownItem name=\"changePass\">Change Password</DropdownItem>\n                                    <DropdownItem name=\"ownSpace\">Personal Portal</DropdownItem>\n                                    <DropdownItem name=\"loginout\" divided>Exit</DropdownItem>\n                                </DropdownMenu>\n                            </Dropdown>\n                        </Row>\n                    </div>\n                </div>\n            </div>\n            <div class=\"tags-con\">\n                <tags-page-opened :pageTagsList=\"pageTagsList\"></tags-page-opened>\n            </div>\n        </div>\n        <div class=\"single-page-con\" :style=\"{left: shrink?'60px':'220px'}\">\n            <div class=\"single-page\">\n                <keep-alive :include=\"cachePage\">\n                    <router-view></router-view>\n                </keep-alive>\n            </div>\n        </div>\n        <circleLoading class=\"loading-position\" v-show=\"loading\" />\n    </div>\n    </template>\n    \n    <script>\n    import shrinkableMenu from \"./main-components/shrinkable-menu/shrinkable-menu.vue\";\n    import tagsPageOpened from \"./main-components/tags-page-opened.vue\";\n    import breadcrumbNav from \"./main-components/breadcrumb-nav.vue\";\n    import fullScreen from \"./main-components/fullscreen.vue\";\n    import lockScreen from \"./main-components/lockscreen/lockscreen.vue\";\n    import circleLoading from \"@/views/template/circle-loading.vue\";\n    import Cookies from \"js-cookie\";\n    import util from \"@/libs/util.js\";\n    export default {\n        components: {\n            shrinkableMenu,\n            tagsPageOpened,\n            breadcrumbNav,\n            fullScreen,\n            lockScreen,\n            circleLoading\n        },\n        data() {\n            return {\n                sliceNum: 3,\n                shrink: false,\n                username: \"\",\n                userId: \"\",\n                isFullScreen: false,\n                openedSubmenuArr: this.$store.state.app.openedSubmenuArr,\n                lastNav: [],\n                navType: 1\n            };\n        },\n        computed: {\n            loading() {\n                return this.$store.state.app.loading;\n            },\n            navList() {\n                return this.$store.state.app.navList;\n            },\n            currNav() {\n                return this.$store.state.app.currNav;\n            },\n            currNavTitle() {\n                return this.$store.state.app.currNavTitle;\n            },\n            menuList() {\n                return this.$store.state.app.menuList;\n            },\n            pageTagsList() {\n                return this.$store.state.app.pageOpenedList; // Opened page objects\n            },\n            currentPath() {\n                return this.$store.state.app.currentPath; // Current breadcrumb array\n            },\n            avatarPath() {\n                return localStorage.avatorImgPath;\n            },\n            cachePage() {\n                return this.$store.state.app.cachePage;\n            },\n            lang() {\n                return this.$store.state.app.lang;\n            },\n            menuTheme() {\n                return this.$store.state.app.menuTheme;\n            },\n            mesCount() {\n                return this.$store.state.app.messageCount;\n            }\n        },\n        methods: {\n            init() {\n                // Menu\n                let pathArr = util.setCurrentPath(this, this.$route.name);\n                // this.$store.commit(\"updateMenulist\");\n                if (pathArr.length >= 2) {\n                    this.$store.commit(\"addOpenSubmenu\", pathArr[1].name);\n                }\n                let userInfo = JSON.parse(Cookies.get(\"userInfo\"));\n                console.log(\"Current user information:\", userInfo);\n                this.username = userInfo.nickname;\n                this.userId = userInfo.id;\n                this.checkTag(this.$route.name);\n                let currWidth = document.body.clientWidth;\n                if (currWidth <= 1200) {\n                    this.sliceNum = 2;\n                }\n            },\n            selectNav(name) {\n                this.$store.commit(\"setCurrNav\", name);\n                this.setStore(\"currNav\", name);\n                // Clear all opened tags\n                this.$store.commit(\"clearAllTags\");\n                if (this.$route.name != \"home_index\") {\n                    this.$router.push({\n                        name: \"home_index\"\n                    });\n                }\n                util.initRouter(this);\n            },\n            toggleClick() {\n                this.shrink = !this.shrink;\n            },\n            handleClickUserDropdown(name) {\n                if (name == \"ownSpace\") {\n                    util.openNewPage(this, \"my_home_index\");\n                    this.$router.push({\n                        name: \"my_home_index\"\n                    });\n                } else if (name == \"changePass\") {\n                    util.openNewPage(this, \"password\");\n                    this.$router.push({\n                        name: \"password\"\n                    });\n                } else if (name == \"loginout\") {\n                    // Logout\n                    this.$store.commit(\"setLoading\", false);\n                    this.$store.commit(\"setLoading\", true);\n                    this.$store.commit(\"logout\", this);\n                    this.$store.commit(\"clearOpenedSubmenu\");\n                    this.setStore(\"accessToken\", \"\");\n                    // Force refresh the page to reload the router\n                    location.reload();\n                }\n            },\n            checkTag(name) {\n                let openpageHasTag = this.pageTagsList.some(item => {\n                    if (item.name == name) {\n                        return true;\n                    }\n                });\n                if (!openpageHasTag) {\n                    // Fix the issue of having no tags after closing the current tag and then clicking the back button to return to the current page\n                    util.openNewPage(\n                        this,\n                        name,\n                        this.$route.params || {},\n                        this.$route.query || {}\n                    );\n                }\n            },\n            handleSubmenuChange(val) {},\n            beforePush(name) {\n                return true;\n            },\n            fullscreenChange(isFullScreen) {},\n            resize() {\n                let currWidth = document.body.clientWidth;\n                if (currWidth <= 1200 && currWidth > 900) {\n                    this.sliceNum = 2;\n                    this.shrink = true;\n                } else if (currWidth <= 900) {\n                    this.sliceNum = 1;\n                    this.shrink = true;\n                } else {\n                    this.sliceNum = 3;\n                    this.shrink = false;\n                }\n            }\n        },\n        watch: {\n            $route(to) {\n                this.$store.commit(\"setCurrentPageName\", to.name);\n                let pathArr = util.setCurrentPath(this, to.name);\n                if (pathArr.length > 2) {\n                    this.$store.commit(\"addOpenSubmenu\", pathArr[1].name);\n                }\n                this.checkTag(to.name);\n                localStorage.currentPageName = to.name;\n            },\n            lang() {\n                util.setCurrentPath(this, this.$route.name); // Refresh breadcrumb when switching languages\n            }\n        },\n        mounted() {\n            this.init();\n            let that = this;\n            this.resize();\n            window.addEventListener(\"resize\", function () {\n                that.resize();\n            });\n        },\n        created() {\n            // Display the list of opened pages\n            this.$store.commit(\"setOpenedList\");\n        }\n    };\n    </script>\n    \n    <style lang=\"less\">\n    @import \"./main.less\";\n    </style>\n    "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}