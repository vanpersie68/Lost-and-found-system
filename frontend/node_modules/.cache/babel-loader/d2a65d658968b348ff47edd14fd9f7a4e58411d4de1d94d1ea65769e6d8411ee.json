{"ast":null,"code":"import { addPermission, editPermission, deletePermission, searchPermission, getDictDataByType, getUserByPermission } from \"./api.js\";\nimport IconChoose from \"@/views/template/icon-choose\";\nimport util from \"@/libs/util.js\";\nexport default {\n  name: \"menu\",\n  components: {\n    IconChoose\n  },\n  data() {\n    return {\n      userByPermissionLoading: false,\n      loading: true,\n      strict: true,\n      maxHeight: 500,\n      menuModalVisible: false,\n      iconModalVisible: false,\n      selectList: [],\n      selectCount: 0,\n      showParent: false,\n      searchKey: \"\",\n      parentTitle: \"\",\n      editTitle: \"\",\n      modalTitle: \"\",\n      form: {\n        id: \"\",\n        title: \"\",\n        name: \"\",\n        icon: \"\",\n        path: \"\",\n        component: \"\",\n        parentId: \"\",\n        buttonType: \"\",\n        type: 0,\n        sortOrder: 0,\n        level: 0,\n        status: 0,\n        url: \"\"\n      },\n      formAdd: {\n        buttonType: \"\"\n      },\n      formValidate: {\n        title: [{\n          required: true,\n          message: \"Menu name cannot be empty\",\n          trigger: \"blur\"\n        }],\n        name: [{\n          required: true,\n          message: \"Route English name cannot be empty\",\n          trigger: \"blur\"\n        }],\n        icon: [{\n          required: true,\n          message: \"Icon cannot be empty\",\n          trigger: \"click\"\n        }],\n        path: [{\n          required: true,\n          message: \"Path cannot be empty\",\n          trigger: \"blur\"\n        }],\n        component: [{\n          required: true,\n          message: \"Corresponding location cannot be empty\",\n          trigger: \"blur\"\n        }],\n        sortOrder: [{\n          required: true,\n          type: \"number\",\n          message: \"Sort order cannot be empty\",\n          trigger: \"blur\"\n        }]\n      },\n      submitLoading: false,\n      data: [],\n      dictPermissions: [],\n      userByPermissionList: [],\n      userByPermissionColumns: [{\n        title: \"Username\",\n        key: \"userName\",\n        minWidth: 120,\n        tooltip: true,\n        sortable: false\n      }, {\n        title: \"Corresponding Role\",\n        key: \"roleStr\",\n        minWidth: 200,\n        tooltip: true,\n        sortable: false\n      }, {\n        title: \"Login Account\",\n        key: \"code\",\n        minWidth: 120,\n        tooltip: true,\n        sortable: false\n      }, {\n        title: \"User Phone\",\n        key: \"mobile\",\n        minWidth: 120,\n        tooltip: true,\n        sortable: false\n      }, {\n        title: \"User Identifier\",\n        key: \"userId\",\n        minWidth: 120,\n        tooltip: true,\n        sortable: false\n      }]\n    };\n  },\n  methods: {\n    init() {\n      this.getPermissionList();\n      this.getDictPermissions();\n    },\n    changeFormPath() {\n      this.form.name = this.form.path;\n    },\n    changeFormName() {\n      this.form.path = this.form.name;\n    },\n    getDictPermissions() {\n      getDictDataByType(\"permission_type\").then(res => {\n        if (res.success) {\n          this.dictPermissions = res.result;\n        }\n      });\n    },\n    renderContent(h, {\n      root,\n      node,\n      data\n    }) {\n      let icon = \"\";\n      if (data.level == 0) {\n        icon = \"ios-navigate\";\n      } else if (data.level == 1) {\n        icon = \"md-list-box\";\n      } else if (data.level == 2) {\n        icon = \"md-list\";\n      } else if (data.level == 3) {\n        icon = \"md-radio-button-on\";\n      } else {\n        icon = \"md-radio-button-off\";\n      }\n      return h(\"span\", [h(\"span\", [h(\"Icon\", {\n        props: {\n          type: icon,\n          size: \"16\"\n        },\n        style: {\n          \"margin-right\": \"8px\",\n          \"margin-bottom\": \"3px\"\n        }\n      }), h(\"span\", data.title)])]);\n    },\n    getPermissionList() {\n      this.loading = true;\n      this.getRequest(\"/permission/getAllList\").then(res => {\n        this.loading = false;\n        if (res.success) {\n          this.data = res.result;\n        }\n      });\n    },\n    search() {\n      if (this.searchKey) {\n        this.loading = true;\n        searchPermission({\n          title: this.searchKey\n        }).then(res => {\n          this.loading = false;\n          if (res.success) {\n            this.data = res.result;\n          }\n        });\n      } else {\n        this.getPermissionList();\n      }\n    },\n    selectTree(v) {\n      if (v.length > 0) {\n        // Convert null to \"\"\n        for (let attr in v[0]) {\n          if (v[0][attr] == null) {\n            v[0][attr] = \"\";\n          }\n        }\n        let str = JSON.stringify(v[0]);\n        let menu = JSON.parse(str);\n        this.form = menu;\n        this.editTitle = menu.title;\n        this.getUserByPermission();\n      } else {\n        this.cancelEdit();\n        this.userByPermissionList = [];\n      }\n    },\n    getUserByPermission() {\n      var that = this;\n      that.userByPermissionLoading = true;\n      getUserByPermission({\n        permissionId: that.form.id\n      }).then(res => {\n        that.userByPermissionLoading = false;\n        if (res.success) {\n          that.userByPermissionList = res.result;\n        }\n      });\n    },\n    cancelEdit() {\n      let data = this.$refs.tree.getSelectedNodes()[0];\n      if (data) {\n        data.selected = false;\n      }\n      this.$refs.form.resetFields();\n      this.form.id = \"\";\n      this.editTitle = \"\";\n    },\n    handleReset() {\n      let type = this.form.type;\n      this.$refs.form.resetFields();\n      this.form.icon = \"\";\n      this.form.component = \"\";\n      this.form.type = type;\n    },\n    submitEdit() {\n      if (!this.form.id) {\n        this.$Message.warning(\"Please select the menu node to be edited first\");\n        return;\n      }\n      this.submitLoading = true;\n      if (this.form.sortOrder == null) {\n        this.form.sortOrder = \"\";\n      }\n      if (this.form.buttonType == null) {\n        this.form.buttonType = \"\";\n      }\n      if (this.form.type == 1) {\n        this.form.name = \"\";\n        this.form.icon = \"\";\n        this.form.component = \"\";\n      }\n      delete this.form.updateTime;\n      delete this.form.children;\n      editPermission(this.form).then(res => {\n        this.submitLoading = false;\n        if (res.success) {\n          this.$Message.success(\"Edit successful\");\n          // Mark to retrieve menu data again\n          this.$store.commit(\"setAdded\", false);\n          util.initRouter(this);\n          this.init();\n          this.menuModalVisible = false;\n        }\n      });\n    },\n    submitAdd() {\n      this.$refs.formAdd.validate(valid => {\n        if (valid) {\n          this.submitLoading = true;\n          if (this.formAdd.type == 1) {\n            this.formAdd.name = \"\";\n            this.formAdd.icon = \"\";\n            this.formAdd.component = \"\";\n          }\n          addPermission(this.formAdd).then(res => {\n            this.submitLoading = false;\n            if (res.success) {\n              this.$Message.success(\"Add successful\");\n              this.$store.commit(\"setAdded\", false);\n              util.initRouter(this);\n              this.init();\n              this.menuModalVisible = false;\n            }\n          });\n        }\n      });\n    },\n    addMenu() {\n      if (!this.form.id) {\n        this.modalTitle = \"Add Top Menu (Draggable)\";\n        this.showParent = false;\n        this.formAdd = {\n          type: -1,\n          level: 0,\n          sortOrder: 0,\n          status: 0\n        };\n        this.menuModalVisible = true;\n        return;\n      }\n      this.parentTitle = this.form.title;\n      this.modalTitle = \"Add Child Node\";\n      this.showParent = true;\n      let type = 0;\n      if (this.form.level == 1) {\n        type = 0;\n      } else if (this.form.level == 2) {\n        type = 1;\n      } else if (this.form.level == 3) {\n        this.$Modal.warning({\n          title: \"Sorry, cannot add\",\n          content: \"Supports only 2 levels of menu directory\"\n        });\n        return;\n      } else {\n        type = 0;\n      }\n      let component = \"\";\n      this.formAdd = {\n        icon: \"\",\n        type: type,\n        parentId: this.form.id,\n        level: Number(this.form.level) + 1,\n        sortOrder: 0,\n        buttonType: \"\",\n        status: 0\n      };\n      if (this.form.level == 0) {\n        this.formAdd.path = \"/\";\n        this.formAdd.component = \"Main\";\n      } else if (this.form.level == 2) {\n        this.formAdd.path = \"None\";\n      }\n      this.menuModalVisible = true;\n    },\n    changeSelect(v) {\n      this.selectCount = v.length;\n      this.selectList = v;\n    },\n    deletePermissionFx() {\n      if (this.selectCount <= 0) {\n        this.$Message.warning(\"Please select the menu to delete\");\n        return;\n      }\n      this.$Modal.confirm({\n        title: \"Confirm Delete\",\n        content: \"Are you sure you want to delete the selected \" + this.selectCount + \" records?\",\n        loading: true,\n        onOk: () => {\n          let ids = \"\";\n          this.selectList.forEach(function (e) {\n            ids += e.id + \",\";\n          });\n          ids = ids.substring(0, ids.length - 1);\n          deletePermission({\n            ids: ids\n          }).then(res => {\n            this.$Modal.remove();\n            if (res.success) {\n              this.$Message.success(\"Delete successful\");\n              this.$store.commit(\"setAdded\", false);\n              util.initRouter(this);\n              this.selectList = [];\n              this.selectCount = 0;\n              this.cancelEdit();\n              this.init();\n            }\n          });\n        }\n      });\n    }\n  },\n  mounted() {\n    let height = document.documentElement.clientHeight;\n    this.maxHeight = Number(height - 260);\n    this.init();\n  }\n};","map":{"version":3,"names":["addPermission","editPermission","deletePermission","searchPermission","getDictDataByType","getUserByPermission","IconChoose","util","name","components","data","userByPermissionLoading","loading","strict","maxHeight","menuModalVisible","iconModalVisible","selectList","selectCount","showParent","searchKey","parentTitle","editTitle","modalTitle","form","id","title","icon","path","component","parentId","buttonType","type","sortOrder","level","status","url","formAdd","formValidate","required","message","trigger","submitLoading","dictPermissions","userByPermissionList","userByPermissionColumns","key","minWidth","tooltip","sortable","methods","init","getPermissionList","getDictPermissions","changeFormPath","changeFormName","then","res","success","result","renderContent","h","root","node","props","size","style","getRequest","search","selectTree","v","length","attr","str","JSON","stringify","menu","parse","cancelEdit","that","permissionId","$refs","tree","getSelectedNodes","selected","resetFields","handleReset","submitEdit","$Message","warning","updateTime","children","$store","commit","initRouter","submitAdd","validate","valid","addMenu","$Modal","content","Number","changeSelect","deletePermissionFx","confirm","onOk","ids","forEach","e","substring","remove","mounted","height","document","documentElement","clientHeight"],"sources":["src/views/menu/menu/index.vue"],"sourcesContent":["<template>\n    <div class=\"search\">\n        <Card>\n            <Row :gutter=\"16\">\n                <Col span=\"7\">\n                <Row :gutter=\"16\">\n                    <Col span=\"23\">\n                    <div class=\"tree-bar\" style=\"overflow-y: scroll;padding-right: 50px;\" :style=\"{maxHeight: maxHeight + 'px'}\">\n                        <Tree ref=\"tree\" :data=\"data\" show-checkbox :render=\"renderContent\" @on-select-change=\"selectTree\" @on-check-change=\"changeSelect\" :check-strictly=\"!strict\"></Tree>\n                        <Spin size=\"large\" fix v-if=\"loading\"></Spin>\n                    </div>\n                    </Col>\n                </Row>\n                </Col>\n                <Col span=\"15\">\n                <Row class=\"operation\">\n                    <Col span=\"12\">\n                    <Button @click=\"addMenu\" type=\"primary\" shape=\"circle\" ghost icon=\"md-add\" :disabled=\"!$route.meta.permTypes.includes('add')\">Add Menu</Button>\n                    <Button @click=\"deletePermissionFx\" type=\"error\" shape=\"circle\" ghost icon=\"md-trash\" :disabled=\"!$route.meta.permTypes.includes('delete')\">Delete Menu</Button>\n                    <Button @click=\"getPermissionList\" type=\"success\" shape=\"circle\" ghost icon=\"md-trash\">Refresh Menu</Button>\n                    <i-switch v-model=\"strict\" size=\"large\" style=\"margin-left:5px\">\n                        <span slot=\"open\">Cascade</span>\n                        <span slot=\"close\">Single Select</span>\n                    </i-switch>\n                    </Col>\n                    <Col span=\"12\">\n                    <Input v-model=\"searchKey\" suffix=\"ios-search\" @on-change=\"search\" placeholder=\"Simulate Search Menu\" clearable />\n                    </Col>\n                </Row>\n                <Divider dashed />\n                <Row :gutter=\"16\" v-show=\"form.id\">\n                    <Col span=\"24\">\n                    <Alert show-icon type=\"success\">\n                        Current selected menu:\n                        <span class=\"select-title\">{{editTitle}}</span>\n                        <Divider type=\"vertical\" />\n                        <a class=\"select-clear\" @click=\"cancelEdit\">Cancel Selection</a>\n                    </Alert>\n                    </Col>\n                    <Divider dashed />\n                </Row>\n                <Form ref=\"form\" :model=\"form\" :label-width=\"130\" :rules=\"formValidate\">\n                    <Row :gutter=\"16\">\n                        <Col span=\"12\">\n                        <FormItem label=\"Type\" prop=\"type\">\n                            <div v-show=\"form.type==-1\">\n                                <Icon type=\"ios-navigate-outline\" size=\"16\" style=\"margin-right:5px;\"></Icon>\n                                <span>Top Menu</span>\n                            </div>\n                            <div v-show=\"form.type==0\">\n                                <Icon type=\"ios-list-box-outline\" size=\"16\" style=\"margin-right:5px;\"></Icon>\n                                <span>Page Menu</span>\n                            </div>\n                            <div v-show=\"form.type==1\">\n                                <Icon type=\"md-radio-button-on\" size=\"16\" style=\"margin-right:5px;\"></Icon>\n                                <span>Button-Level Permission</span>\n                            </div>\n                        </FormItem>\n                        </Col>\n                        <Col span=\"12\" v-show=\"form.type==-1||form.type==0\">\n                        <FormItem label=\"Name\" prop=\"title\">\n                            <Input v-model=\"form.title\" style=\"width:100%\" />\n                        </FormItem>\n                        </Col>\n                        <Col span=\"12\" v-show=\"form.type==1\">\n                        <FormItem label=\"Name\" prop=\"title\">\n                            <Input v-model=\"form.title\" placeholder=\"Operation button name must be unique\" style=\"width:100%\" />\n                        </FormItem>\n                        </Col>\n                        <Col span=\"12\" v-show=\"form.type==0\">\n                        <FormItem label=\"Path\" prop=\"path\">\n                            <Input v-model=\"form.path\" @on-blur=\"changeFormPath\" style=\"width:100%\" />\n                        </FormItem>\n                        </Col>\n                        <Col span=\"12\" v-show=\"form.type==1\">\n                        <FormItem label=\"Button Permission Type\" prop=\"buttonType\">\n                            <Select v-model=\"form.buttonType\" placeholder=\"Select or enter search\" filterable clearable style=\"width:100%\">\n                                <Option v-for=\"(item, i) in dictPermissions\" :key=\"i\" :value=\"item.value\">{{item.title}}</Option>\n                            </Select>\n                        </FormItem>\n                        </Col>\n                        <Col span=\"12\" v-show=\"form.type==-1\">\n                        <FormItem :label=\"form.type==-1? 'English Name' : 'Route English Name'\" prop=\"name\">\n                            <Input v-model=\"form.name\" @on-blur=\"changeFormName\" placeholder=\"Must be unique\" style=\"width:100%\" />\n                        </FormItem>\n                        </Col>\n                        <Col span=\"12\" v-show=\"form.type==-1||form.type==0\">\n                        <FormItem label=\"Icon\" prop=\"icon\">\n                            <icon-choose v-model=\"form.icon\"></icon-choose>\n                        </FormItem>\n                        </Col>\n                        <Col span=\"12\" v-show=\"form.type==0\">\n                        <FormItem label=\"Corresponding Location\" prop=\"component\">\n                            <Input v-model=\"form.component\" style=\"width:100%\" />\n                        </FormItem>\n                        </Col>\n                        <Col span=\"12\">\n                        <FormItem label=\"Sort Order\" prop=\"sortOrder\">\n                            <InputNumber :max=\"1000\" :min=\"0\" v-model=\"form.sortOrder\" style=\"width:100%\"></InputNumber>\n                        </FormItem>\n                        </Col>\n                        <Col span=\"12\">\n                        <FormItem label=\"Enabled\" prop=\"status\">\n                            <i-switch size=\"large\" v-model=\"form.status\" :true-value=\"0\" :false-value=\"-1\">\n                                <span slot=\"open\">Enabled</span>\n                                <span slot=\"close\">Disabled</span>\n                            </i-switch>\n                        </FormItem>\n                        </Col>\n                        <Col span=\"12\">\n                        <Form-item>\n                            <Button style=\"margin-right:5px\" @click=\"submitEdit\" ghost shape=\"circle\" :loading=\"submitLoading\" type=\"primary\" icon=\"ios-create-outline\" :disabled=\"!$route.meta.permTypes.includes('edit')\">Save Menu</Button>\n                        </Form-item>\n                        </Col>\n                    </Row>\n                </Form>\n                <Divider>Users with {{form.title}} permission</Divider>\n                <Row :gutter=\"16\">\n                    <Table :loading=\"userByPermissionLoading\" border stripe size=\"small\" :columns=\"userByPermissionColumns\" :data=\"userByPermissionList\"></Table>\n                </Row>\n                </Col>\n            </Row>\n        </Card>\n    \n        <Modal draggable :title=\"modalTitle\" v-model=\"menuModalVisible\" :mask=\"false\" :width=\"500\" :styles=\"{top: '30px'}\">\n            <Form ref=\"formAdd\" :model=\"formAdd\" :label-width=\"100\" :rules=\"formValidate\">\n                <div v-if=\"showParent\">\n                    <FormItem label=\"Parent Node:\">{{parentTitle}}</FormItem>\n                </div>\n                <FormItem label=\"Type\" prop=\"type\">\n                    <div v-show=\"formAdd.type==-1\">\n                        <Icon type=\"ios-navigate-outline\" size=\"16\" style=\"margin-right:5px;\"></Icon>\n                        <span>Top Menu</span>\n                    </div>\n                    <div v-show=\"formAdd.type==0\">\n                        <Icon type=\"ios-list-box-outline\" size=\"16\" style=\"margin-right:5px;\"></Icon>\n                        <span>Page Menu</span>\n                    </div>\n                    <div v-show=\"formAdd.type==1\">\n                        <Icon type=\"md-radio-button-on\" size=\"16\" style=\"margin-right:5px;\"></Icon>\n                        <span>Operation Button</span>\n                    </div>\n                </FormItem>\n                <FormItem label=\"Name\" prop=\"title\" v-if=\"formAdd.type==-1||formAdd.type==0\">\n                    <Input v-model=\"formAdd.title\" />\n                </FormItem>\n                <FormItem label=\"Name\" prop=\"title\" v-if=\"formAdd.type==1\" class=\"block-tool\">\n                    <Tooltip placement=\"right\" content=\"Operation button name must be unique\">\n                        <Input v-model=\"formAdd.title\" />\n                    </Tooltip>\n                </FormItem>\n                <FormItem label=\"Path\" prop=\"path\" v-if=\"formAdd.type==0\">\n                    <Input v-model=\"formAdd.path\" />\n                </FormItem>\n                <FormItem label=\"Button Permission Type\" prop=\"buttonType\" v-if=\"formAdd.type==1\">\n                    <Select v-model=\"formAdd.buttonType\" placeholder=\"Select or enter search\" filterable clearable>\n                        <Option v-for=\"(item, i) in dictPermissions\" :key=\"i\" :value=\"item.value\">{{item.title}}</Option>\n                    </Select>\n                </FormItem>\n                <FormItem label=\"English Name\" prop=\"name\" v-if=\"formAdd.type==-1\" class=\"block-tool\">\n                    <Tooltip placement=\"right\" content=\"Must be unique\">\n                        <Input v-model=\"formAdd.name\" />\n                    </Tooltip>\n                </FormItem>\n                <FormItem label=\"Route English Name\" prop=\"name\" v-if=\"formAdd.type==0\" class=\"block-tool\">\n                    <Tooltip placement=\"right\" content=\"Must be unique\">\n                        <Input v-model=\"formAdd.name\" />\n                    </Tooltip>\n                </FormItem>\n                <FormItem label=\"Icon\" prop=\"icon\" v-if=\"formAdd.type==-1||formAdd.type==0\">\n                    <icon-choose v-model=\"formAdd.icon\"></icon-choose>\n                </FormItem>\n                <FormItem label=\"Corresponding Location\" prop=\"component\" v-if=\"formAdd.type==0\">\n                    <Input v-model=\"formAdd.component\" />\n                </FormItem>\n                <FormItem label=\"Sort Order\" prop=\"sortOrder\">\n                    <InputNumber :max=\"1000\" :min=\"0\" v-model=\"formAdd.sortOrder\"></InputNumber>\n                </FormItem>\n                <FormItem label=\"Enabled\" prop=\"status\">\n                    <i-switch size=\"large\" v-model=\"formAdd.status\" :true-value=\"0\" :false-value=\"-1\">\n                        <span slot=\"open\">Enabled</span>\n                        <span slot=\"close\">Disabled</span>\n                    </i-switch>\n                </FormItem>\n            </Form>\n            <div slot=\"footer\">\n                <Button type=\"text\" @click=\"menuModalVisible = false\">Cancel</Button>\n                <Button type=\"primary\" :loading=\"submitLoading\" @click=\"submitAdd\">Submit</Button>\n            </div>\n        </Modal>\n    </div>\n    </template>\n    \n    <script>\n    import {\n        addPermission,\n        editPermission,\n        deletePermission,\n        searchPermission,\n        getDictDataByType,\n        getUserByPermission\n    } from \"./api.js\";\n    import IconChoose from \"@/views/template/icon-choose\";\n    import util from \"@/libs/util.js\";\n    export default {\n        name: \"menu\",\n        components: {\n            IconChoose\n        },\n        data() {\n            return {\n                userByPermissionLoading: false,\n                loading: true,\n                strict: true,\n                maxHeight: 500,\n                menuModalVisible: false,\n                iconModalVisible: false,\n                selectList: [],\n                selectCount: 0,\n                showParent: false,\n                searchKey: \"\",\n                parentTitle: \"\",\n                editTitle: \"\",\n                modalTitle: \"\",\n                form: {\n                    id: \"\",\n                    title: \"\",\n                    name: \"\",\n                    icon: \"\",\n                    path: \"\",\n                    component: \"\",\n                    parentId: \"\",\n                    buttonType: \"\",\n                    type: 0,\n                    sortOrder: 0,\n                    level: 0,\n                    status: 0,\n                    url: \"\"\n                },\n                formAdd: {\n                    buttonType: \"\"\n                },\n                formValidate: {\n                    title: [{\n                        required: true,\n                        message: \"Menu name cannot be empty\",\n                        trigger: \"blur\"\n                    }],\n                    name: [{\n                        required: true,\n                        message: \"Route English name cannot be empty\",\n                        trigger: \"blur\"\n                    }],\n                    icon: [{\n                        required: true,\n                        message: \"Icon cannot be empty\",\n                        trigger: \"click\"\n                    }],\n                    path: [{\n                        required: true,\n                        message: \"Path cannot be empty\",\n                        trigger: \"blur\"\n                    }],\n                    component: [{\n                        required: true,\n                        message: \"Corresponding location cannot be empty\",\n                        trigger: \"blur\"\n                    }],\n                    sortOrder: [{\n                        required: true,\n                        type: \"number\",\n                        message: \"Sort order cannot be empty\",\n                        trigger: \"blur\"\n                    }]\n                },\n                submitLoading: false,\n                data: [],\n                dictPermissions: [],\n                userByPermissionList: [],\n                userByPermissionColumns: [{\n                    title: \"Username\",\n                    key: \"userName\",\n                    minWidth: 120,\n                    tooltip: true,\n                    sortable: false,\n                }, {\n                    title: \"Corresponding Role\",\n                    key: \"roleStr\",\n                    minWidth: 200,\n                    tooltip: true,\n                    sortable: false,\n                }, {\n                    title: \"Login Account\",\n                    key: \"code\",\n                    minWidth: 120,\n                    tooltip: true,\n                    sortable: false,\n                }, {\n                    title: \"User Phone\",\n                    key: \"mobile\",\n                    minWidth: 120,\n                    tooltip: true,\n                    sortable: false,\n                }, {\n                    title: \"User Identifier\",\n                    key: \"userId\",\n                    minWidth: 120,\n                    tooltip: true,\n                    sortable: false,\n                }]\n            };\n        },\n        methods: {\n            init() {\n                this.getPermissionList();\n                this.getDictPermissions();\n            },\n            changeFormPath() {\n                this.form.name = this.form.path;\n            },\n            changeFormName() {\n                this.form.path = this.form.name;\n            },\n            getDictPermissions() {\n                getDictDataByType(\"permission_type\").then(res => {\n                    if (res.success) {\n                        this.dictPermissions = res.result;\n                    }\n                });\n            },\n            renderContent(h, {\n                root,\n                node,\n                data\n            }) {\n                let icon = \"\";\n                if (data.level == 0) {\n                    icon = \"ios-navigate\";\n                } else if (data.level == 1) {\n                    icon = \"md-list-box\";\n                } else if (data.level == 2) {\n                    icon = \"md-list\";\n                } else if (data.level == 3) {\n                    icon = \"md-radio-button-on\";\n                } else {\n                    icon = \"md-radio-button-off\";\n                }\n                return h(\"span\", [\n                    h(\"span\", [\n                        h(\"Icon\", {\n                            props: {\n                                type: icon,\n                                size: \"16\"\n                            },\n                            style: {\n                                \"margin-right\": \"8px\",\n                                \"margin-bottom\": \"3px\"\n                            }\n                        }),\n                        h(\"span\", data.title)\n                    ])\n                ]);\n            },\n            getPermissionList() {\n                this.loading = true;\n                this.getRequest(\"/permission/getAllList\").then(res => {\n                    this.loading = false;\n                    if (res.success) {\n                        this.data = res.result;\n                    }\n                });\n            },\n            search() {\n                if (this.searchKey) {\n                    this.loading = true;\n                    searchPermission({\n                        title: this.searchKey\n                    }).then(res => {\n                        this.loading = false;\n                        if (res.success) {\n                            this.data = res.result;\n                        }\n                    });\n                } else {\n                    this.getPermissionList();\n                }\n            },\n            selectTree(v) {\n                if (v.length > 0) {\n                    // Convert null to \"\"\n                    for (let attr in v[0]) {\n                        if (v[0][attr] == null) {\n                            v[0][attr] = \"\";\n                        }\n                    }\n                    let str = JSON.stringify(v[0]);\n                    let menu = JSON.parse(str);\n                    this.form = menu;\n                    this.editTitle = menu.title;\n                    this.getUserByPermission();\n                } else {\n                    this.cancelEdit();\n                    this.userByPermissionList = [];\n                }\n            },\n            getUserByPermission() {\n                var that = this;\n                that.userByPermissionLoading = true;\n                getUserByPermission({\n                    permissionId: that.form.id\n                }).then(res => {\n                    that.userByPermissionLoading = false;\n                    if (res.success) {\n                        that.userByPermissionList = res.result;\n                    }\n                })\n            },\n            cancelEdit() {\n                let data = this.$refs.tree.getSelectedNodes()[0];\n                if (data) {\n                    data.selected = false;\n                }\n                this.$refs.form.resetFields();\n                this.form.id = \"\";\n                this.editTitle = \"\";\n            },\n            handleReset() {\n                let type = this.form.type;\n                this.$refs.form.resetFields();\n                this.form.icon = \"\";\n                this.form.component = \"\";\n                this.form.type = type;\n            },\n            submitEdit() {\n                if (!this.form.id) {\n                    this.$Message.warning(\"Please select the menu node to be edited first\");\n                    return;\n                }\n                this.submitLoading = true;\n                if (this.form.sortOrder == null) {\n                    this.form.sortOrder = \"\";\n                }\n                if (this.form.buttonType == null) {\n                    this.form.buttonType = \"\";\n                }\n                if (this.form.type == 1) {\n                    this.form.name = \"\";\n                    this.form.icon = \"\";\n                    this.form.component = \"\";\n                }\n                delete this.form.updateTime;\n                delete this.form.children;\n                editPermission(this.form).then(res => {\n                    this.submitLoading = false;\n                    if (res.success) {\n                        this.$Message.success(\"Edit successful\");\n                        // Mark to retrieve menu data again\n                        this.$store.commit(\"setAdded\", false);\n                        util.initRouter(this);\n                        this.init();\n                        this.menuModalVisible = false;\n                    }\n                });\n            },\n            submitAdd() {\n                this.$refs.formAdd.validate(valid => {\n                    if (valid) {\n                        this.submitLoading = true;\n                        if (this.formAdd.type == 1) {\n                            this.formAdd.name = \"\";\n                            this.formAdd.icon = \"\";\n                            this.formAdd.component = \"\";\n                        }\n                        addPermission(this.formAdd).then(res => {\n                            this.submitLoading = false;\n                            if (res.success) {\n                                this.$Message.success(\"Add successful\");\n                                this.$store.commit(\"setAdded\", false);\n                                util.initRouter(this);\n                                this.init();\n                                this.menuModalVisible = false;\n                            }\n                        });\n                    }\n                });\n            },\n            addMenu() {\n                if (!this.form.id) {\n                    this.modalTitle = \"Add Top Menu (Draggable)\";\n                    this.showParent = false;\n                    this.formAdd = {\n                        type: -1,\n                        level: 0,\n                        sortOrder: 0,\n                        status: 0\n                    };\n                    this.menuModalVisible = true;\n                    return;\n                }\n                this.parentTitle = this.form.title;\n                this.modalTitle = \"Add Child Node\";\n                this.showParent = true;\n                let type = 0;\n                if (this.form.level == 1) {\n                    type = 0;\n                } else if (this.form.level == 2) {\n                    type = 1;\n                } else if (this.form.level == 3) {\n                    this.$Modal.warning({\n                        title: \"Sorry, cannot add\",\n                        content: \"Supports only 2 levels of menu directory\"\n                    });\n                    return;\n                } else {\n                    type = 0;\n                }\n                let component = \"\";\n                this.formAdd = {\n                    icon: \"\",\n                    type: type,\n                    parentId: this.form.id,\n                    level: Number(this.form.level) + 1,\n                    sortOrder: 0,\n                    buttonType: \"\",\n                    status: 0\n                };\n                if (this.form.level == 0) {\n                    this.formAdd.path = \"/\";\n                    this.formAdd.component = \"Main\";\n                } else if (this.form.level == 2) {\n                    this.formAdd.path = \"None\";\n                }\n                this.menuModalVisible = true;\n            },\n            changeSelect(v) {\n                this.selectCount = v.length;\n                this.selectList = v;\n            },\n            deletePermissionFx() {\n                if (this.selectCount <= 0) {\n                    this.$Message.warning(\"Please select the menu to delete\");\n                    return;\n                }\n                this.$Modal.confirm({\n                    title: \"Confirm Delete\",\n                    content: \"Are you sure you want to delete the selected \" + this.selectCount + \" records?\",\n                    loading: true,\n                    onOk: () => {\n                        let ids = \"\";\n                        this.selectList.forEach(function (e) {\n                            ids += e.id + \",\";\n                        });\n                        ids = ids.substring(0, ids.length - 1);\n                        deletePermission({\n                            ids: ids\n                        }).then(res => {\n                            this.$Modal.remove();\n                            if (res.success) {\n                                this.$Message.success(\"Delete successful\");\n                                this.$store.commit(\"setAdded\", false);\n                                util.initRouter(this);\n                                this.selectList = [];\n                                this.selectCount = 0;\n                                this.cancelEdit();\n                                this.init();\n                            }\n                        });\n                    }\n                });\n            }\n        },\n        mounted() {\n            let height = document.documentElement.clientHeight;\n            this.maxHeight = Number(height - 260);\n            this.init();\n        }\n    };\n    </script>\n    "],"mappings":"AAkMA,SACAA,aAAA,EACAC,cAAA,EACAC,gBAAA,EACAC,gBAAA,EACAC,iBAAA,EACAC,mBAAA,QACA;AACA,OAAAC,UAAA;AACA,OAAAC,IAAA;AACA;EACAC,IAAA;EACAC,UAAA;IACAH;EACA;EACAI,KAAA;IACA;MACAC,uBAAA;MACAC,OAAA;MACAC,MAAA;MACAC,SAAA;MACAC,gBAAA;MACAC,gBAAA;MACAC,UAAA;MACAC,WAAA;MACAC,UAAA;MACAC,SAAA;MACAC,WAAA;MACAC,SAAA;MACAC,UAAA;MACAC,IAAA;QACAC,EAAA;QACAC,KAAA;QACAlB,IAAA;QACAmB,IAAA;QACAC,IAAA;QACAC,SAAA;QACAC,QAAA;QACAC,UAAA;QACAC,IAAA;QACAC,SAAA;QACAC,KAAA;QACAC,MAAA;QACAC,GAAA;MACA;MACAC,OAAA;QACAN,UAAA;MACA;MACAO,YAAA;QACAZ,KAAA;UACAa,QAAA;UACAC,OAAA;UACAC,OAAA;QACA;QACAjC,IAAA;UACA+B,QAAA;UACAC,OAAA;UACAC,OAAA;QACA;QACAd,IAAA;UACAY,QAAA;UACAC,OAAA;UACAC,OAAA;QACA;QACAb,IAAA;UACAW,QAAA;UACAC,OAAA;UACAC,OAAA;QACA;QACAZ,SAAA;UACAU,QAAA;UACAC,OAAA;UACAC,OAAA;QACA;QACAR,SAAA;UACAM,QAAA;UACAP,IAAA;UACAQ,OAAA;UACAC,OAAA;QACA;MACA;MACAC,aAAA;MACAhC,IAAA;MACAiC,eAAA;MACAC,oBAAA;MACAC,uBAAA;QACAnB,KAAA;QACAoB,GAAA;QACAC,QAAA;QACAC,OAAA;QACAC,QAAA;MACA;QACAvB,KAAA;QACAoB,GAAA;QACAC,QAAA;QACAC,OAAA;QACAC,QAAA;MACA;QACAvB,KAAA;QACAoB,GAAA;QACAC,QAAA;QACAC,OAAA;QACAC,QAAA;MACA;QACAvB,KAAA;QACAoB,GAAA;QACAC,QAAA;QACAC,OAAA;QACAC,QAAA;MACA;QACAvB,KAAA;QACAoB,GAAA;QACAC,QAAA;QACAC,OAAA;QACAC,QAAA;MACA;IACA;EA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}