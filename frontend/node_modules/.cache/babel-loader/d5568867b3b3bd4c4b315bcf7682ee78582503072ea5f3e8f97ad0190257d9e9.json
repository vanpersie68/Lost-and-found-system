{"ast":null,"code":"export default {\n  name: \"add\",\n  data() {\n    return {\n      loading: true,\n      // Form loading state\n      submitLoading: false,\n      // Form submission state\n      form: {\n        id: \"\",\n        name: \"\"\n      },\n      // Form validation rules\n      formValidate: {\n        name: [{\n          required: true,\n          message: \"Cannot be empty\",\n          // Error message if empty\n          trigger: \"blur\" // Trigger validation on blur\n        }]\n      },\n\n      backRoute: \"\" // Route to navigate back to\n    };\n  },\n\n  methods: {\n    init() {\n      this.backRoute = this.$route.query.backRoute; // Initialize the route to navigate back to\n    },\n\n    handleReset() {\n      this.$refs.form.resetFields(); // Reset the form fields\n    },\n\n    handleSubmit() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          // Simulate success (you can replace this with actual form submission)\n          this.submitLoading = false;\n          this.$Message.success(\"Added successfully\");\n          this.closeCurrentPage(); // Close the current page after successful submission\n        }\n      });\n    },\n\n    // Close the current page\n    closeCurrentPage() {\n      this.$store.commit(\"removeTag\", \"add\"); // Remove the 'add' tag from the store (if used for managing open pages)\n      localStorage.pageOpenedList = JSON.stringify(this.$store.state.app.pageOpenedList); // Save the updated page list to localStorage (if used for managing open pages)\n      this.$router.push({\n        name: this.backRoute // Navigate back to the specified route\n      });\n    }\n  },\n\n  watch: {\n    $route(to, from) {\n      if (to.name == \"add\") {\n        this.handleReset(); // Reset the form when the route is 'add'\n      }\n    }\n  },\n\n  mounted() {\n    this.init(); // Initialize the component\n  }\n};","map":{"version":3,"names":["name","data","loading","submitLoading","form","id","formValidate","required","message","trigger","backRoute","methods","init","$route","query","handleReset","$refs","resetFields","handleSubmit","validate","valid","$Message","success","closeCurrentPage","$store","commit","localStorage","pageOpenedList","JSON","stringify","state","app","$router","push","watch","to","from","mounted"],"sources":["src/views/template/add.vue"],"sourcesContent":["<style lang=\"less\">\n</style>\n\n<template>\n<div>\n    <Card>\n        <!-- Card Title -->\n        <p slot=\"title\">Add</p>\n        <Form ref=\"form\" :model=\"form\" :label-width=\"90\" :rules=\"formValidate\">\n            <!-- Form Item: Name -->\n            <FormItem label=\"Name\" prop=\"name\">\n                <Input v-model=\"form.name\" style=\"width: 400px\" />\n            </FormItem>\n            <!-- Form Buttons -->\n            <Form-item class=\"br\">\n                <!-- Submit Button -->\n                <Button @click=\"handleSubmit\" :loading=\"submitLoading\" type=\"primary\">Submit and Save</Button>\n                <!-- Reset Button -->\n                <Button @click=\"handleReset\">Reset</Button>\n            </Form-item>\n        </Form>\n    </Card>\n</div>\n</template>\n\n<script>\nexport default {\n    name: \"add\",\n    data() {\n        return {\n            loading: true, // Form loading state\n            submitLoading: false, // Form submission state\n            form: {\n                id: \"\",\n                name: \"\"\n            },\n            // Form validation rules\n            formValidate: {\n                name: [{\n                    required: true,\n                    message: \"Cannot be empty\", // Error message if empty\n                    trigger: \"blur\" // Trigger validation on blur\n                }]\n            },\n            backRoute: \"\" // Route to navigate back to\n        };\n    },\n    methods: {\n        init() {\n            this.backRoute = this.$route.query.backRoute; // Initialize the route to navigate back to\n        },\n        handleReset() {\n            this.$refs.form.resetFields(); // Reset the form fields\n        },\n        handleSubmit() {\n            this.$refs.form.validate(valid => {\n                if (valid) {\n                    // Simulate success (you can replace this with actual form submission)\n                    this.submitLoading = false;\n                    this.$Message.success(\"Added successfully\");\n                    this.closeCurrentPage(); // Close the current page after successful submission\n                }\n            });\n        },\n        // Close the current page\n        closeCurrentPage() {\n            this.$store.commit(\"removeTag\", \"add\"); // Remove the 'add' tag from the store (if used for managing open pages)\n            localStorage.pageOpenedList = JSON.stringify(\n                this.$store.state.app.pageOpenedList\n            ); // Save the updated page list to localStorage (if used for managing open pages)\n            this.$router.push({\n                name: this.backRoute // Navigate back to the specified route\n            });\n        }\n    },\n    watch: {\n        $route(to, from) {\n            if (to.name == \"add\") {\n                this.handleReset(); // Reset the form when the route is 'add'\n            }\n        }\n    },\n    mounted() {\n        this.init(); // Initialize the component\n    }\n};\n</script>\n"],"mappings":"AA0BA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MAAA;MACAC,aAAA;MAAA;MACAC,IAAA;QACAC,EAAA;QACAL,IAAA;MACA;MACA;MACAM,YAAA;QACAN,IAAA;UACAO,QAAA;UACAC,OAAA;UAAA;UACAC,OAAA;QACA;MACA;;MACAC,SAAA;IACA;EACA;;EACAC,OAAA;IACAC,KAAA;MACA,KAAAF,SAAA,QAAAG,MAAA,CAAAC,KAAA,CAAAJ,SAAA;IACA;;IACAK,YAAA;MACA,KAAAC,KAAA,CAAAZ,IAAA,CAAAa,WAAA;IACA;;IACAC,aAAA;MACA,KAAAF,KAAA,CAAAZ,IAAA,CAAAe,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA;UACA,KAAAjB,aAAA;UACA,KAAAkB,QAAA,CAAAC,OAAA;UACA,KAAAC,gBAAA;QACA;MACA;IACA;;IACA;IACAA,iBAAA;MACA,KAAAC,MAAA,CAAAC,MAAA;MACAC,YAAA,CAAAC,cAAA,GAAAC,IAAA,CAAAC,SAAA,CACA,KAAAL,MAAA,CAAAM,KAAA,CAAAC,GAAA,CAAAJ,cACA;MACA,KAAAK,OAAA,CAAAC,IAAA;QACAjC,IAAA,OAAAU,SAAA;MACA;IACA;EACA;;EACAwB,KAAA;IACArB,OAAAsB,EAAA,EAAAC,IAAA;MACA,IAAAD,EAAA,CAAAnC,IAAA;QACA,KAAAe,WAAA;MACA;IACA;EACA;;EACAsB,QAAA;IACA,KAAAzB,IAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}