{"ast":null,"code":"export default {\n  name: \"fullScreen\",\n  props: {\n    value: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    showFullScreenBtn() {\n      return window.navigator.userAgent.indexOf(\"MSIE\") < 0;\n    }\n  },\n  methods: {\n    handleFullscreen() {\n      let main = document.body;\n      if (this.value) {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.webkitCancelFullScreen) {\n          document.webkitCancelFullScreen();\n        } else if (document.msExitFullscreen) {\n          document.msExitFullscreen();\n        }\n      } else {\n        if (main.requestFullscreen) {\n          main.requestFullscreen();\n        } else if (main.mozRequestFullScreen) {\n          main.mozRequestFullScreen();\n        } else if (main.webkitRequestFullScreen) {\n          main.webkitRequestFullScreen();\n        } else if (main.msRequestFullscreen) {\n          main.msRequestFullscreen();\n        }\n      }\n    },\n    handleChange() {\n      this.handleFullscreen();\n    }\n  },\n  created() {\n    let isFullscreen = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;\n    isFullscreen = !!isFullscreen;\n    document.addEventListener(\"fullscreenchange\", () => {\n      this.$emit(\"input\", !this.value);\n      this.$emit(\"on-change\", !this.value);\n    });\n    document.addEventListener(\"mozfullscreenchange\", () => {\n      this.$emit(\"input\", !this.value);\n      this.$emit(\"on-change\", !this.value);\n    });\n    document.addEventListener(\"webkitfullscreenchange\", () => {\n      this.$emit(\"input\", !this.value);\n      this.$emit(\"on-change\", !this.value);\n    });\n    document.addEventListener(\"msfullscreenchange\", () => {\n      this.$emit(\"input\", !this.value);\n      this.$emit(\"on-change\", !this.value);\n    });\n    this.$emit(\"input\", isFullscreen);\n  }\n};","map":{"version":3,"names":["name","props","value","type","Boolean","default","computed","showFullScreenBtn","window","navigator","userAgent","indexOf","methods","handleFullscreen","main","document","body","exitFullscreen","mozCancelFullScreen","webkitCancelFullScreen","msExitFullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","handleChange","created","isFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","fullScreen","mozFullScreen","webkitIsFullScreen","addEventListener","$emit"],"sources":["src/views/main-components/fullscreen.vue"],"sourcesContent":["<template>\n    <div @click=\"handleChange\" v-if=\"showFullScreenBtn\" class=\"full-screen-btn-con\">\n        <Tooltip :content=\"value ? 'Exit Full Screen' : 'Full Screen'\" placement=\"bottom\">\n            <Icon :type=\"value ? 'ios-contract' : 'ios-expand'\" :size=\"24\"></Icon>\n        </Tooltip>\n    </div>\n    </template>\n    \n    <script>\n    export default {\n        name: \"fullScreen\",\n        props: {\n            value: {\n                type: Boolean,\n                default: false\n            }\n        },\n        computed: {\n            showFullScreenBtn() {\n                return window.navigator.userAgent.indexOf(\"MSIE\") < 0;\n            }\n        },\n        methods: {\n            handleFullscreen() {\n                let main = document.body;\n                if (this.value) {\n                    if (document.exitFullscreen) {\n                        document.exitFullscreen();\n                    } else if (document.mozCancelFullScreen) {\n                        document.mozCancelFullScreen();\n                    } else if (document.webkitCancelFullScreen) {\n                        document.webkitCancelFullScreen();\n                    } else if (document.msExitFullscreen) {\n                        document.msExitFullscreen();\n                    }\n                } else {\n                    if (main.requestFullscreen) {\n                        main.requestFullscreen();\n                    } else if (main.mozRequestFullScreen) {\n                        main.mozRequestFullScreen();\n                    } else if (main.webkitRequestFullScreen) {\n                        main.webkitRequestFullScreen();\n                    } else if (main.msRequestFullscreen) {\n                        main.msRequestFullscreen();\n                    }\n                }\n            },\n            handleChange() {\n                this.handleFullscreen();\n            }\n        },\n        created() {\n            let isFullscreen =\n                document.fullscreenElement ||\n                document.mozFullScreenElement ||\n                document.webkitFullscreenElement ||\n                document.fullScreen ||\n                document.mozFullScreen ||\n                document.webkitIsFullScreen;\n            isFullscreen = !!isFullscreen;\n            document.addEventListener(\"fullscreenchange\", () => {\n                this.$emit(\"input\", !this.value);\n                this.$emit(\"on-change\", !this.value);\n            });\n            document.addEventListener(\"mozfullscreenchange\", () => {\n                this.$emit(\"input\", !this.value);\n                this.$emit(\"on-change\", !this.value);\n            });\n            document.addEventListener(\"webkitfullscreenchange\", () => {\n                this.$emit(\"input\", !this.value);\n                this.$emit(\"on-change\", !this.value);\n            });\n            document.addEventListener(\"msfullscreenchange\", () => {\n                this.$emit(\"input\", !this.value);\n                this.$emit(\"on-change\", !this.value);\n            });\n            this.$emit(\"input\", isFullscreen);\n        }\n    };\n    </script>\n    "],"mappings":"AASA;EACAA,IAAA;EACAC,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACAC,kBAAA;MACA,OAAAC,MAAA,CAAAC,SAAA,CAAAC,SAAA,CAAAC,OAAA;IACA;EACA;EACAC,OAAA;IACAC,iBAAA;MACA,IAAAC,IAAA,GAAAC,QAAA,CAAAC,IAAA;MACA,SAAAd,KAAA;QACA,IAAAa,QAAA,CAAAE,cAAA;UACAF,QAAA,CAAAE,cAAA;QACA,WAAAF,QAAA,CAAAG,mBAAA;UACAH,QAAA,CAAAG,mBAAA;QACA,WAAAH,QAAA,CAAAI,sBAAA;UACAJ,QAAA,CAAAI,sBAAA;QACA,WAAAJ,QAAA,CAAAK,gBAAA;UACAL,QAAA,CAAAK,gBAAA;QACA;MACA;QACA,IAAAN,IAAA,CAAAO,iBAAA;UACAP,IAAA,CAAAO,iBAAA;QACA,WAAAP,IAAA,CAAAQ,oBAAA;UACAR,IAAA,CAAAQ,oBAAA;QACA,WAAAR,IAAA,CAAAS,uBAAA;UACAT,IAAA,CAAAS,uBAAA;QACA,WAAAT,IAAA,CAAAU,mBAAA;UACAV,IAAA,CAAAU,mBAAA;QACA;MACA;IACA;IACAC,aAAA;MACA,KAAAZ,gBAAA;IACA;EACA;EACAa,QAAA;IACA,IAAAC,YAAA,GACAZ,QAAA,CAAAa,iBAAA,IACAb,QAAA,CAAAc,oBAAA,IACAd,QAAA,CAAAe,uBAAA,IACAf,QAAA,CAAAgB,UAAA,IACAhB,QAAA,CAAAiB,aAAA,IACAjB,QAAA,CAAAkB,kBAAA;IACAN,YAAA,KAAAA,YAAA;IACAZ,QAAA,CAAAmB,gBAAA;MACA,KAAAC,KAAA,gBAAAjC,KAAA;MACA,KAAAiC,KAAA,oBAAAjC,KAAA;IACA;IACAa,QAAA,CAAAmB,gBAAA;MACA,KAAAC,KAAA,gBAAAjC,KAAA;MACA,KAAAiC,KAAA,oBAAAjC,KAAA;IACA;IACAa,QAAA,CAAAmB,gBAAA;MACA,KAAAC,KAAA,gBAAAjC,KAAA;MACA,KAAAiC,KAAA,oBAAAjC,KAAA;IACA;IACAa,QAAA,CAAAmB,gBAAA;MACA,KAAAC,KAAA,gBAAAjC,KAAA;MACA,KAAAiC,KAAA,oBAAAjC,KAAA;IACA;IACA,KAAAiC,KAAA,UAAAR,YAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}