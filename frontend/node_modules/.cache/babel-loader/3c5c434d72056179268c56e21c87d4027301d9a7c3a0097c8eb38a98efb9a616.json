{"ast":null,"code":"import \"viewerjs/dist/viewer.css\";\nimport Viewer from \"viewerjs\";\nimport { uploadFile } from \"@/api/index\";\nexport default {\n  name: \"uploadPicInput\",\n  props: {\n    value: String,\n    size: String,\n    placeholder: {\n      type: String,\n      default: \"Enter file link\"\n    },\n    buttonTitle: {\n      type: String,\n      default: \"Upload File\"\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    maxlength: Number,\n    icon: {\n      type: String,\n      default: \"ios-cloud-upload-outline\"\n    },\n    maxSize: {\n      type: Number,\n      default: 100\n    },\n    accept: {\n      type: String,\n      default: \".pdf\"\n    }\n  },\n  computed: {\n    format() {\n      if (this.accept) {\n        let format = [];\n        this.accept.split(\",\").forEach(e => {\n          format.push(e.replace(\".\", \"\").replace(\" \", \"\"));\n        });\n        return format;\n      } else {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      accessToken: {},\n      currentValue: this.value,\n      loading: false,\n      uploadFileUrl: uploadFile\n    };\n  },\n  methods: {\n    init() {\n      this.accessToken = {\n        accessToken: this.getStore(\"accessToken\")\n      };\n    },\n    handleFormatError(file) {\n      this.loading = false;\n      this.$Notice.warning({\n        title: \"Unsupported file format\",\n        desc: \"The selected file '\" + file.name + \"' has an incorrect format. Please select a file in \" + this.accept + \" format.\"\n      });\n    },\n    handleMaxSize(file) {\n      this.loading = false;\n      this.$Notice.warning({\n        title: \"File size too large\",\n        desc: \"The selected file '\" + file.name + \"' is too large. It must not exceed \" + this.maxSize + \" MB.\"\n      });\n    },\n    beforeUpload() {\n      this.loading = true;\n      return true;\n    },\n    handleSuccess(res, file) {\n      this.loading = false;\n      if (res.success) {\n        this.currentValue = res.result;\n        this.$emit(\"input\", this.currentValue);\n        this.$emit(\"on-change\", this.currentValue);\n      } else {\n        this.$Message.error(res.message);\n      }\n    },\n    handleError(error, file, fileList) {\n      this.loading = false;\n      this.$Message.error(error.toString());\n    },\n    handleChange(v) {\n      this.$emit(\"input\", this.currentValue);\n      this.$emit(\"on-change\", this.currentValue);\n    },\n    setCurrentValue(value) {\n      if (value === this.currentValue) {\n        return;\n      }\n      this.currentValue = value;\n      this.$emit(\"on-change\", this.currentValue);\n    }\n  },\n  watch: {\n    value(val) {\n      this.setCurrentValue(val);\n    }\n  },\n  mounted() {\n    this.init();\n  }\n};","map":{"version":3,"names":["Viewer","uploadFile","name","props","value","String","size","placeholder","type","default","buttonTitle","disabled","Boolean","readonly","maxlength","Number","icon","maxSize","accept","computed","format","split","forEach","e","push","replace","data","accessToken","currentValue","loading","uploadFileUrl","methods","init","getStore","handleFormatError","file","$Notice","warning","title","desc","handleMaxSize","beforeUpload","handleSuccess","res","success","result","$emit","$Message","error","message","handleError","fileList","toString","handleChange","v","setCurrentValue","watch","val","mounted"],"sources":["src/views/template/upload-file-input.vue"],"sourcesContent":["<template>\n  <div>\n    <div style=\"display:flex;\">\n      <Input\n        v-model=\"currentValue\"\n        @on-change=\"handleChange\"\n        :placeholder=\"placeholder\"\n        :size=\"size\"\n        :disabled=\"disabled\"\n        :readonly=\"readonly\"\n        :maxlength=\"maxlength\"\n        style=\"margin-right:10px;\"\n      >\n      </Input>\n      <Upload\n        :action=\"uploadFileUrl\"\n        :headers=\"accessToken\"\n        :on-success=\"handleSuccess\"\n        :on-error=\"handleError\"\n        :format=\"format\"\n        :accept=\"accept\"\n        :max-size=\"maxSize*1024\"\n        :on-format-error=\"handleFormatError\"\n        :on-exceeded-size=\"handleMaxSize\"\n        :before-upload=\"beforeUpload\"\n        :show-upload-list=\"false\"\n      >\n        <Button type=\"warning\" ghost :loading=\"loading\" :size=\"size\" :disabled=\"disabled\" :icon=\"icon\">{{buttonTitle}}</Button>\n      </Upload>\n    </div>\n  </div>\n</template>\n\n<script>\nimport \"viewerjs/dist/viewer.css\";\nimport Viewer from \"viewerjs\";\nimport { uploadFile } from \"@/api/index\";\n\nexport default {\n  name: \"uploadPicInput\",\n  props: {\n    value: String,\n    size: String,\n    placeholder: {\n      type: String,\n      default: \"Enter file link\"\n    },\n    buttonTitle: {\n      type: String,\n      default: \"Upload File\"\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    maxlength: Number,\n    icon: {\n      type: String,\n      default: \"ios-cloud-upload-outline\"\n    },\n    maxSize: {\n      type: Number,\n      default: 100\n    },\n    accept: {\n      type: String,\n      default: \".pdf\"\n    }\n  },\n  computed: {\n    format() {\n      if (this.accept) {\n        let format = [];\n        this.accept.split(\",\").forEach(e => {\n          format.push(e.replace(\".\", \"\").replace(\" \", \"\"));\n        });\n        return format;\n      } else {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      accessToken: {},\n      currentValue: this.value,\n      loading: false,\n      uploadFileUrl: uploadFile\n    };\n  },\n  methods: {\n    init() {\n      this.accessToken = {\n        accessToken: this.getStore(\"accessToken\")\n      };\n    },\n    handleFormatError(file) {\n      this.loading = false;\n      this.$Notice.warning({\n        title: \"Unsupported file format\",\n        desc:\n          \"The selected file '\" +\n          file.name +\n          \"' has an incorrect format. Please select a file in \"+this.accept+\" format.\"\n      });\n    },\n    handleMaxSize(file) {\n      this.loading = false;\n      this.$Notice.warning({\n        title: \"File size too large\",\n        desc:\n          \"The selected file '\" +\n          file.name +\n          \"' is too large. It must not exceed \" +\n          this.maxSize +\n          \" MB.\"\n      });\n    },\n    beforeUpload() {\n      this.loading = true;\n      return true;\n    },\n    handleSuccess(res, file) {\n      this.loading = false;\n      if (res.success) {\n        this.currentValue = res.result;\n        this.$emit(\"input\", this.currentValue);\n        this.$emit(\"on-change\", this.currentValue);\n      } else {\n        this.$Message.error(res.message);\n      }\n    },\n    handleError(error, file, fileList) {\n      this.loading = false;\n      this.$Message.error(error.toString());\n    },\n    handleChange(v) {\n      this.$emit(\"input\", this.currentValue);\n      this.$emit(\"on-change\", this.currentValue);\n    },\n    setCurrentValue(value) {\n      if (value === this.currentValue) {\n        return;\n      }\n      this.currentValue = value;\n      this.$emit(\"on-change\", this.currentValue);\n    }\n  },\n  watch: {\n    value(val) {\n      this.setCurrentValue(val);\n    }\n  },\n  mounted() {\n    this.init();\n  }\n};\n</script>\n"],"mappings":"AAkCA;AACA,OAAAA,MAAA;AACA,SAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACAC,KAAA,EAAAC,MAAA;IACAC,IAAA,EAAAD,MAAA;IACAE,WAAA;MACAC,IAAA,EAAAH,MAAA;MACAI,OAAA;IACA;IACAC,WAAA;MACAF,IAAA,EAAAH,MAAA;MACAI,OAAA;IACA;IACAE,QAAA;MACAH,IAAA,EAAAI,OAAA;MACAH,OAAA;IACA;IACAI,QAAA;MACAL,IAAA,EAAAI,OAAA;MACAH,OAAA;IACA;IACAK,SAAA,EAAAC,MAAA;IACAC,IAAA;MACAR,IAAA,EAAAH,MAAA;MACAI,OAAA;IACA;IACAQ,OAAA;MACAT,IAAA,EAAAO,MAAA;MACAN,OAAA;IACA;IACAS,MAAA;MACAV,IAAA,EAAAH,MAAA;MACAI,OAAA;IACA;EACA;EACAU,QAAA;IACAC,OAAA;MACA,SAAAF,MAAA;QACA,IAAAE,MAAA;QACA,KAAAF,MAAA,CAAAG,KAAA,MAAAC,OAAA,CAAAC,CAAA;UACAH,MAAA,CAAAI,IAAA,CAAAD,CAAA,CAAAE,OAAA,UAAAA,OAAA;QACA;QACA,OAAAL,MAAA;MACA;QACA;MACA;IACA;EACA;EACAM,KAAA;IACA;MACAC,WAAA;MACAC,YAAA,OAAAxB,KAAA;MACAyB,OAAA;MACAC,aAAA,EAAA7B;IACA;EACA;EACA8B,OAAA;IACAC,KAAA;MACA,KAAAL,WAAA;QACAA,WAAA,OAAAM,QAAA;MACA;IACA;IACAC,kBAAAC,IAAA;MACA,KAAAN,OAAA;MACA,KAAAO,OAAA,CAAAC,OAAA;QACAC,KAAA;QACAC,IAAA,EACA,wBACAJ,IAAA,CAAAjC,IAAA,GACA,6DAAAgB,MAAA;MACA;IACA;IACAsB,cAAAL,IAAA;MACA,KAAAN,OAAA;MACA,KAAAO,OAAA,CAAAC,OAAA;QACAC,KAAA;QACAC,IAAA,EACA,wBACAJ,IAAA,CAAAjC,IAAA,GACA,wCACA,KAAAe,OAAA,GACA;MACA;IACA;IACAwB,aAAA;MACA,KAAAZ,OAAA;MACA;IACA;IACAa,cAAAC,GAAA,EAAAR,IAAA;MACA,KAAAN,OAAA;MACA,IAAAc,GAAA,CAAAC,OAAA;QACA,KAAAhB,YAAA,GAAAe,GAAA,CAAAE,MAAA;QACA,KAAAC,KAAA,eAAAlB,YAAA;QACA,KAAAkB,KAAA,mBAAAlB,YAAA;MACA;QACA,KAAAmB,QAAA,CAAAC,KAAA,CAAAL,GAAA,CAAAM,OAAA;MACA;IACA;IACAC,YAAAF,KAAA,EAAAb,IAAA,EAAAgB,QAAA;MACA,KAAAtB,OAAA;MACA,KAAAkB,QAAA,CAAAC,KAAA,CAAAA,KAAA,CAAAI,QAAA;IACA;IACAC,aAAAC,CAAA;MACA,KAAAR,KAAA,eAAAlB,YAAA;MACA,KAAAkB,KAAA,mBAAAlB,YAAA;IACA;IACA2B,gBAAAnD,KAAA;MACA,IAAAA,KAAA,UAAAwB,YAAA;QACA;MACA;MACA,KAAAA,YAAA,GAAAxB,KAAA;MACA,KAAA0C,KAAA,mBAAAlB,YAAA;IACA;EACA;EACA4B,KAAA;IACApD,MAAAqD,GAAA;MACA,KAAAF,eAAA,CAAAE,GAAA;IACA;EACA;EACAC,QAAA;IACA,KAAA1B,IAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}