{"ast":null,"code":"import { uploadFile } from \"@/api/index\";\nexport default {\n  name: \"fileUpload\",\n  props: {\n    value: Object,\n    size: String,\n    type: String,\n    ghost: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    shape: String,\n    icon: {\n      type: String,\n      default: \"ios-cloud-upload-outline\"\n    },\n    text: {\n      type: String,\n      default: \"Upload File\"\n    },\n    maxSize: {\n      type: Number,\n      default: 5\n    },\n    accept: String\n  },\n  computed: {\n    format() {\n      if (this.accept) {\n        let format = [];\n        this.accept.split(\",\").forEach(e => {\n          format.push(e.replace(\".\", \"\").replace(\" \", \"\"));\n        });\n        return format;\n      } else {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      accessToken: {},\n      title: \"Click to download\",\n      currentValue: this.value,\n      loading: false,\n      uploadFileUrl: uploadFile\n    };\n  },\n  methods: {\n    init() {\n      this.accessToken = {\n        accessToken: this.getStore(\"accessToken\")\n      };\n    },\n    download() {\n      if (!this.currentValue.url) {\n        this.$Message.error(\"Invalid link\");\n        return;\n      }\n      window.open(this.currentValue.url + \"?attname=&response-content-type=application/octet-stream&filename=\" + this.currentValue.name);\n    },\n    handleFormatError(file) {\n      this.loading = false;\n      this.$Notice.warning({\n        title: \"Unsupported file format\",\n        desc: \"The selected file ‘\" + file.name + \"’ has an incorrect format. Please select \" + this.accept + \" format files\"\n      });\n    },\n    handleMaxSize(file) {\n      this.loading = false;\n      this.$Notice.warning({\n        title: \"File size too large\",\n        desc: \"The selected file ‘\" + file.name + \"’ is too large, it must not exceed \" + this.maxSize + \"M.\"\n      });\n    },\n    beforeUpload() {\n      this.loading = true;\n      return true;\n    },\n    handleSuccess(res, file) {\n      this.loading = false;\n      if (res.success) {\n        this.currentValue = {\n          url: res.result,\n          name: file.name,\n          size: file.size\n        };\n        this.title = \"Click to download (\" + (file.size * 1.0 / (1024 * 1024)).toFixed(2) + \" MB)\";\n        this.$emit(\"input\", this.currentValue);\n        this.$emit(\"on-change\", this.currentValue);\n      } else {\n        this.$Message.error(res.message);\n      }\n    },\n    handleError(error, file, fileList) {\n      this.loading = false;\n      this.$Message.error(error.toString());\n    },\n    handleChange(v) {\n      this.$emit(\"input\", this.currentValue);\n      this.$emit(\"on-change\", this.currentValue);\n    },\n    setCurrentValue(value) {\n      if (value === this.currentValue) {\n        return;\n      }\n      this.currentValue = value;\n      if (this.currentValue.size) {\n        this.title = \"Click to download (\" + (this.currentValue.size * 1.0 / (1024 * 1024)).toFixed(2) + \" MB)\";\n      } else {\n        this.title = \"Click to download\";\n      }\n      this.$emit(\"on-change\", this.currentValue);\n    }\n  },\n  watch: {\n    value(val) {\n      this.setCurrentValue(val);\n    }\n  },\n  mounted() {\n    this.init();\n  }\n};","map":{"version":3,"names":["uploadFile","name","props","value","Object","size","String","type","ghost","Boolean","default","disabled","shape","icon","text","maxSize","Number","accept","computed","format","split","forEach","e","push","replace","data","accessToken","title","currentValue","loading","uploadFileUrl","methods","init","getStore","download","url","$Message","error","window","open","handleFormatError","file","$Notice","warning","desc","handleMaxSize","beforeUpload","handleSuccess","res","success","result","toFixed","$emit","message","handleError","fileList","toString","handleChange","v","setCurrentValue","watch","val","mounted"],"sources":["src/views/template/file-upload.vue"],"sourcesContent":["<template>\n    <div>\n        <div class=\"file-upload-wrap\">\n            <Upload :action=\"uploadFileUrl\" :headers=\"accessToken\" :on-success=\"handleSuccess\" :on-error=\"handleError\" :format=\"format\" :accept=\"accept\" :max-size=\"maxSize*1024\" :on-format-error=\"handleFormatError\" :on-exceeded-size=\"handleMaxSize\" :before-upload=\"beforeUpload\" :show-upload-list=\"false\" class=\"file-upload\">\n                <Button :loading=\"loading\" :type=\"type\" :ghost=\"ghost\" :shape=\"shape\" :size=\"size\" :disabled=\"disabled\" :icon=\"icon\">{{text}}</Button>\n            </Upload>\n            <Tooltip transfer :content=\"title\" placement=\"top\">\n                <a @click=\"download\">{{currentValue.name}}</a>\n            </Tooltip>\n        </div>\n    </div>\n    </template>\n    \n    <script>\n    import {\n        uploadFile\n    } from \"@/api/index\";\n    export default {\n        name: \"fileUpload\",\n        props: {\n            value: Object,\n            size: String,\n            type: String,\n            ghost: {\n                type: Boolean,\n                default: false\n            },\n            disabled: {\n                type: Boolean,\n                default: false\n            },\n            shape: String,\n            icon: {\n                type: String,\n                default: \"ios-cloud-upload-outline\"\n            },\n            text: {\n                type: String,\n                default: \"Upload File\"\n            },\n            maxSize: {\n                type: Number,\n                default: 5\n            },\n            accept: String\n        },\n        computed: {\n            format() {\n                if (this.accept) {\n                    let format = [];\n                    this.accept.split(\",\").forEach(e => {\n                        format.push(e.replace(\".\", \"\").replace(\" \", \"\"));\n                    });\n                    return format;\n                } else {\n                    return [];\n                }\n            }\n        },\n        data() {\n            return {\n                accessToken: {},\n                title: \"Click to download\",\n                currentValue: this.value,\n                loading: false,\n                uploadFileUrl: uploadFile\n            };\n        },\n        methods: {\n            init() {\n                this.accessToken = {\n                    accessToken: this.getStore(\"accessToken\")\n                };\n            },\n            download() {\n                if (!this.currentValue.url) {\n                    this.$Message.error(\"Invalid link\");\n                    return;\n                }\n                window.open(\n                    this.currentValue.url +\n                    \"?attname=&response-content-type=application/octet-stream&filename=\" +\n                    this.currentValue.name\n                );\n            },\n            handleFormatError(file) {\n                this.loading = false;\n                this.$Notice.warning({\n                    title: \"Unsupported file format\",\n                    desc: \"The selected file ‘\" +\n                        file.name +\n                        \"’ has an incorrect format. Please select \" +\n                        this.accept +\n                        \" format files\"\n                });\n            },\n            handleMaxSize(file) {\n                this.loading = false;\n                this.$Notice.warning({\n                    title: \"File size too large\",\n                    desc: \"The selected file ‘\" +\n                        file.name +\n                        \"’ is too large, it must not exceed \" +\n                        this.maxSize +\n                        \"M.\"\n                });\n            },\n            beforeUpload() {\n                this.loading = true;\n                return true;\n            },\n            handleSuccess(res, file) {\n                this.loading = false;\n                if (res.success) {\n                    this.currentValue = {\n                        url: res.result,\n                        name: file.name,\n                        size: file.size\n                    };\n                    this.title =\n                        \"Click to download (\" +\n                        ((file.size * 1.0) / (1024 * 1024)).toFixed(2) +\n                        \" MB)\";\n                    this.$emit(\"input\", this.currentValue);\n                    this.$emit(\"on-change\", this.currentValue);\n                } else {\n                    this.$Message.error(res.message);\n                }\n            },\n            handleError(error, file, fileList) {\n                this.loading = false;\n                this.$Message.error(error.toString());\n            },\n            handleChange(v) {\n                this.$emit(\"input\", this.currentValue);\n                this.$emit(\"on-change\", this.currentValue);\n            },\n            setCurrentValue(value) {\n                if (value === this.currentValue) {\n                    return;\n                }\n                this.currentValue = value;\n                if (this.currentValue.size) {\n                    this.title =\n                        \"Click to download (\" +\n                        ((this.currentValue.size * 1.0) / (1024 * 1024)).toFixed(2) +\n                        \" MB)\";\n                } else {\n                    this.title = \"Click to download\";\n                }\n                this.$emit(\"on-change\", this.currentValue);\n            }\n        },\n        watch: {\n            value(val) {\n                this.setCurrentValue(val);\n            }\n        },\n        mounted() {\n            this.init();\n        }\n    };\n    </script>\n    \n    <style lang=\"less\" scoped>\n    .file-upload-wrap {\n        display: flex;\n        align-items: center;\n    \n        .file-upload {\n            display: inline-block;\n            margin-right: 10px;\n        }\n    }\n    </style>\n    "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}