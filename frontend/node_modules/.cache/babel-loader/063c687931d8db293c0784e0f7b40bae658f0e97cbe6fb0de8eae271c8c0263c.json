{"ast":null,"code":"import { initDepartment, addDepartment, editDepartment, deleteDepartment, searchDepartment, getUserByDepartmentId, getMyUserListData } from \"./api.js\";\nexport default {\n  name: \"department-manage\",\n  data() {\n    return {\n      userLoading: true,\n      searchForm: {\n        pageNumber: 1,\n        pageSize: 10,\n        sort: \"createTime\",\n        order: \"desc\",\n        departmentId: \"\"\n      },\n      userData: [],\n      userTotal: 0,\n      selectList: [],\n      selectCount: 0,\n      selectRow: {},\n      loading: true,\n      maxHeight: \"500px\",\n      strict: true,\n      userLoading: false,\n      loadingEdit: true,\n      addOrEditDepartmentModal: false,\n      selectList: [],\n      selectCount: 0,\n      showParent: false,\n      modalTitle: \"\",\n      editTitle: \"\",\n      searchKey: \"\",\n      form: {\n        id: \"\",\n        title: \"\",\n        parentId: \"\",\n        parentTitle: \"\",\n        sortOrder: 0,\n        status: 0\n      },\n      formAdd: {},\n      formValidate: {\n        title: [{\n          required: true,\n          message: \"Name cannot be empty\",\n          trigger: \"blur\"\n        }],\n        sortOrder: [{\n          required: true,\n          type: \"number\",\n          message: \"Sort order cannot be empty\",\n          trigger: \"blur\"\n        }]\n      },\n      submitLoading: false,\n      data: [],\n      dataEdit: [],\n      users: [],\n      userColumns: [{\n        type: \"selection\",\n        width: 60,\n        align: \"center\",\n        fixed: \"left\"\n      }, {\n        type: \"index\",\n        width: 60,\n        align: \"center\",\n        fixed: \"left\"\n      }, {\n        title: \"Username\",\n        key: \"nickname\",\n        minWidth: 125,\n        sortable: true,\n        fixed: \"left\"\n      }, {\n        title: \"Login Account\",\n        key: \"username\",\n        minWidth: 125,\n        sortable: true\n      }, {\n        title: \"Avatar\",\n        key: \"avatar\",\n        width: 80,\n        align: \"center\",\n        render: (h, params) => {\n          return h(\"Avatar\", {\n            props: {\n              src: params.row.avatar\n            }\n          });\n        }\n      }, {\n        title: \"Department\",\n        key: \"departmentTitle\",\n        minWidth: 120\n      }, {\n        title: \"Mobile\",\n        key: \"mobile\",\n        minWidth: 125,\n        sortable: true\n      }, {\n        title: \"Email\",\n        key: \"email\",\n        minWidth: 180,\n        sortable: true\n      }, {\n        title: \"Gender\",\n        key: \"sex\",\n        width: 70,\n        align: \"center\"\n      }, {\n        title: \"Type\",\n        key: \"type\",\n        align: \"center\",\n        width: 100,\n        render: (h, params) => {\n          if (params.row.type == 1) {\n            return h(\"div\", [h(\"Tag\", {\n              props: {\n                color: \"magenta\",\n                size: \"medium\"\n              }\n            }, \"Admin\")]);\n          } else {\n            return h(\"div\", [h(\"Tag\", {\n              props: {\n                color: \"blue\",\n                size: \"default\"\n              }\n            }, \"User\")]);\n          }\n        }\n      }, {\n        title: \"Status\",\n        key: \"status\",\n        align: \"center\",\n        width: 110,\n        render: (h, params) => {\n          return h(\"div\", [h(\"Tag\", {\n            props: {\n              color: params.row.status == 0 ? \"green\" : \"red\",\n              size: \"medium\"\n            }\n          }, params.row.status == 0 ? \"Enabled\" : \"Disabled\")]);\n        }\n      }]\n    };\n  },\n  methods: {\n    init() {\n      this.getParentList();\n      this.getParentListEdit();\n      this.getUserDataList();\n    },\n    getUserDataList() {\n      var that = this;\n      that.userLoading = true;\n      getMyUserListData(that.searchForm).then(res => {\n        that.userLoading = false;\n        if (res.success) {\n          that.userData = res.result.records;\n          that.userTotal = res.result.total;\n        }\n      });\n    },\n    getParentList() {\n      this.loading = true;\n      initDepartment().then(res => {\n        this.loading = false;\n        if (res.success) {\n          res.result.forEach(function (e) {\n            if (e.isParent) {\n              e.loading = false;\n              e.children = [];\n              e._loading = false;\n            }\n          });\n          this.data = res.result;\n        }\n      });\n    },\n    getParentListEdit() {\n      this.loadingEdit = true;\n      initDepartment().then(res => {\n        this.loadingEdit = false;\n        if (res.success) {\n          res.result.forEach(function (e) {\n            if (e.isParent) {\n              e.loading = false;\n              e.children = [];\n            }\n          });\n          let first = {\n            id: \"0\",\n            title: \"First-level Department\"\n          };\n          res.result.unshift(first);\n          this.dataEdit = res.result;\n        }\n      });\n    },\n    loadData(item, callback) {\n      initDepartment({\n        parentId: item.id\n      }).then(res => {\n        if (res.success) {\n          res.result.forEach(function (e) {\n            if (e.isParent) {\n              e.loading = false;\n              e.children = [];\n              e._loading = false;\n            }\n          });\n          callback(res.result);\n        }\n      });\n    },\n    search() {\n      if (this.searchKey) {\n        this.loading = true;\n        searchDepartment({\n          title: this.searchKey\n        }).then(res => {\n          this.loading = false;\n          if (res.success) {\n            this.data = res.result;\n          }\n        });\n      } else {\n        this.getParentList();\n      }\n    },\n    excelData() {\n      this.$refs.table.exportCsv({\n        filename: \"Department User Export Results\"\n      });\n    },\n    selectTree(v) {\n      if (v.length > 0) {\n        for (let attr in v[0]) {\n          if (v[0][attr] == null) {\n            v[0][attr] = \"\";\n          }\n        }\n        let str = JSON.stringify(v[0]);\n        let data = JSON.parse(str);\n        this.editTitle = data.title;\n        this.userLoading = true;\n        getUserByDepartmentId({\n          departmentId: data.id\n        }).then(res => {\n          this.userLoading = false;\n          if (res.success) {\n            this.users = res.result;\n            this.form = data;\n          }\n        });\n        this.searchForm.departmentId = v[0].id;\n        this.getUserDataList();\n      } else {\n        this.cancelEdit();\n        this.searchForm.departmentId = \"\";\n        this.getUserDataList();\n      }\n    },\n    cancelEdit() {\n      let data = this.$refs.tree.getSelectedNodes()[0];\n      if (data) {\n        data.selected = false;\n      }\n      this.$refs.form.resetFields();\n      delete this.form.id;\n      this.editTitle = \"\";\n    },\n    selectTreeEdit(v) {\n      if (v.length > 0) {\n        for (let attr in v[0]) {\n          if (v[0][attr] == null) {\n            v[0][attr] = \"\";\n          }\n        }\n        let str = JSON.stringify(v[0]);\n        let data = JSON.parse(str);\n        this.form.parentId = data.id;\n        this.form.parentTitle = data.title;\n      }\n    },\n    handleReset() {\n      this.$refs.form.resetFields();\n      this.form.status = 0;\n    },\n    showSelect(e) {\n      this.selectList = e;\n      this.selectCount = e.length;\n    },\n    clearSelectAll() {\n      this.$refs.table.selectAll(false);\n    },\n    submitEdit() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          if (!this.form.id) {\n            this.$Message.warning(\"Please select the department to edit first\");\n            return;\n          }\n          this.submitLoading = true;\n          editDepartment(this.form).then(res => {\n            this.submitLoading = false;\n            if (res.success) {\n              this.$Message.success(\"Edit successful\");\n              this.init();\n              this.addOrEditDepartmentModal = false;\n            }\n          });\n        }\n      });\n    },\n    submitAdd() {\n      this.$refs.formAdd.validate(valid => {\n        if (valid) {\n          this.submitLoading = true;\n          addDepartment(this.formAdd).then(res => {\n            this.submitLoading = false;\n            if (res.success) {\n              this.$Message.success(\"Add successful\");\n              this.init();\n              this.addOrEditDepartmentModal = false;\n            }\n          });\n        }\n      });\n    },\n    delAll() {\n      this.selectList.length > 0 ? this.$Modal.confirm({\n        title: \"Warning\",\n        content: \"Delete selected users?\",\n        onOk: () => {\n          this.submitLoading = true;\n          deleteDepartment({\n            departmentIds: this.selectList.map(Number)\n          }).then(res => {\n            this.submitLoading = false;\n            if (res.success) {\n              this.$Message.success(\"Delete successful\");\n              this.init();\n              this.clearSelectAll();\n            }\n          });\n        }\n      }) : this.$Message.warning(\"Please select the department to delete first\");\n    },\n    rowClick(e) {\n      this.selectRow = e;\n      this.addOrEditDepartmentModal = true;\n      this.modalTitle = \"Edit Department\";\n      this.form = Object.assign({}, e);\n      this.form.status = e.status == \"Enabled\" ? 0 : -1;\n      this.form.parentTitle = this.getParentTitle(e.parentId);\n    },\n    getParentTitle(id) {\n      let title = \"\";\n      if (id) {\n        this.dataEdit.forEach(item => {\n          if (item.id == id) {\n            title = item.title;\n          }\n        });\n      }\n      return title;\n    },\n    add() {\n      if (this.selectRow.title) {\n        this.addOrEditDepartmentModal = true;\n        this.modalTitle = \"Add Department\";\n        this.formAdd = {\n          parentId: this.selectRow.id,\n          title: \"\",\n          sortOrder: 0,\n          status: 0\n        };\n        this.showParent = true;\n      } else {\n        this.$Message.warning(\"Please select the parent department first\");\n      }\n    },\n    changePage(e) {\n      this.searchForm.pageNumber = e;\n      this.getUserDataList();\n    },\n    changePageSize(e) {\n      this.searchForm.pageNumber = 1;\n      this.searchForm.pageSize = e;\n      this.getUserDataList();\n    },\n    changeSort(e) {\n      this.searchForm.sort = e.prop;\n      this.searchForm.order = e.order == \"ascending\" ? \"asc\" : \"desc\";\n      this.getUserDataList();\n    },\n    rowClassName(row, index) {\n      if (row.status == \"Enabled\") {\n        return \"\";\n      } else {\n        return \"warning-row\";\n      }\n    }\n  },\n  created() {\n    this.init();\n  }\n};","map":{"version":3,"names":["initDepartment","addDepartment","editDepartment","deleteDepartment","searchDepartment","getUserByDepartmentId","getMyUserListData","name","data","userLoading","searchForm","pageNumber","pageSize","sort","order","departmentId","userData","userTotal","selectList","selectCount","selectRow","loading","maxHeight","strict","loadingEdit","addOrEditDepartmentModal","showParent","modalTitle","editTitle","searchKey","form","id","title","parentId","parentTitle","sortOrder","status","formAdd","formValidate","required","message","trigger","type","submitLoading","dataEdit","users","userColumns","width","align","fixed","key","minWidth","sortable","render","h","params","props","src","row","avatar","color","size","methods","init","getParentList","getParentListEdit","getUserDataList","that","then","res","success","result","records","total","forEach","e","isParent","children","_loading","first","unshift","loadData","item","callback","search","excelData","$refs","table","exportCsv","filename","selectTree","v","length","attr","str","JSON","stringify","parse","cancelEdit","tree","getSelectedNodes","selected","resetFields","selectTreeEdit","handleReset","showSelect","clearSelectAll","selectAll","submitEdit","validate","valid","$Message","warning","submitAdd","delAll","$Modal","confirm","content","onOk","departmentIds","map","Number","rowClick","Object","assign","getParentTitle","add","changePage","changePageSize","changeSort","prop","rowClassName","index","created"],"sources":["src/views/roster/department/department.vue"],"sourcesContent":["<template>\n    <div class=\"search\">\n      <Card>\n        <Row class=\"operation\">\n          <Button\n            @click=\"add\"\n            type=\"primary\"\n            icon=\"md-add\"\n            ghost\n            shape=\"circle\"\n            size=\"small\"\n            :disabled=\"!$route.meta.permTypes.includes('add')\"\n          >\n            Add\n          </Button>\n          <Button\n            @click=\"delAll\"\n            icon=\"md-trash\"\n            type=\"error\"\n            ghost\n            shape=\"circle\"\n            size=\"small\"\n            :disabled=\"!$route.meta.permTypes.includes('delete')\"\n          >\n            Delete\n          </Button>\n          <Button\n            @click=\"getParentList\"\n            icon=\"md-refresh\"\n            type=\"info\"\n            ghost\n            shape=\"circle\"\n            size=\"small\"\n          >\n            Refresh\n          </Button>\n          <Button\n            @click=\"excelData\"\n            type=\"success\"\n            icon=\"md-paper-plane\"\n            ghost\n            shape=\"circle\"\n            size=\"small\"\n          >\n            Export Users\n          </Button>\n          <i-switch v-model=\"strict\" size=\"large\" style=\"margin-left: 5px\">\n            <span slot=\"open\">Cascade</span>\n            <span slot=\"close\">Single</span>\n          </i-switch>\n        </Row>\n        <Row :gutter=\"16\">\n          <Col span=\"8\">\n            <Alert show-icon type=\"success\" v-show=\"form.id\">\n              Current Selection\n              <span class=\"select-title\">{{ editTitle }}</span>\n              <a class=\"select-clear\" @click=\"cancelEdit\"> Cancel Selection</a>\n            </Alert>\n            <Input\n              v-model=\"searchKey\"\n              suffix=\"ios-search\"\n              @on-change=\"search\"\n              placeholder=\"Search by Department Name\"\n              clearable\n            />\n            <div class=\"tree-bar\" :style=\"{ maxHeight: maxHeight }\">\n              <Tree\n                ref=\"tree\"\n                :data=\"data\"\n                :load-data=\"loadData\"\n                show-checkbox\n                @on-check-change=\"changeSelect\"\n                @on-select-change=\"selectTree\"\n                :check-strictly=\"!strict\"\n              ></Tree>\n              <Spin size=\"large\" fix v-if=\"loading\"></Spin>\n            </div>\n          </Col>\n          <Col span=\"16\">\n            <Form\n              ref=\"form\"\n              :model=\"form\"\n              :label-width=\"100\"\n              :rules=\"formValidate\"\n            >\n              <Row :gutter=\"16\">\n                <Col span=\"12\">\n                  <FormItem label=\"Parent Department\" prop=\"parentTitle\">\n                    <div style=\"display: flex;\">\n                      <Input\n                        v-model=\"form.parentTitle\"\n                        readonly\n                        style=\"margin-right: 10px;\"\n                      />\n                      <Poptip\n                        transfer\n                        trigger=\"click\"\n                        placement=\"right-start\"\n                        title=\"Select Parent Department\"\n                        width=\"250\"\n                      >\n                        <Button icon=\"md-list\">Select Department</Button>\n                        <div slot=\"content\" style=\"position: relative; min-height: 5vh\">\n                          <Tree\n                            :data=\"dataEdit\"\n                            :load-data=\"loadData\"\n                            @on-select-change=\"selectTreeEdit\"\n                          ></Tree>\n                          <Spin size=\"large\" fix v-if=\"loadingEdit\"></Spin>\n                        </div>\n                      </Poptip>\n                    </div>\n                  </FormItem>\n                </Col>\n                <Col span=\"12\">\n                  <FormItem label=\"Department Name\" prop=\"title\">\n                    <Input v-model=\"form.title\" />\n                  </FormItem>\n                </Col>\n              </Row>\n              <Row :gutter=\"16\">\n                <Col span=\"12\">\n                  <FormItem label=\"Department Head\" prop=\"mainHeader\">\n                    <Select\n                      :loading=\"userLoading\"\n                      not-found-text=\"No users available in this department\"\n                      v-model=\"form.mainHeader\"\n                      multiple\n                      filterable\n                      placeholder=\"Select Department Head\"\n                    >\n                      <Option\n                        v-for=\"item in users\"\n                        :value=\"item.id\"\n                        :key=\"item.id\"\n                        :label=\"item.nickname\"\n                      >\n                        <span style=\"margin-right: 10px;\">{{ item.nickname }}</span>\n                        <span style=\"color: #ccc;\">{{ item.username }}</span>\n                      </Option>\n                    </Select>\n                  </FormItem>\n                </Col>\n                <Col span=\"12\">\n                  <FormItem label=\"Department Leader\" prop=\"viceHeader\">\n                    <Select\n                      :loading=\"userLoading\"\n                      not-found-text=\"No users available in this department\"\n                      v-model=\"form.viceHeader\"\n                      multiple\n                      filterable\n                      placeholder=\"Select Department Leader\"\n                    >\n                      <Option\n                        v-for=\"item in users\"\n                        :value=\"item.id\"\n                        :key=\"item.id\"\n                        :label=\"item.nickname\"\n                      >\n                        <span style=\"margin-right: 10px;\">{{ item.nickname }}</span>\n                        <span style=\"color: #ccc;\">{{ item.username }}</span>\n                      </Option>\n                    </Select>\n                  </FormItem>\n                </Col>\n              </Row>\n              <Row :gutter=\"16\">\n                <Col span=\"8\">\n                  <FormItem label=\"Sort Order\" prop=\"sortOrder\">\n                    <Tooltip\n                      trigger=\"hover\"\n                      placement=\"right\"\n                      content=\"Smaller values indicate higher priority, supports decimals\"\n                    >\n                      <InputNumber :max=\"1000\" :min=\"0\" v-model=\"form.sortOrder\"></InputNumber>\n                    </Tooltip>\n                  </FormItem>\n                </Col>\n                <Col span=\"8\">\n                  <FormItem label=\"Is Enabled\" prop=\"status\">\n                    <i-switch\n                      size=\"large\"\n                      v-model=\"form.status\"\n                      :true-value=\"0\"\n                      :false-value=\"-1\"\n                    >\n                      <span slot=\"open\">Enabled</span>\n                      <span slot=\"close\">Disabled</span>\n                    </i-switch>\n                  </FormItem>\n                </Col>\n                <Col span=\"8\">\n                  <Form-item class=\"br\">\n                    <Button\n                      @click=\"submitEdit\"\n                      :loading=\"submitLoading\"\n                      type=\"success\"\n                      ghost\n                      shape=\"circle\"\n                      icon=\"ios-create-outline\"\n                      size=\"small\"\n                      :disabled=\"!$route.meta.permTypes.includes('edit')\"\n                    >\n                      Save\n                    </Button>\n                  </Form-item>\n                </Col>\n              </Row>\n            </Form>\n          </Col>\n        </Row>\n      </Card>\n      <Divider dashed>Users in the Department</Divider>\n      <Card>\n        <Row>\n          <Table\n            :loading=\"userLoading\"\n            border\n            :columns=\"userColumns\"\n            :data=\"userData\"\n            ref=\"table\"\n            sortable=\"custom\"\n            @on-sort-change=\"changeSort\"\n            @on-selection-change=\"changeSelect\"\n            @on-row-click=\"rowClick\"\n            :row-class-name=\"rowClassName\"\n          ></Table>\n        </Row>\n        <Row type=\"flex\" justify=\"end\" class=\"page\">\n          <Page\n            :current=\"searchForm.pageNumber\"\n            :total=\"userTotal\"\n            :page-size=\"searchForm.pageSize\"\n            @on-change=\"changePage\"\n            @on-page-size-change=\"changePageSize\"\n            :page-size-opts=\"[10, 20, 50]\"\n            size=\"small\"\n            show-total\n            show-elevator\n            show-sizer\n          ></Page>\n        </Row>\n      </Card>\n  \n      <Modal\n        :title=\"modalTitle\"\n        v-model=\"addOrEditDepartmentModal\"\n        :mask-closable=\"false\"\n        :width=\"500\"\n        on-text=\"Submit\"\n        @on-ok=\"submitAdd\"\n      >\n        <Form ref=\"formAdd\" :model=\"formAdd\" :label-width=\"85\" :rules=\"formValidate\">\n          <Row :gutter=\"16\" v-show=\"showParent\">\n            <Col span=\"24\">\n              <FormItem label=\"Parent Department:\">{{ form.title }}</FormItem>\n            </Col>\n          </Row>\n          <Row :gutter=\"16\">\n            <Col span=\"24\">\n              <FormItem label=\"Department Name\" prop=\"title\">\n                <Input v-model=\"formAdd.title\" />\n              </FormItem>\n            </Col>\n          </Row>\n          <Row :gutter=\"16\">\n            <Col span=\"12\">\n              <FormItem label=\"Sort Order\" prop=\"sortOrder\">\n                <Tooltip\n                  trigger=\"hover\"\n                  placement=\"right\"\n                  content=\"Smaller values indicate higher priority, supports decimals\"\n                >\n                  <InputNumber :max=\"1000\" :min=\"0\" v-model=\"formAdd.sortOrder\"></InputNumber>\n                </Tooltip>\n              </FormItem>\n            </Col>\n            <Col span=\"12\">\n              <FormItem label=\"Is Enabled\" prop=\"status\">\n                <i-switch\n                  size=\"large\"\n                  v-model=\"formAdd.status\"\n                  :true-value=\"0\"\n                  :false-value=\"-1\"\n                >\n                  <span slot=\"open\">Enabled</span>\n                  <span slot=\"close\">Disabled</span>\n                </i-switch>\n              </FormItem>\n            </Col>\n          </Row>\n        </Form>\n      </Modal>\n    </div>\n  </template>\n  \n  <script>\n  import {\n    initDepartment,\n    addDepartment,\n    editDepartment,\n    deleteDepartment,\n    searchDepartment,\n    getUserByDepartmentId,\n    getMyUserListData\n  } from \"./api.js\";\n  \n  export default {\n    name: \"department-manage\",\n    data() {\n      return {\n        userLoading: true,\n        searchForm: {\n          pageNumber: 1,\n          pageSize: 10,\n          sort: \"createTime\",\n          order: \"desc\",\n          departmentId: \"\"\n        },\n        userData: [],\n        userTotal: 0,\n        selectList: [],\n        selectCount: 0,\n        selectRow: {},\n        loading: true,\n        maxHeight: \"500px\",\n        strict: true,\n        userLoading: false,\n        loadingEdit: true,\n        addOrEditDepartmentModal: false,\n        selectList: [],\n        selectCount: 0,\n        showParent: false,\n        modalTitle: \"\",\n        editTitle: \"\",\n        searchKey: \"\",\n        form: {\n          id: \"\",\n          title: \"\",\n          parentId: \"\",\n          parentTitle: \"\",\n          sortOrder: 0,\n          status: 0\n        },\n        formAdd: {},\n        formValidate: {\n          title: [\n            {\n              required: true,\n              message: \"Name cannot be empty\",\n              trigger: \"blur\"\n            }\n          ],\n          sortOrder: [\n            {\n              required: true,\n              type: \"number\",\n              message: \"Sort order cannot be empty\",\n              trigger: \"blur\"\n            }\n          ]\n        },\n        submitLoading: false,\n        data: [],\n        dataEdit: [],\n        users: [],\n        userColumns: [\n          {\n            type: \"selection\",\n            width: 60,\n            align: \"center\",\n            fixed: \"left\"\n          },\n          {\n            type: \"index\",\n            width: 60,\n            align: \"center\",\n            fixed: \"left\"\n          },\n          {\n            title: \"Username\",\n            key: \"nickname\",\n            minWidth: 125,\n            sortable: true,\n            fixed: \"left\"\n          },\n          {\n            title: \"Login Account\",\n            key: \"username\",\n            minWidth: 125,\n            sortable: true\n          },\n          {\n            title: \"Avatar\",\n            key: \"avatar\",\n            width: 80,\n            align: \"center\",\n            render: (h, params) => {\n              return h(\"Avatar\", {\n                props: {\n                  src: params.row.avatar\n                }\n              });\n            }\n          },\n          {\n            title: \"Department\",\n            key: \"departmentTitle\",\n            minWidth: 120\n          },\n          {\n            title: \"Mobile\",\n            key: \"mobile\",\n            minWidth: 125,\n            sortable: true\n          },\n          {\n            title: \"Email\",\n            key: \"email\",\n            minWidth: 180,\n            sortable: true\n          },\n          {\n            title: \"Gender\",\n            key: \"sex\",\n            width: 70,\n            align: \"center\"\n          },\n          {\n            title: \"Type\",\n            key: \"type\",\n            align: \"center\",\n            width: 100,\n            render: (h, params) => {\n              if (params.row.type == 1) {\n                return h(\"div\", [\n                  h(\n                    \"Tag\",\n                    {\n                      props: {\n                        color: \"magenta\",\n                        size: \"medium\"\n                      }\n                    },\n                    \"Admin\"\n                  )\n                ]);\n              } else {\n                return h(\"div\", [\n                  h(\n                    \"Tag\",\n                    {\n                      props: {\n                        color: \"blue\",\n                        size: \"default\"\n                      }\n                    },\n                    \"User\"\n                  )\n                ]);\n              }\n            }\n          },\n          {\n            title: \"Status\",\n            key: \"status\",\n            align: \"center\",\n            width: 110,\n            render: (h, params) => {\n              return h(\"div\", [\n                h(\n                  \"Tag\",\n                  {\n                    props: {\n                      color: params.row.status == 0 ? \"green\" : \"red\",\n                      size: \"medium\"\n                    }\n                  },\n                  params.row.status == 0 ? \"Enabled\" : \"Disabled\"\n                )\n              ]);\n            }\n          }\n        ]\n      };\n    },\n    methods: {\n      init() {\n        this.getParentList();\n        this.getParentListEdit();\n        this.getUserDataList();\n      },\n      getUserDataList() {\n        var that = this;\n        that.userLoading = true;\n        getMyUserListData(that.searchForm).then(res => {\n          that.userLoading = false;\n          if (res.success) {\n            that.userData = res.result.records;\n            that.userTotal = res.result.total;\n          }\n        });\n      },\n      getParentList() {\n        this.loading = true;\n        initDepartment().then(res => {\n          this.loading = false;\n          if (res.success) {\n            res.result.forEach(function(e) {\n              if (e.isParent) {\n                e.loading = false;\n                e.children = [];\n                e._loading = false;\n              }\n            });\n            this.data = res.result;\n          }\n        });\n      },\n      getParentListEdit() {\n        this.loadingEdit = true;\n        initDepartment().then(res => {\n          this.loadingEdit = false;\n          if (res.success) {\n            res.result.forEach(function(e) {\n              if (e.isParent) {\n                e.loading = false;\n                e.children = [];\n              }\n            });\n            let first = {\n              id: \"0\",\n              title: \"First-level Department\"\n            };\n            res.result.unshift(first);\n            this.dataEdit = res.result;\n          }\n        });\n      },\n      loadData(item, callback) {\n        initDepartment({\n          parentId: item.id\n        }).then(res => {\n          if (res.success) {\n            res.result.forEach(function(e) {\n              if (e.isParent) {\n                e.loading = false;\n                e.children = [];\n                e._loading = false;\n              }\n            });\n            callback(res.result);\n          }\n        });\n      },\n      search() {\n        if (this.searchKey) {\n          this.loading = true;\n          searchDepartment({\n            title: this.searchKey\n          }).then(res => {\n            this.loading = false;\n            if (res.success) {\n              this.data = res.result;\n            }\n          });\n        } else {\n          this.getParentList();\n        }\n      },\n      excelData() {\n        this.$refs.table.exportCsv({\n          filename: \"Department User Export Results\"\n        });\n      },\n      selectTree(v) {\n        if (v.length > 0) {\n          for (let attr in v[0]) {\n            if (v[0][attr] == null) {\n              v[0][attr] = \"\";\n            }\n          }\n          let str = JSON.stringify(v[0]);\n          let data = JSON.parse(str);\n          this.editTitle = data.title;\n          this.userLoading = true;\n          getUserByDepartmentId({\n            departmentId: data.id\n          }).then(res => {\n            this.userLoading = false;\n            if (res.success) {\n              this.users = res.result;\n              this.form = data;\n            }\n          });\n          this.searchForm.departmentId = v[0].id;\n          this.getUserDataList();\n        } else {\n          this.cancelEdit();\n          this.searchForm.departmentId = \"\";\n          this.getUserDataList();\n        }\n      },\n      cancelEdit() {\n        let data = this.$refs.tree.getSelectedNodes()[0];\n        if (data) {\n          data.selected = false;\n        }\n        this.$refs.form.resetFields();\n        delete this.form.id;\n        this.editTitle = \"\";\n      },\n      selectTreeEdit(v) {\n        if (v.length > 0) {\n          for (let attr in v[0]) {\n            if (v[0][attr] == null) {\n              v[0][attr] = \"\";\n            }\n          }\n          let str = JSON.stringify(v[0]);\n          let data = JSON.parse(str);\n          this.form.parentId = data.id;\n          this.form.parentTitle = data.title;\n        }\n      },\n      handleReset() {\n        this.$refs.form.resetFields();\n        this.form.status = 0;\n      },\n      showSelect(e) {\n        this.selectList = e;\n        this.selectCount = e.length;\n      },\n      clearSelectAll() {\n        this.$refs.table.selectAll(false);\n      },\n      submitEdit() {\n        this.$refs.form.validate(valid => {\n          if (valid) {\n            if (!this.form.id) {\n              this.$Message.warning(\"Please select the department to edit first\");\n              return;\n            }\n            this.submitLoading = true;\n            editDepartment(this.form).then(res => {\n              this.submitLoading = false;\n              if (res.success) {\n                this.$Message.success(\"Edit successful\");\n                this.init();\n                this.addOrEditDepartmentModal = false;\n              }\n            });\n          }\n        });\n      },\n      submitAdd() {\n        this.$refs.formAdd.validate(valid => {\n          if (valid) {\n            this.submitLoading = true;\n            addDepartment(this.formAdd).then(res => {\n              this.submitLoading = false;\n              if (res.success) {\n                this.$Message.success(\"Add successful\");\n                this.init();\n                this.addOrEditDepartmentModal = false;\n              }\n            });\n          }\n        });\n      },\n      delAll() {\n        this.selectList.length > 0\n          ? this.$Modal.confirm({\n              title: \"Warning\",\n              content: \"Delete selected users?\",\n              onOk: () => {\n                this.submitLoading = true;\n                deleteDepartment({\n                  departmentIds: this.selectList.map(Number)\n                }).then(res => {\n                  this.submitLoading = false;\n                  if (res.success) {\n                    this.$Message.success(\"Delete successful\");\n                    this.init();\n                    this.clearSelectAll();\n                  }\n                });\n              }\n            })\n          : this.$Message.warning(\"Please select the department to delete first\");\n      },\n      rowClick(e) {\n        this.selectRow = e;\n        this.addOrEditDepartmentModal = true;\n        this.modalTitle = \"Edit Department\";\n        this.form = Object.assign({}, e);\n        this.form.status = e.status == \"Enabled\" ? 0 : -1;\n        this.form.parentTitle = this.getParentTitle(e.parentId);\n      },\n      getParentTitle(id) {\n        let title = \"\";\n        if (id) {\n          this.dataEdit.forEach(item => {\n            if (item.id == id) {\n              title = item.title;\n            }\n          });\n        }\n        return title;\n      },\n      add() {\n        if (this.selectRow.title) {\n          this.addOrEditDepartmentModal = true;\n          this.modalTitle = \"Add Department\";\n          this.formAdd = {\n            parentId: this.selectRow.id,\n            title: \"\",\n            sortOrder: 0,\n            status: 0\n          };\n          this.showParent = true;\n        } else {\n          this.$Message.warning(\"Please select the parent department first\");\n        }\n      },\n      changePage(e) {\n        this.searchForm.pageNumber = e;\n        this.getUserDataList();\n      },\n      changePageSize(e) {\n        this.searchForm.pageNumber = 1;\n        this.searchForm.pageSize = e;\n        this.getUserDataList();\n      },\n      changeSort(e) {\n        this.searchForm.sort = e.prop;\n        this.searchForm.order = e.order == \"ascending\" ? \"asc\" : \"desc\";\n        this.getUserDataList();\n      },\n      rowClassName(row, index) {\n        if (row.status == \"Enabled\") {\n          return \"\";\n        } else {\n          return \"warning-row\";\n        }\n      }\n    },\n    created() {\n      this.init();\n    }\n  };\n  </script>\n  \n  <style scoped>\n  .search {\n    padding: 20px;\n  }\n  .operation {\n    margin-bottom: 10px;\n    display: flex;\n    justify-content: space-between;\n  }\n  .select-title {\n    font-weight: bold;\n  }\n  .select-clear {\n    color: #1890ff;\n    cursor: pointer;\n  }\n  .tree-bar {\n    overflow-y: auto;\n  }\n  .page {\n    margin-top: 10px;\n  }\n  </style>\n  "],"mappings":"AAySA,SACAA,cAAA,EACAC,aAAA,EACAC,cAAA,EACAC,gBAAA,EACAC,gBAAA,EACAC,qBAAA,EACAC,iBAAA,QACA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,UAAA;QACAC,UAAA;QACAC,QAAA;QACAC,IAAA;QACAC,KAAA;QACAC,YAAA;MACA;MACAC,QAAA;MACAC,SAAA;MACAC,UAAA;MACAC,WAAA;MACAC,SAAA;MACAC,OAAA;MACAC,SAAA;MACAC,MAAA;MACAd,WAAA;MACAe,WAAA;MACAC,wBAAA;MACAP,UAAA;MACAC,WAAA;MACAO,UAAA;MACAC,UAAA;MACAC,SAAA;MACAC,SAAA;MACAC,IAAA;QACAC,EAAA;QACAC,KAAA;QACAC,QAAA;QACAC,WAAA;QACAC,SAAA;QACAC,MAAA;MACA;MACAC,OAAA;MACAC,YAAA;QACAN,KAAA,GACA;UACAO,QAAA;UACAC,OAAA;UACAC,OAAA;QACA,EACA;QACAN,SAAA,GACA;UACAI,QAAA;UACAG,IAAA;UACAF,OAAA;UACAC,OAAA;QACA;MAEA;MACAE,aAAA;MACAnC,IAAA;MACAoC,QAAA;MACAC,KAAA;MACAC,WAAA,GACA;QACAJ,IAAA;QACAK,KAAA;QACAC,KAAA;QACAC,KAAA;MACA,GACA;QACAP,IAAA;QACAK,KAAA;QACAC,KAAA;QACAC,KAAA;MACA,GACA;QACAjB,KAAA;QACAkB,GAAA;QACAC,QAAA;QACAC,QAAA;QACAH,KAAA;MACA,GACA;QACAjB,KAAA;QACAkB,GAAA;QACAC,QAAA;QACAC,QAAA;MACA,GACA;QACApB,KAAA;QACAkB,GAAA;QACAH,KAAA;QACAC,KAAA;QACAK,MAAA,EAAAA,CAAAC,CAAA,EAAAC,MAAA;UACA,OAAAD,CAAA;YACAE,KAAA;cACAC,GAAA,EAAAF,MAAA,CAAAG,GAAA,CAAAC;YACA;UACA;QACA;MACA,GACA;QACA3B,KAAA;QACAkB,GAAA;QACAC,QAAA;MACA,GACA;QACAnB,KAAA;QACAkB,GAAA;QACAC,QAAA;QACAC,QAAA;MACA,GACA;QACApB,KAAA;QACAkB,GAAA;QACAC,QAAA;QACAC,QAAA;MACA,GACA;QACApB,KAAA;QACAkB,GAAA;QACAH,KAAA;QACAC,KAAA;MACA,GACA;QACAhB,KAAA;QACAkB,GAAA;QACAF,KAAA;QACAD,KAAA;QACAM,MAAA,EAAAA,CAAAC,CAAA,EAAAC,MAAA;UACA,IAAAA,MAAA,CAAAG,GAAA,CAAAhB,IAAA;YACA,OAAAY,CAAA,SACAA,CAAA,CACA,OACA;cACAE,KAAA;gBACAI,KAAA;gBACAC,IAAA;cACA;YACA,GACA,OACA,EACA;UACA;YACA,OAAAP,CAAA,SACAA,CAAA,CACA,OACA;cACAE,KAAA;gBACAI,KAAA;gBACAC,IAAA;cACA;YACA,GACA,MACA,EACA;UACA;QACA;MACA,GACA;QACA7B,KAAA;QACAkB,GAAA;QACAF,KAAA;QACAD,KAAA;QACAM,MAAA,EAAAA,CAAAC,CAAA,EAAAC,MAAA;UACA,OAAAD,CAAA,SACAA,CAAA,CACA,OACA;YACAE,KAAA;cACAI,KAAA,EAAAL,MAAA,CAAAG,GAAA,CAAAtB,MAAA;cACAyB,IAAA;YACA;UACA,GACAN,MAAA,CAAAG,GAAA,CAAAtB,MAAA,8BACA,EACA;QACA;MACA;IAEA;EACA;EACA0B,OAAA;IACAC,KAAA;MACA,KAAAC,aAAA;MACA,KAAAC,iBAAA;MACA,KAAAC,eAAA;IACA;IACAA,gBAAA;MACA,IAAAC,IAAA;MACAA,IAAA,CAAA1D,WAAA;MACAH,iBAAA,CAAA6D,IAAA,CAAAzD,UAAA,EAAA0D,IAAA,CAAAC,GAAA;QACAF,IAAA,CAAA1D,WAAA;QACA,IAAA4D,GAAA,CAAAC,OAAA;UACAH,IAAA,CAAAnD,QAAA,GAAAqD,GAAA,CAAAE,MAAA,CAAAC,OAAA;UACAL,IAAA,CAAAlD,SAAA,GAAAoD,GAAA,CAAAE,MAAA,CAAAE,KAAA;QACA;MACA;IACA;IACAT,cAAA;MACA,KAAA3C,OAAA;MACArB,cAAA,GAAAoE,IAAA,CAAAC,GAAA;QACA,KAAAhD,OAAA;QACA,IAAAgD,GAAA,CAAAC,OAAA;UACAD,GAAA,CAAAE,MAAA,CAAAG,OAAA,WAAAC,CAAA;YACA,IAAAA,CAAA,CAAAC,QAAA;cACAD,CAAA,CAAAtD,OAAA;cACAsD,CAAA,CAAAE,QAAA;cACAF,CAAA,CAAAG,QAAA;YACA;UACA;UACA,KAAAtE,IAAA,GAAA6D,GAAA,CAAAE,MAAA;QACA;MACA;IACA;IACAN,kBAAA;MACA,KAAAzC,WAAA;MACAxB,cAAA,GAAAoE,IAAA,CAAAC,GAAA;QACA,KAAA7C,WAAA;QACA,IAAA6C,GAAA,CAAAC,OAAA;UACAD,GAAA,CAAAE,MAAA,CAAAG,OAAA,WAAAC,CAAA;YACA,IAAAA,CAAA,CAAAC,QAAA;cACAD,CAAA,CAAAtD,OAAA;cACAsD,CAAA,CAAAE,QAAA;YACA;UACA;UACA,IAAAE,KAAA;YACAhD,EAAA;YACAC,KAAA;UACA;UACAqC,GAAA,CAAAE,MAAA,CAAAS,OAAA,CAAAD,KAAA;UACA,KAAAnC,QAAA,GAAAyB,GAAA,CAAAE,MAAA;QACA;MACA;IACA;IACAU,SAAAC,IAAA,EAAAC,QAAA;MACAnF,cAAA;QACAiC,QAAA,EAAAiD,IAAA,CAAAnD;MACA,GAAAqC,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAC,OAAA;UACAD,GAAA,CAAAE,MAAA,CAAAG,OAAA,WAAAC,CAAA;YACA,IAAAA,CAAA,CAAAC,QAAA;cACAD,CAAA,CAAAtD,OAAA;cACAsD,CAAA,CAAAE,QAAA;cACAF,CAAA,CAAAG,QAAA;YACA;UACA;UACAK,QAAA,CAAAd,GAAA,CAAAE,MAAA;QACA;MACA;IACA;IACAa,OAAA;MACA,SAAAvD,SAAA;QACA,KAAAR,OAAA;QACAjB,gBAAA;UACA4B,KAAA,OAAAH;QACA,GAAAuC,IAAA,CAAAC,GAAA;UACA,KAAAhD,OAAA;UACA,IAAAgD,GAAA,CAAAC,OAAA;YACA,KAAA9D,IAAA,GAAA6D,GAAA,CAAAE,MAAA;UACA;QACA;MACA;QACA,KAAAP,aAAA;MACA;IACA;IACAqB,UAAA;MACA,KAAAC,KAAA,CAAAC,KAAA,CAAAC,SAAA;QACAC,QAAA;MACA;IACA;IACAC,WAAAC,CAAA;MACA,IAAAA,CAAA,CAAAC,MAAA;QACA,SAAAC,IAAA,IAAAF,CAAA;UACA,IAAAA,CAAA,IAAAE,IAAA;YACAF,CAAA,IAAAE,IAAA;UACA;QACA;QACA,IAAAC,GAAA,GAAAC,IAAA,CAAAC,SAAA,CAAAL,CAAA;QACA,IAAAnF,IAAA,GAAAuF,IAAA,CAAAE,KAAA,CAAAH,GAAA;QACA,KAAAlE,SAAA,GAAApB,IAAA,CAAAwB,KAAA;QACA,KAAAvB,WAAA;QACAJ,qBAAA;UACAU,YAAA,EAAAP,IAAA,CAAAuB;QACA,GAAAqC,IAAA,CAAAC,GAAA;UACA,KAAA5D,WAAA;UACA,IAAA4D,GAAA,CAAAC,OAAA;YACA,KAAAzB,KAAA,GAAAwB,GAAA,CAAAE,MAAA;YACA,KAAAzC,IAAA,GAAAtB,IAAA;UACA;QACA;QACA,KAAAE,UAAA,CAAAK,YAAA,GAAA4E,CAAA,IAAA5D,EAAA;QACA,KAAAmC,eAAA;MACA;QACA,KAAAgC,UAAA;QACA,KAAAxF,UAAA,CAAAK,YAAA;QACA,KAAAmD,eAAA;MACA;IACA;IACAgC,WAAA;MACA,IAAA1F,IAAA,QAAA8E,KAAA,CAAAa,IAAA,CAAAC,gBAAA;MACA,IAAA5F,IAAA;QACAA,IAAA,CAAA6F,QAAA;MACA;MACA,KAAAf,KAAA,CAAAxD,IAAA,CAAAwE,WAAA;MACA,YAAAxE,IAAA,CAAAC,EAAA;MACA,KAAAH,SAAA;IACA;IACA2E,eAAAZ,CAAA;MACA,IAAAA,CAAA,CAAAC,MAAA;QACA,SAAAC,IAAA,IAAAF,CAAA;UACA,IAAAA,CAAA,IAAAE,IAAA;YACAF,CAAA,IAAAE,IAAA;UACA;QACA;QACA,IAAAC,GAAA,GAAAC,IAAA,CAAAC,SAAA,CAAAL,CAAA;QACA,IAAAnF,IAAA,GAAAuF,IAAA,CAAAE,KAAA,CAAAH,GAAA;QACA,KAAAhE,IAAA,CAAAG,QAAA,GAAAzB,IAAA,CAAAuB,EAAA;QACA,KAAAD,IAAA,CAAAI,WAAA,GAAA1B,IAAA,CAAAwB,KAAA;MACA;IACA;IACAwE,YAAA;MACA,KAAAlB,KAAA,CAAAxD,IAAA,CAAAwE,WAAA;MACA,KAAAxE,IAAA,CAAAM,MAAA;IACA;IACAqE,WAAA9B,CAAA;MACA,KAAAzD,UAAA,GAAAyD,CAAA;MACA,KAAAxD,WAAA,GAAAwD,CAAA,CAAAiB,MAAA;IACA;IACAc,eAAA;MACA,KAAApB,KAAA,CAAAC,KAAA,CAAAoB,SAAA;IACA;IACAC,WAAA;MACA,KAAAtB,KAAA,CAAAxD,IAAA,CAAA+E,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,UAAAhF,IAAA,CAAAC,EAAA;YACA,KAAAgF,QAAA,CAAAC,OAAA;YACA;UACA;UACA,KAAArE,aAAA;UACAzC,cAAA,MAAA4B,IAAA,EAAAsC,IAAA,CAAAC,GAAA;YACA,KAAA1B,aAAA;YACA,IAAA0B,GAAA,CAAAC,OAAA;cACA,KAAAyC,QAAA,CAAAzC,OAAA;cACA,KAAAP,IAAA;cACA,KAAAtC,wBAAA;YACA;UACA;QACA;MACA;IACA;IACAwF,UAAA;MACA,KAAA3B,KAAA,CAAAjD,OAAA,CAAAwE,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAnE,aAAA;UACA1C,aAAA,MAAAoC,OAAA,EAAA+B,IAAA,CAAAC,GAAA;YACA,KAAA1B,aAAA;YACA,IAAA0B,GAAA,CAAAC,OAAA;cACA,KAAAyC,QAAA,CAAAzC,OAAA;cACA,KAAAP,IAAA;cACA,KAAAtC,wBAAA;YACA;UACA;QACA;MACA;IACA;IACAyF,OAAA;MACA,KAAAhG,UAAA,CAAA0E,MAAA,OACA,KAAAuB,MAAA,CAAAC,OAAA;QACApF,KAAA;QACAqF,OAAA;QACAC,IAAA,EAAAA,CAAA;UACA,KAAA3E,aAAA;UACAxC,gBAAA;YACAoH,aAAA,OAAArG,UAAA,CAAAsG,GAAA,CAAAC,MAAA;UACA,GAAArD,IAAA,CAAAC,GAAA;YACA,KAAA1B,aAAA;YACA,IAAA0B,GAAA,CAAAC,OAAA;cACA,KAAAyC,QAAA,CAAAzC,OAAA;cACA,KAAAP,IAAA;cACA,KAAA2C,cAAA;YACA;UACA;QACA;MACA,KACA,KAAAK,QAAA,CAAAC,OAAA;IACA;IACAU,SAAA/C,CAAA;MACA,KAAAvD,SAAA,GAAAuD,CAAA;MACA,KAAAlD,wBAAA;MACA,KAAAE,UAAA;MACA,KAAAG,IAAA,GAAA6F,MAAA,CAAAC,MAAA,KAAAjD,CAAA;MACA,KAAA7C,IAAA,CAAAM,MAAA,GAAAuC,CAAA,CAAAvC,MAAA;MACA,KAAAN,IAAA,CAAAI,WAAA,QAAA2F,cAAA,CAAAlD,CAAA,CAAA1C,QAAA;IACA;IACA4F,eAAA9F,EAAA;MACA,IAAAC,KAAA;MACA,IAAAD,EAAA;QACA,KAAAa,QAAA,CAAA8B,OAAA,CAAAQ,IAAA;UACA,IAAAA,IAAA,CAAAnD,EAAA,IAAAA,EAAA;YACAC,KAAA,GAAAkD,IAAA,CAAAlD,KAAA;UACA;QACA;MACA;MACA,OAAAA,KAAA;IACA;IACA8F,IAAA;MACA,SAAA1G,SAAA,CAAAY,KAAA;QACA,KAAAP,wBAAA;QACA,KAAAE,UAAA;QACA,KAAAU,OAAA;UACAJ,QAAA,OAAAb,SAAA,CAAAW,EAAA;UACAC,KAAA;UACAG,SAAA;UACAC,MAAA;QACA;QACA,KAAAV,UAAA;MACA;QACA,KAAAqF,QAAA,CAAAC,OAAA;MACA;IACA;IACAe,WAAApD,CAAA;MACA,KAAAjE,UAAA,CAAAC,UAAA,GAAAgE,CAAA;MACA,KAAAT,eAAA;IACA;IACA8D,eAAArD,CAAA;MACA,KAAAjE,UAAA,CAAAC,UAAA;MACA,KAAAD,UAAA,CAAAE,QAAA,GAAA+D,CAAA;MACA,KAAAT,eAAA;IACA;IACA+D,WAAAtD,CAAA;MACA,KAAAjE,UAAA,CAAAG,IAAA,GAAA8D,CAAA,CAAAuD,IAAA;MACA,KAAAxH,UAAA,CAAAI,KAAA,GAAA6D,CAAA,CAAA7D,KAAA;MACA,KAAAoD,eAAA;IACA;IACAiE,aAAAzE,GAAA,EAAA0E,KAAA;MACA,IAAA1E,GAAA,CAAAtB,MAAA;QACA;MACA;QACA;MACA;IACA;EACA;EACAiG,QAAA;IACA,KAAAtE,IAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}